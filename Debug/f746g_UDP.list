
f746g_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdf0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ef8  0800ffc0  0800ffc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012eb8  08012eb8  000141c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012eb8  08012eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ec0  08012ec0  000141c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ec0  08012ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ec4  08012ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012ec8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08012f50  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012ff0  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d60  200001c8  08013090  000141c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007f28  08013090  00014f28  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000141c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cd42  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005342  00000000  00000000  00030f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014d8  00000000  00000000  00036280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000109b  00000000  00000000  00037758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032371  00000000  00000000  000387f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002974f  00000000  00000000  0006ab64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fef03  00000000  00000000  000942b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001931b6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005d14  00000000  00000000  001931fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  00198f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ffa8 	.word	0x0800ffa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	0800ffa8 	.word	0x0800ffa8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_GPIO_Init+0x8c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <MX_GPIO_Init+0x8c>)
 80005f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_GPIO_Init+0x8c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_GPIO_Init+0x8c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_GPIO_Init+0x8c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

}
 800066a:	bf00      	nop
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000682:	f000 f899 	bl	80007b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fbb6 	bl	8000df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f827 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f7ff ffad 	bl	80005ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000692:	f000 f9f3 	bl	8000a7c <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000696:	f003 fdb1 	bl	80041fc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  char msg[32];
  uint32_t last_tick = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  MX_LWIP_Process();
 80006a2:	f003 feeb 	bl	800447c <MX_LWIP_Process>
	  if ((HAL_GetTick() - last_tick) >= 1000) {
 80006a6:	f000 fbf7 	bl	8000e98 <HAL_GetTick>
 80006aa:	4602      	mov	r2, r0
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006b4:	d3f5      	bcc.n	80006a2 <main+0x26>
		  last_tick = HAL_GetTick();
 80006b6:	f000 fbef 	bl	8000e98 <HAL_GetTick>
 80006ba:	6238      	str	r0, [r7, #32]
	      sprintf(msg, "Counter: %d\n", i++);
 80006bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80006c2:	4638      	mov	r0, r7
 80006c4:	461a      	mov	r2, r3
 80006c6:	4904      	ldr	r1, [pc, #16]	@ (80006d8 <main+0x5c>)
 80006c8:	f00e fbae 	bl	800ee28 <siprintf>
	      udp_send_packet(msg);
 80006cc:	463b      	mov	r3, r7
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00e fa52 	bl	800eb78 <udp_send_packet>
	  MX_LWIP_Process();
 80006d4:	e7e5      	b.n	80006a2 <main+0x26>
 80006d6:	bf00      	nop
 80006d8:	0800ffc0 	.word	0x0800ffc0

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	@ 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00e fc2b 	bl	800ef46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <SystemClock_Config+0xd4>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <SystemClock_Config+0xd8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemClock_Config+0xd8>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000744:	2319      	movs	r3, #25
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000748:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800074c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f858 	bl	8002810 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000766:	f000 f853 	bl	8000810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076a:	f002 f801 	bl	8002770 <HAL_PWREx_EnableOverDrive>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000774:	f000 f84c 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2107      	movs	r1, #7
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fade 	bl	8002d58 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007a2:	f000 f835 	bl	8000810 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	@ 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007ca:	f000 fc7b 	bl	80010c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007da:	231f      	movs	r3, #31
 80007dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007de:	2387      	movs	r3, #135	@ 0x87
 80007e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007e6:	2300      	movs	r3, #0
 80007e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ea:	2301      	movs	r3, #1
 80007ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fc99 	bl	8001134 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000802:	2004      	movs	r0, #4
 8000804:	f000 fc76 	bl	80010f4 <HAL_MPU_Enable>

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_MspInit+0x44>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	4a0e      	ldr	r2, [pc, #56]	@ (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	@ 0x40
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <HAL_MspInit+0x44>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <HAL_MspInit+0x44>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <HAL_MspInit+0x44>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_MspInit+0x44>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ba:	f000 fad9 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <_kill>:

int _kill(int pid, int sig)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <_kill+0x20>)
 80008e0:	2216      	movs	r2, #22
 80008e2:	601a      	str	r2, [r3, #0]
  return -1;
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20007f18 	.word	0x20007f18

080008f8 <_exit>:

void _exit (int status)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffe5 	bl	80008d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <_exit+0x12>

0800090e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e00a      	b.n	8000936 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000920:	f3af 8000 	nop.w
 8000924:	4601      	mov	r1, r0
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	b2ca      	uxtb	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	dbf0      	blt.n	8000920 <_read+0x12>
  }

  return len;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e009      	b.n	800096e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	60ba      	str	r2, [r7, #8]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbf1      	blt.n	800095a <_write+0x12>
  }
  return len;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_close>:

int _close(int file)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a8:	605a      	str	r2, [r3, #4]
  return 0;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_isatty>:

int _isatty(int file)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d205      	bcs.n	8000a24 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <_sbrk+0x6c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	371c      	adds	r7, #28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20050000 	.word	0x20050000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	200001e4 	.word	0x200001e4
 8000a50:	20007f28 	.word	0x20007f28
 8000a54:	20007f18 	.word	0x20007f18

08000a58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <MX_USART1_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000ac0:	f002 ff20 	bl	8003904 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f7ff fea1 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001e8 	.word	0x200001e8
 8000ad8:	40011000 	.word	0x40011000

08000adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0aa      	sub	sp, #168	@ 0xa8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2284      	movs	r2, #132	@ 0x84
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f00e fa22 	bl	800ef46 <memset>
  if(uartHandle->Instance==USART1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d13a      	bne.n	8000b82 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b0c:	2340      	movs	r3, #64	@ 0x40
 8000b0e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b10:	2300      	movs	r3, #0
 8000b12:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fb03 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b24:	f7ff fe74 	bl	8000810 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <HAL_UART_MspInit+0xb4>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2c:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <HAL_UART_MspInit+0xb4>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_UART_MspInit+0xb4>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <HAL_UART_MspInit+0xb4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <HAL_UART_MspInit+0xb4>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_UART_MspInit+0xb4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b58:	23c0      	movs	r3, #192	@ 0xc0
 8000b5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b70:	2307      	movs	r3, #7
 8000b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b7e:	f001 fc4b 	bl	8002418 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	37a8      	adds	r7, #168	@ 0xa8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9c:	f7ff ff5c 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	@ (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f00e fa0d 	bl	800efe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fd57 	bl	800067c <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000bdc:	08012ec8 	.word	0x08012ec8
  ldr r2, =_sbss
 8000be0:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000be4:	20007f28 	.word	0x20007f28

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>

08000bea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00b      	beq.n	8000c12 <LAN8742_RegisterBusIO+0x28>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <LAN8742_RegisterBusIO+0x28>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <LAN8742_RegisterBusIO+0x28>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e014      	b.n	8000c42 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d139      	bne.n	8000cde <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e01c      	b.n	8000cbe <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	2112      	movs	r1, #18
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	4798      	blx	r3
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da03      	bge.n	8000ca0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000c98:	f06f 0304 	mvn.w	r3, #4
 8000c9c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000c9e:	e00b      	b.n	8000cb8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d105      	bne.n	8000cb8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
         break;
 8000cb6:	e005      	b.n	8000cc4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b1f      	cmp	r3, #31
 8000cc2:	d9df      	bls.n	8000c84 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b1f      	cmp	r3, #31
 8000cca:	d902      	bls.n	8000cd2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ccc:	f06f 0302 	mvn.w	r3, #2
 8000cd0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000cde:	693b      	ldr	r3, [r7, #16]
 }
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6810      	ldr	r0, [r2, #0]
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	2101      	movs	r1, #1
 8000d02:	4798      	blx	r3
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da02      	bge.n	8000d10 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d0a:	f06f 0304 	mvn.w	r3, #4
 8000d0e:	e06e      	b.n	8000dee <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	f107 020c 	add.w	r2, r7, #12
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4798      	blx	r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da02      	bge.n	8000d2c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d26:	f06f 0304 	mvn.w	r3, #4
 8000d2a:	e060      	b.n	8000dee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e059      	b.n	8000dee <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6810      	ldr	r0, [r2, #0]
 8000d42:	f107 020c 	add.w	r2, r7, #12
 8000d46:	2100      	movs	r1, #0
 8000d48:	4798      	blx	r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	da02      	bge.n	8000d56 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d50:	f06f 0304 	mvn.w	r3, #4
 8000d54:	e04b      	b.n	8000dee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d11b      	bne.n	8000d98 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <LAN8742_GetLinkState+0x90>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d74:	2302      	movs	r3, #2
 8000d76:	e03a      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e033      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d90:	2304      	movs	r3, #4
 8000d92:	e02c      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d94:	2305      	movs	r3, #5
 8000d96:	e02a      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6810      	ldr	r0, [r2, #0]
 8000da0:	f107 020c 	add.w	r2, r7, #12
 8000da4:	211f      	movs	r1, #31
 8000da6:	4798      	blx	r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da02      	bge.n	8000db4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dae:	f06f 0304 	mvn.w	r3, #4
 8000db2:	e01c      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e015      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f003 031c 	and.w	r3, r3, #28
 8000dc8:	2b18      	cmp	r3, #24
 8000dca:	d101      	bne.n	8000dd0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e00e      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 031c 	and.w	r3, r3, #28
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d101      	bne.n	8000dde <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e007      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f003 031c 	and.w	r3, r3, #28
 8000de4:	2b14      	cmp	r3, #20
 8000de6:	d101      	bne.n	8000dec <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000de8:	2304      	movs	r3, #4
 8000dea:	e000      	b.n	8000dee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dec:	2305      	movs	r3, #5
    }
  }
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f92e 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e00:	200f      	movs	r0, #15
 8000e02:	f000 f805 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e06:	f7ff fd09 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f93b 	bl	80010aa <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f911 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000270 	.word	0x20000270

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	@ (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000270 	.word	0x20000270

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x40>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x40>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00
 8000f3c:	05fa0000 	.word	0x05fa0000

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	@ (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	@ 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010c8:	f3bf 8f5f 	dmb	sy
}
 80010cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <HAL_MPU_Disable+0x28>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_MPU_Disable+0x28>)
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <HAL_MPU_Disable+0x2c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	e000ed90 	.word	0xe000ed90

080010f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010fc:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <HAL_MPU_Enable+0x38>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_MPU_Enable+0x3c>)
 8001108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <HAL_MPU_Enable+0x3c>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001110:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001112:	f3bf 8f4f 	dsb	sy
}
 8001116:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001118:	f3bf 8f6f 	isb	sy
}
 800111c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed90 	.word	0xe000ed90
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	785a      	ldrb	r2, [r3, #1]
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <HAL_MPU_ConfigRegion+0x7c>)
 8001142:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <HAL_MPU_ConfigRegion+0x7c>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_MPU_ConfigRegion+0x7c>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001150:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <HAL_MPU_ConfigRegion+0x7c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b1b      	ldrb	r3, [r3, #12]
 800115c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7adb      	ldrb	r3, [r3, #11]
 8001162:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7a9b      	ldrb	r3, [r3, #10]
 800116a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800116c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b5b      	ldrb	r3, [r3, #13]
 8001172:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001174:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7b9b      	ldrb	r3, [r3, #14]
 800117a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800117c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7bdb      	ldrb	r3, [r3, #15]
 8001182:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a5b      	ldrb	r3, [r3, #9]
 800118a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800118c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a1b      	ldrb	r3, [r3, #8]
 8001192:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001194:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800119e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a0:	6113      	str	r3, [r2, #16]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed90 	.word	0xe000ed90

080011b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e086      	b.n	80012d4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f003 fb3f 	bl	800485c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b3f      	ldr	r3, [pc, #252]	@ (80012dc <HAL_ETH_Init+0x128>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a3e      	ldr	r2, [pc, #248]	@ (80012dc <HAL_ETH_Init+0x128>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b3c      	ldr	r3, [pc, #240]	@ (80012dc <HAL_ETH_Init+0x128>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011f6:	4b3a      	ldr	r3, [pc, #232]	@ (80012e0 <HAL_ETH_Init+0x12c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4a39      	ldr	r2, [pc, #228]	@ (80012e0 <HAL_ETH_Init+0x12c>)
 80011fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001200:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001202:	4b37      	ldr	r3, [pc, #220]	@ (80012e0 <HAL_ETH_Init+0x12c>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4935      	ldr	r1, [pc, #212]	@ (80012e0 <HAL_ETH_Init+0x12c>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001210:	4b33      	ldr	r3, [pc, #204]	@ (80012e0 <HAL_ETH_Init+0x12c>)
 8001212:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800122a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122c:	f7ff fe34 	bl	8000e98 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001232:	e011      	b.n	8001258 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001234:	f7ff fe30 	bl	8000e98 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001242:	d909      	bls.n	8001258 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2204      	movs	r2, #4
 8001248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	22e0      	movs	r2, #224	@ 0xe0
 8001250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e03d      	b.n	80012d4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e4      	bne.n	8001234 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fe18 	bl	8001ea0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fec3 	bl	8001ffc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 ff19 	bl	80020ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	461a      	mov	r2, r3
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fe81 	bl	8001f8c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001298:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_ETH_Init+0x130>)
 80012a8:	430b      	orrs	r3, r1
 80012aa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2210      	movs	r2, #16
 80012ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	00020060 	.word	0x00020060

080012e8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d150      	bne.n	800139c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2204      	movs	r2, #4
 8001306:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f9f9 	bl	8001700 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0208 	orr.w	r2, r2, #8
 800131c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff fdc2 	bl	8000eb0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0204 	orr.w	r2, r2, #4
 8001342:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff fdaf 	bl	8000eb0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fc3c 	bl	8001bd8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001372:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001376:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800138e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2240      	movs	r2, #64	@ 0x40
 8001394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e000      	b.n	800139e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
  }
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013b4:	2b40      	cmp	r3, #64	@ 0x40
 80013b6:	d14a      	bne.n	800144e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2220      	movs	r2, #32
 80013bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80013d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	f023 0302 	bic.w	r3, r3, #2
 80013ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ee:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fd51 	bl	8000eb0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fbde 	bl	8001bd8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0208 	bic.w	r2, r2, #8
 800142a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fd3b 	bl	8000eb0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2210      	movs	r2, #16
 8001446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
  }
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07c      	b.n	8001578 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001484:	2b40      	cmp	r3, #64	@ 0x40
 8001486:	d176      	bne.n	8001576 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001488:	2200      	movs	r2, #0
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 fe7d 	bl	800218c <ETH_Prepare_Tx_Descriptors>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149e:	f043 0202 	orr.w	r2, r3, #2
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e065      	b.n	8001578 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80014ac:	f3bf 8f4f 	dsb	sy
}
 80014b0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3206      	adds	r2, #6
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d904      	bls.n	80014dc <HAL_ETH_Transmit+0x84>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	1f1a      	subs	r2, r3, #4
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3106      	adds	r1, #6
 80014e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014f0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014f2:	f7ff fcd1 	bl	8000e98 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014f8:	e037      	b.n	800156a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d011      	beq.n	8001530 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	f043 0208 	orr.w	r2, r3, #8
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e023      	b.n	8001578 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001536:	d018      	beq.n	800156a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001538:	f7ff fcae 	bl	8000e98 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d302      	bcc.n	800154e <HAL_ETH_Transmit+0xf6>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001554:	f043 0204 	orr.w	r2, r3, #4
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001564:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e006      	b.n	8001578 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	dbc3      	blt.n	80014fa <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0a4      	b.n	80016f6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015b2:	2b40      	cmp	r3, #64	@ 0x40
 80015b4:	d001      	beq.n	80015ba <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e09d      	b.n	80016f6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015be:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	3212      	adds	r2, #18
 80015c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015d0:	f1c3 0304 	rsb	r3, r3, #4
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015d6:	e066      	b.n	80016a6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	69da      	ldr	r2, [r3, #28]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <HAL_ETH_ReadData+0x88>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03c      	beq.n	8001682 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800162a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001640:	2301      	movs	r3, #1
 8001642:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800165c:	461a      	mov	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	b29b      	uxth	r3, r3
 8001662:	f003 fa9d 	bl	8004ba0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	441a      	add	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d902      	bls.n	8001694 <HAL_ETH_ReadData+0x114>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b04      	subs	r3, #4
 8001692:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	3212      	adds	r2, #18
 800169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db06      	blt.n	80016bc <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d202      	bcs.n	80016bc <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80016b6:	7cfb      	ldrb	r3, [r7, #19]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d08d      	beq.n	80015d8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	441a      	add	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f815 	bl	8001700 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80016dc:	7cfb      	ldrb	r3, [r7, #19]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d108      	bne.n	80016f4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e000      	b.n	80016f6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800170c:	2301      	movs	r3, #1
 800170e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001714:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	3212      	adds	r2, #18
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001726:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001728:	e042      	b.n	80017b0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d112      	bne.n	8001758 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fa02 	bl	8004b40 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	74fb      	strb	r3, [r7, #19]
 8001746:	e007      	b.n	8001758 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	461a      	mov	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	461a      	mov	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d028      	beq.n	80017b0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <ETH_UpdateDescriptor+0x104>)
 800176c:	4313      	orrs	r3, r2
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	6053      	str	r3, [r2, #4]
 8001772:	e005      	b.n	8001780 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3301      	adds	r3, #1
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d902      	bls.n	800179e <ETH_UpdateDescriptor+0x9e>
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3b04      	subs	r3, #4
 800179c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	3212      	adds	r2, #18
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	617b      	str	r3, [r7, #20]
      desccount--;
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <ETH_UpdateDescriptor+0xbc>
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1b6      	bne.n	800172a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d01a      	beq.n	80017fc <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3303      	adds	r3, #3
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80017d0:	f3bf 8f5f 	dmb	sy
}
 80017d4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	18ca      	adds	r2, r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ee:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	80004000 	.word	0x80004000

08001808 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 031c 	and.w	r3, r3, #28
 8001824:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	02db      	lsls	r3, r3, #11
 800182a:	b29b      	uxth	r3, r3
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4313      	orrs	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f023 0302 	bic.w	r3, r3, #2
 8001846:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001858:	f7ff fb1e 	bl	8000e98 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800185e:	e00d      	b.n	800187c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001860:	f7ff fb1a 	bl	8000e98 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800186e:	d301      	bcc.n	8001874 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e010      	b.n	8001896 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ec      	bne.n	8001860 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	b29b      	uxth	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 031c 	and.w	r3, r3, #28
 80018ba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	02db      	lsls	r3, r3, #11
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	019b      	lsls	r3, r3, #6
 80018cc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f8:	f7ff face 	bl	8000e98 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018fe:	e00d      	b.n	800191c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001900:	f7ff faca 	bl	8000e98 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800190e:	d301      	bcc.n	8001914 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e009      	b.n	8001928 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ec      	bne.n	8001900 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0e6      	b.n	8001b12 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf14      	ite	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	2300      	moveq	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf14      	ite	ne
 8001ae6:	2301      	movne	r3, #1
 8001ae8:	2300      	moveq	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00b      	b.n	8001b4a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d105      	bne.n	8001b48 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f870 	bl	8001c24 <ETH_SetMACConfig>

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f023 031c 	bic.w	r3, r3, #28
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b6c:	f001 faa6 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8001b70:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d804      	bhi.n	8001b84 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e019      	b.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <HAL_ETH_SetMDIOClockRange+0x78>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d204      	bcs.n	8001b96 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f043 030c 	orr.w	r3, r3, #12
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e010      	b.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d90c      	bls.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d804      	bhi.n	8001bb0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e003      	b.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	02160ebf 	.word	0x02160ebf
 8001bcc:	03938700 	.word	0x03938700
 8001bd0:	05f5e0ff 	.word	0x05f5e0ff
 8001bd4:	08f0d17f 	.word	0x08f0d17f

08001bd8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bfa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff f951 	bl	8000eb0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c18:	6193      	str	r3, [r2, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4b53      	ldr	r3, [pc, #332]	@ (8001d88 <ETH_SetMACConfig+0x164>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	7b9b      	ldrb	r3, [r3, #14]
 8001c42:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	7c12      	ldrb	r2, [r2, #16]
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	d102      	bne.n	8001c52 <ETH_SetMACConfig+0x2e>
 8001c4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c50:	e000      	b.n	8001c54 <ETH_SetMACConfig+0x30>
 8001c52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	7c52      	ldrb	r2, [r2, #17]
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	d102      	bne.n	8001c64 <ETH_SetMACConfig+0x40>
 8001c5e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c62:	e000      	b.n	8001c66 <ETH_SetMACConfig+0x42>
 8001c64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7fdb      	ldrb	r3, [r3, #31]
 8001c72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	7f92      	ldrb	r2, [r2, #30]
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d102      	bne.n	8001c8a <ETH_SetMACConfig+0x66>
 8001c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c88:	e000      	b.n	8001c8c <ETH_SetMACConfig+0x68>
 8001c8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	7f1b      	ldrb	r3, [r3, #28]
 8001c92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	791b      	ldrb	r3, [r3, #4]
 8001ca0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ca2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d102      	bne.n	8001cb4 <ETH_SetMACConfig+0x90>
 8001cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb2:	e000      	b.n	8001cb6 <ETH_SetMACConfig+0x92>
 8001cb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	7bdb      	ldrb	r3, [r3, #15]
 8001cbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ccc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff f8e2 	bl	8000eb0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d101      	bne.n	8001d1a <ETH_SetMACConfig+0xf6>
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	e000      	b.n	8001d1c <ETH_SetMACConfig+0xf8>
 8001d1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d2a:	2a01      	cmp	r2, #1
 8001d2c:	d101      	bne.n	8001d32 <ETH_SetMACConfig+0x10e>
 8001d2e:	2208      	movs	r2, #8
 8001d30:	e000      	b.n	8001d34 <ETH_SetMACConfig+0x110>
 8001d32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d3c:	2a01      	cmp	r2, #1
 8001d3e:	d101      	bne.n	8001d44 <ETH_SetMACConfig+0x120>
 8001d40:	2204      	movs	r2, #4
 8001d42:	e000      	b.n	8001d46 <ETH_SetMACConfig+0x122>
 8001d44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001d4e:	2a01      	cmp	r2, #1
 8001d50:	d101      	bne.n	8001d56 <ETH_SetMACConfig+0x132>
 8001d52:	2202      	movs	r2, #2
 8001d54:	e000      	b.n	8001d58 <ETH_SetMACConfig+0x134>
 8001d56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff f89d 	bl	8000eb0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	fd20810f 	.word	0xfd20810f

08001d8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <ETH_SetDMAConfig+0x110>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7b1b      	ldrb	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <ETH_SetDMAConfig+0x2c>
 8001db2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001db6:	e000      	b.n	8001dba <ETH_SetDMAConfig+0x2e>
 8001db8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	7b5b      	ldrb	r3, [r3, #13]
 8001dbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	7f52      	ldrb	r2, [r2, #29]
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d102      	bne.n	8001dd0 <ETH_SetDMAConfig+0x44>
 8001dca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dce:	e000      	b.n	8001dd2 <ETH_SetDMAConfig+0x46>
 8001dd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7b9b      	ldrb	r3, [r3, #14]
 8001dd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001de0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7f1b      	ldrb	r3, [r3, #28]
 8001de6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001de8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	7f9b      	ldrb	r3, [r3, #30]
 8001dee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001df0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001df6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	461a      	mov	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff f844 	bl	8000eb0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	791b      	ldrb	r3, [r3, #4]
 8001e3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f7ff f815 	bl	8000eb0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	f8de3f23 	.word	0xf8de3f23

08001ea0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0a6      	sub	sp, #152	@ 0x98
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fe7f 	bl	8001c24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f60:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f66:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff05 	bl	8001d8c <ETH_SetDMAConfig>
}
 8001f82:	bf00      	nop
 8001f84:	3798      	adds	r7, #152	@ 0x98
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3305      	adds	r3, #5
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	3204      	adds	r2, #4
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <ETH_MACAddressConfig+0x68>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3303      	adds	r3, #3
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	061a      	lsls	r2, r3, #24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <ETH_MACAddressConfig+0x6c>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	6013      	str	r3, [r2, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40028040 	.word	0x40028040
 8001ff8:	40028044 	.word	0x40028044

08001ffc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e03e      	b.n	8002088 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68d9      	ldr	r1, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	3206      	adds	r2, #6
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d80c      	bhi.n	800206c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68d9      	ldr	r1, [r3, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	e004      	b.n	8002076 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d9bd      	bls.n	800200a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a0:	611a      	str	r2, [r3, #16]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e048      	b.n	800214e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80020f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	3212      	adds	r2, #18
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d80c      	bhi.n	800213e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e004      	b.n	8002148 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3301      	adds	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d9b3      	bls.n	80020bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217e:	60da      	str	r2, [r3, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800218c:	b480      	push	{r7}
 800218e:	b091      	sub	sp, #68	@ 0x44
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3318      	adds	r3, #24
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80021c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021ce:	d007      	beq.n	80021e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d4:	3304      	adds	r3, #4
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e111      	b.n	8002408 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80021e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e6:	3301      	adds	r3, #1
 80021e8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4b86      	ldr	r3, [pc, #536]	@ (8002414 <ETH_Prepare_Tx_Descriptors+0x288>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021fe:	6852      	ldr	r2, [r2, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002204:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	431a      	orrs	r2, r3
 8002220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002222:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	431a      	orrs	r2, r3
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800224e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002264:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002266:	e082      	b.n	800236e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e005      	b.n	8002294 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002292:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002296:	3301      	adds	r3, #1
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800229a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229c:	2b03      	cmp	r3, #3
 800229e:	d902      	bls.n	80022a6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80022a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a2:	3b04      	subs	r3, #4
 80022a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022bc:	d007      	beq.n	80022ce <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c2:	3304      	adds	r3, #4
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d029      	beq.n	8002322 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022dc:	2300      	movs	r3, #0
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022e0:	e019      	b.n	8002316 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80022e2:	f3bf 8f5f 	dmb	sy
}
 80022e6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f6:	3301      	adds	r3, #1
 80022f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d902      	bls.n	8002306 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002302:	3b04      	subs	r3, #4
 8002304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002312:	3301      	adds	r3, #1
 8002314:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231a:	429a      	cmp	r2, r3
 800231c:	d3e1      	bcc.n	80022e2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	e072      	b.n	8002408 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800232e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002330:	3301      	adds	r3, #1
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800233a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <ETH_Prepare_Tx_Descriptors+0x288>)
 800234a:	4013      	ands	r3, r2
 800234c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800234e:	6852      	ldr	r2, [r2, #4]
 8002350:	431a      	orrs	r2, r3
 8002352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002354:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002358:	3301      	adds	r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800235c:	f3bf 8f5f 	dmb	sy
}
 8002360:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f47f af78 	bne.w	8002268 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800237e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e005      	b.n	8002398 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800238c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	6a3a      	ldr	r2, [r7, #32]
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80023ae:	f3bf 8f5f 	dmb	sy
}
 80023b2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c8:	3304      	adds	r3, #4
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023d4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d6:	f3ef 8310 	mrs	r3, PRIMASK
 80023da:	613b      	str	r3, [r7, #16]
  return(result);
 80023dc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	2301      	movs	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f383 8810 	msr	PRIMASK, r3
}
 80023ea:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f2:	4413      	add	r3, r2
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f383 8810 	msr	PRIMASK, r3
}
 8002404:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3744      	adds	r7, #68	@ 0x44
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	ffffe000 	.word	0xffffe000

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e175      	b.n	8002724 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8164 	bne.w	800271e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x56>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80be 	beq.w	800271e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	4b66      	ldr	r3, [pc, #408]	@ (800273c <HAL_GPIO_Init+0x324>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	4a65      	ldr	r2, [pc, #404]	@ (800273c <HAL_GPIO_Init+0x324>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ae:	4b63      	ldr	r3, [pc, #396]	@ (800273c <HAL_GPIO_Init+0x324>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ba:	4a61      	ldr	r2, [pc, #388]	@ (8002740 <HAL_GPIO_Init+0x328>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <HAL_GPIO_Init+0x32c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d037      	beq.n	8002656 <HAL_GPIO_Init+0x23e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a57      	ldr	r2, [pc, #348]	@ (8002748 <HAL_GPIO_Init+0x330>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_GPIO_Init+0x23a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a56      	ldr	r2, [pc, #344]	@ (800274c <HAL_GPIO_Init+0x334>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02b      	beq.n	800264e <HAL_GPIO_Init+0x236>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a55      	ldr	r2, [pc, #340]	@ (8002750 <HAL_GPIO_Init+0x338>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x232>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a54      	ldr	r2, [pc, #336]	@ (8002754 <HAL_GPIO_Init+0x33c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x22e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a53      	ldr	r2, [pc, #332]	@ (8002758 <HAL_GPIO_Init+0x340>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x22a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a52      	ldr	r2, [pc, #328]	@ (800275c <HAL_GPIO_Init+0x344>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x226>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a51      	ldr	r2, [pc, #324]	@ (8002760 <HAL_GPIO_Init+0x348>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x222>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a50      	ldr	r2, [pc, #320]	@ (8002764 <HAL_GPIO_Init+0x34c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x21e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4f      	ldr	r2, [pc, #316]	@ (8002768 <HAL_GPIO_Init+0x350>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x21a>
 800262e:	2309      	movs	r3, #9
 8002630:	e012      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002632:	230a      	movs	r3, #10
 8002634:	e010      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002636:	2308      	movs	r3, #8
 8002638:	e00e      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800263a:	2307      	movs	r3, #7
 800263c:	e00c      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800263e:	2306      	movs	r3, #6
 8002640:	e00a      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002642:	2305      	movs	r3, #5
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002656:	2300      	movs	r3, #0
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002668:	4935      	ldr	r1, [pc, #212]	@ (8002740 <HAL_GPIO_Init+0x328>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002676:	4b3d      	ldr	r3, [pc, #244]	@ (800276c <HAL_GPIO_Init+0x354>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269a:	4a34      	ldr	r2, [pc, #208]	@ (800276c <HAL_GPIO_Init+0x354>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a0:	4b32      	ldr	r3, [pc, #200]	@ (800276c <HAL_GPIO_Init+0x354>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c4:	4a29      	ldr	r2, [pc, #164]	@ (800276c <HAL_GPIO_Init+0x354>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ca:	4b28      	ldr	r3, [pc, #160]	@ (800276c <HAL_GPIO_Init+0x354>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ee:	4a1f      	ldr	r2, [pc, #124]	@ (800276c <HAL_GPIO_Init+0x354>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_GPIO_Init+0x354>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002718:	4a14      	ldr	r2, [pc, #80]	@ (800276c <HAL_GPIO_Init+0x354>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	f67f ae86 	bls.w	8002438 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3724      	adds	r7, #36	@ 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40013800 	.word	0x40013800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40020800 	.word	0x40020800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021000 	.word	0x40021000
 8002758:	40021400 	.word	0x40021400
 800275c:	40021800 	.word	0x40021800
 8002760:	40021c00 	.word	0x40021c00
 8002764:	40022000 	.word	0x40022000
 8002768:	40022400 	.word	0x40022400
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <HAL_PWREx_EnableOverDrive+0x98>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <HAL_PWREx_EnableOverDrive+0x98>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	@ 0x40
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <HAL_PWREx_EnableOverDrive+0x98>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002792:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800279e:	f7fe fb7b 	bl	8000e98 <HAL_GetTick>
 80027a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027a4:	e009      	b.n	80027ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027a6:	f7fe fb77 	bl	8000e98 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b4:	d901      	bls.n	80027ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e022      	b.n	8002800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ba:	4b14      	ldr	r3, [pc, #80]	@ (800280c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c6:	d1ee      	bne.n	80027a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027c8:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d4:	f7fe fb60 	bl	8000e98 <HAL_GetTick>
 80027d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027da:	e009      	b.n	80027f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027dc:	f7fe fb5c 	bl	8000e98 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027ea:	d901      	bls.n	80027f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e007      	b.n	8002800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027fc:	d1ee      	bne.n	80027dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000

08002810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e291      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8087 	beq.w	8002942 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002834:	4b96      	ldr	r3, [pc, #600]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b04      	cmp	r3, #4
 800283e:	d00c      	beq.n	800285a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002840:	4b93      	ldr	r3, [pc, #588]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d112      	bne.n	8002872 <HAL_RCC_OscConfig+0x62>
 800284c:	4b90      	ldr	r3, [pc, #576]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002858:	d10b      	bne.n	8002872 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285a:	4b8d      	ldr	r3, [pc, #564]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d06c      	beq.n	8002940 <HAL_RCC_OscConfig+0x130>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d168      	bne.n	8002940 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e26b      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x7a>
 800287c:	4b84      	ldr	r3, [pc, #528]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a83      	ldr	r2, [pc, #524]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0xd8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x9c>
 8002892:	4b7f      	ldr	r3, [pc, #508]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7e      	ldr	r2, [pc, #504]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0xd8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0xc0>
 80028b6:	4b76      	ldr	r3, [pc, #472]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a75      	ldr	r2, [pc, #468]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b73      	ldr	r3, [pc, #460]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a72      	ldr	r2, [pc, #456]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0xd8>
 80028d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fad2 	bl	8000e98 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe face 	bl	8000e98 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	@ 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e21f      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b61      	ldr	r3, [pc, #388]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xe8>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fabe 	bl	8000e98 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe faba 	bl	8000e98 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e20b      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	4b57      	ldr	r3, [pc, #348]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x110>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d069      	beq.n	8002a22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294e:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x190>
 8002966:	4b4a      	ldr	r3, [pc, #296]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x17a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e1df      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b41      	ldr	r3, [pc, #260]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	493d      	ldr	r1, [pc, #244]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	e040      	b.n	8002a22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d023      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a8:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a38      	ldr	r2, [pc, #224]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fa70 	bl	8000e98 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029bc:	f7fe fa6c 	bl	8000e98 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1bd      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b2d      	ldr	r3, [pc, #180]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4929      	ldr	r1, [pc, #164]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
 80029ee:	e018      	b.n	8002a22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f0:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a26      	ldr	r2, [pc, #152]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fa4c 	bl	8000e98 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe fa48 	bl	8000e98 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e199      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d038      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d019      	beq.n	8002a6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b16      	ldr	r3, [pc, #88]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3a:	4a15      	ldr	r2, [pc, #84]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7fe fa29 	bl	8000e98 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4a:	f7fe fa25 	bl	8000e98 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e176      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x23a>
 8002a68:	e01a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6e:	4a08      	ldr	r2, [pc, #32]	@ (8002a90 <HAL_RCC_OscConfig+0x280>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7fe fa0f 	bl	8000e98 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fa0b 	bl	8000e98 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d903      	bls.n	8002a94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e15c      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
 8002a90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b91      	ldr	r3, [pc, #580]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a4 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b8b      	ldr	r3, [pc, #556]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b88      	ldr	r3, [pc, #544]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a87      	ldr	r2, [pc, #540]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	@ (8002ce0 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce0 <HAL_RCC_OscConfig+0x4d0>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe f9d3 	bl	8000e98 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe f9cf 	bl	8000e98 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	@ 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e120      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b08:	4b75      	ldr	r3, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x4d0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x31a>
 8002b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_OscConfig+0x376>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x33c>
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	4a69      	ldr	r2, [pc, #420]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3e:	4b67      	ldr	r3, [pc, #412]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	4a66      	ldr	r2, [pc, #408]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCC_OscConfig+0x376>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x35e>
 8002b54:	4b61      	ldr	r3, [pc, #388]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4a60      	ldr	r2, [pc, #384]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b60:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x376>
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	4a5a      	ldr	r2, [pc, #360]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7a:	4b58      	ldr	r3, [pc, #352]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	4a57      	ldr	r2, [pc, #348]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fe f983 	bl	8000e98 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe f97f 	bl	8000e98 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0ce      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCC_OscConfig+0x386>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe f96d 	bl	8000e98 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe f969 	bl	8000e98 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e0b8      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	4b40      	ldr	r3, [pc, #256]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b3c      	ldr	r3, [pc, #240]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80a4 	beq.w	8002d48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d06b      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d149      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a30      	ldr	r2, [pc, #192]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe f93a 	bl	8000e98 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe f936 	bl	8000e98 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e087      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a18      	ldr	r2, [pc, #96]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe f90a 	bl	8000e98 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe f906 	bl	8000e98 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e057      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x478>
 8002ca6:	e04f      	b.n	8002d48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0b      	ldr	r2, [pc, #44]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f8f0 	bl	8000e98 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe f8ec 	bl	8000e98 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e03d      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4ac>
 8002cda:	e035      	b.n	8002d48 <HAL_RCC_OscConfig+0x538>
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x544>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0d0      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b67      	ldr	r3, [pc, #412]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4965      	ldr	r1, [pc, #404]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d040      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d115      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1a:	4b41      	ldr	r3, [pc, #260]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e073      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06b      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3a:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 0203 	bic.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4936      	ldr	r1, [pc, #216]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4c:	f7fe f824 	bl	8000e98 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f7fe f820 	bl	8000e98 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e053      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 020c 	and.w	r2, r3, #12
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d1eb      	bne.n	8002e54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b27      	ldr	r3, [pc, #156]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d210      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	4922      	ldr	r1, [pc, #136]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x1cc>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_RCC_ClockConfig+0x1d0>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd ff80 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08012cd0 	.word	0x08012cd0
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b090      	sub	sp, #64	@ 0x40
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f40:	2300      	movs	r3, #0
 8002f42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b59      	ldr	r3, [pc, #356]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80a1 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x16c>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e09b      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f68:	e09b      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f6e:	e098      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b4f      	ldr	r3, [pc, #316]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d028      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4b47      	ldr	r3, [pc, #284]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f9c:	fb03 f201 	mul.w	r2, r3, r1
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a43      	ldr	r2, [pc, #268]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002faa:	fba0 1202 	umull	r1, r2, r0, r2
 8002fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb6:	4413      	add	r3, r2
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002fca:	f7fd f979 	bl	80002c0 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd6:	e053      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd8:	4b35      	ldr	r3, [pc, #212]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	2200      	movs	r2, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	617a      	str	r2, [r7, #20]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fea:	f04f 0b00 	mov.w	fp, #0
 8002fee:	4652      	mov	r2, sl
 8002ff0:	465b      	mov	r3, fp
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003000:	0150      	lsls	r0, r2, #5
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	ebb2 080a 	subs.w	r8, r2, sl
 800300a:	eb63 090b 	sbc.w	r9, r3, fp
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800301a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800301e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003022:	ebb2 0408 	subs.w	r4, r2, r8
 8003026:	eb63 0509 	sbc.w	r5, r3, r9
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	00eb      	lsls	r3, r5, #3
 8003034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003038:	00e2      	lsls	r2, r4, #3
 800303a:	4614      	mov	r4, r2
 800303c:	461d      	mov	r5, r3
 800303e:	eb14 030a 	adds.w	r3, r4, sl
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	eb45 030b 	adc.w	r3, r5, fp
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003060:	4621      	mov	r1, r4
 8003062:	028a      	lsls	r2, r1, #10
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306a:	2200      	movs	r2, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	60fa      	str	r2, [r7, #12]
 8003070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003074:	f7fd f924 	bl	80002c0 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800309e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3740      	adds	r7, #64	@ 0x40
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	017d7840 	.word	0x017d7840

080030bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	08012ce0 	.word	0x08012ce0

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	08012ce0 	.word	0x08012ce0

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d012      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800314c:	4b69      	ldr	r3, [pc, #420]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a68      	ldr	r2, [pc, #416]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003156:	6093      	str	r3, [r2, #8]
 8003158:	4b66      	ldr	r3, [pc, #408]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003160:	4964      	ldr	r1, [pc, #400]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d017      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800317e:	4b5d      	ldr	r3, [pc, #372]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003184:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318c:	4959      	ldr	r1, [pc, #356]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d017      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ba:	4b4e      	ldr	r3, [pc, #312]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	494a      	ldr	r1, [pc, #296]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031d8:	d101      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 808b 	beq.w	800331e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b3a      	ldr	r3, [pc, #232]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	4a39      	ldr	r2, [pc, #228]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	@ 0x40
 8003214:	4b37      	ldr	r3, [pc, #220]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003220:	4b35      	ldr	r3, [pc, #212]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a34      	ldr	r2, [pc, #208]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fd fe34 	bl	8000e98 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003234:	f7fd fe30 	bl	8000e98 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e357      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003246:	4b2c      	ldr	r3, [pc, #176]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003252:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d035      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d02e      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003270:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003278:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800327a:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327e:	4a1d      	ldr	r2, [pc, #116]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003284:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	4a1a      	ldr	r2, [pc, #104]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003290:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003292:	4a18      	ldr	r2, [pc, #96]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003298:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d114      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fd fdf8 	bl	8000e98 <HAL_GetTick>
 80032a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fd fdf4 	bl	8000e98 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e319      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ee      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032da:	d111      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ea:	400b      	ands	r3, r1
 80032ec:	4901      	ldr	r1, [pc, #4]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
 80032f2:	e00b      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40007000 	.word	0x40007000
 80032fc:	0ffffcff 	.word	0x0ffffcff
 8003300:	4baa      	ldr	r3, [pc, #680]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4aa9      	ldr	r2, [pc, #676]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003306:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800330a:	6093      	str	r3, [r2, #8]
 800330c:	4ba7      	ldr	r3, [pc, #668]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	49a4      	ldr	r1, [pc, #656]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331a:	4313      	orrs	r3, r2
 800331c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d010      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800332a:	4ba0      	ldr	r3, [pc, #640]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003330:	4a9e      	ldr	r2, [pc, #632]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003336:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800333a:	4b9c      	ldr	r3, [pc, #624]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003344:	4999      	ldr	r1, [pc, #612]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003358:	4b94      	ldr	r3, [pc, #592]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003366:	4991      	ldr	r1, [pc, #580]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800337a:	4b8c      	ldr	r3, [pc, #560]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003380:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003388:	4988      	ldr	r1, [pc, #544]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339c:	4b83      	ldr	r3, [pc, #524]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033aa:	4980      	ldr	r1, [pc, #512]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033be:	4b7b      	ldr	r3, [pc, #492]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033cc:	4977      	ldr	r1, [pc, #476]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e0:	4b72      	ldr	r3, [pc, #456]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	f023 0203 	bic.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	496f      	ldr	r1, [pc, #444]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003402:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	f023 020c 	bic.w	r2, r3, #12
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003410:	4966      	ldr	r1, [pc, #408]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003424:	4b61      	ldr	r3, [pc, #388]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	495e      	ldr	r1, [pc, #376]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003446:	4b59      	ldr	r3, [pc, #356]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003454:	4955      	ldr	r1, [pc, #340]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003468:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	494d      	ldr	r1, [pc, #308]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800348a:	4b48      	ldr	r3, [pc, #288]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003490:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	4944      	ldr	r1, [pc, #272]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034ac:	4b3f      	ldr	r3, [pc, #252]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	493c      	ldr	r1, [pc, #240]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ce:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	4933      	ldr	r1, [pc, #204]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034f0:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034fe:	492b      	ldr	r1, [pc, #172]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d011      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003512:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003518:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003520:	4922      	ldr	r1, [pc, #136]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800352c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003530:	d101      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003532:	2301      	movs	r3, #1
 8003534:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003552:	4b16      	ldr	r3, [pc, #88]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003558:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003560:	4912      	ldr	r1, [pc, #72]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003574:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003584:	4909      	ldr	r1, [pc, #36]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d006      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80d9 	beq.w	8003752 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a01      	ldr	r2, [pc, #4]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035aa:	e001      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b2:	f7fd fc71 	bl	8000e98 <HAL_GetTick>
 80035b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ba:	f7fd fc6d 	bl	8000e98 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	@ 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e194      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d021      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11d      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035ec:	4b64      	ldr	r3, [pc, #400]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035fa:	4b61      	ldr	r3, [pc, #388]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003600:	0e1b      	lsrs	r3, r3, #24
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	019a      	lsls	r2, r3, #6
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	431a      	orrs	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	071b      	lsls	r3, r3, #28
 8003620:	4957      	ldr	r1, [pc, #348]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003646:	2b00      	cmp	r3, #0
 8003648:	d02e      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003652:	d129      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003654:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003668:	0f1b      	lsrs	r3, r3, #28
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	019a      	lsls	r2, r3, #6
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	431a      	orrs	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	071b      	lsls	r3, r3, #28
 8003688:	493d      	ldr	r1, [pc, #244]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003690:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003696:	f023 021f 	bic.w	r2, r3, #31
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	3b01      	subs	r3, #1
 80036a0:	4937      	ldr	r1, [pc, #220]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036b4:	4b32      	ldr	r3, [pc, #200]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ba:	0e1b      	lsrs	r3, r3, #24
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c8:	0f1b      	lsrs	r3, r3, #28
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	019a      	lsls	r2, r3, #6
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	071b      	lsls	r3, r3, #28
 80036e8:	4925      	ldr	r1, [pc, #148]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d011      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	019a      	lsls	r2, r3, #6
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	071b      	lsls	r3, r3, #28
 8003718:	4919      	ldr	r1, [pc, #100]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003720:	4b17      	ldr	r3, [pc, #92]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a16      	ldr	r2, [pc, #88]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003726:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800372a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fd fbb4 	bl	8000e98 <HAL_GetTick>
 8003730:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003734:	f7fd fbb0 	bl	8000e98 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	@ 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0d7      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003746:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 80cd 	bne.w	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a08      	ldr	r2, [pc, #32]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003766:	f7fd fb97 	bl	8000e98 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800376e:	f7fd fb93 	bl	8000e98 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b64      	cmp	r3, #100	@ 0x64
 800377a:	d903      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0ba      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003780:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003784:	4b5e      	ldr	r3, [pc, #376]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800378c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003790:	d0ed      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02e      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d12a      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ba:	4b51      	ldr	r3, [pc, #324]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	0f1b      	lsrs	r3, r3, #28
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	019a      	lsls	r2, r3, #6
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	071b      	lsls	r3, r3, #28
 80037ee:	4944      	ldr	r1, [pc, #272]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037f6:	4b42      	ldr	r3, [pc, #264]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	493d      	ldr	r1, [pc, #244]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003824:	d11d      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003826:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382c:	0e1b      	lsrs	r3, r3, #24
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003834:	4b32      	ldr	r3, [pc, #200]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	0f1b      	lsrs	r3, r3, #28
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	019a      	lsls	r2, r3, #6
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	071b      	lsls	r3, r3, #28
 800385a:	4929      	ldr	r1, [pc, #164]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d028      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	0e1b      	lsrs	r3, r3, #24
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800387c:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003882:	0c1b      	lsrs	r3, r3, #16
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	019a      	lsls	r2, r3, #6
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	431a      	orrs	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	071b      	lsls	r3, r3, #28
 80038a2:	4917      	ldr	r1, [pc, #92]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038aa:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	4911      	ldr	r1, [pc, #68]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fd fae4 	bl	8000e98 <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038d4:	f7fd fae0 	bl	8000e98 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e007      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038e6:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038f2:	d1ef      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e040      	b.n	8003998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd f8d8 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	@ 0x24
 8003930:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa8c 	bl	8003e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f825 	bl	80039a0 <UART_SetConfig>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e01b      	b.n	8003998 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800396e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800397e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fb0b 	bl	8003fac <UART_CheckIdleState>
 8003996:	4603      	mov	r3, r0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4ba6      	ldr	r3, [pc, #664]	@ (8003c64 <UART_SetConfig+0x2c4>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a94      	ldr	r2, [pc, #592]	@ (8003c68 <UART_SetConfig+0x2c8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d120      	bne.n	8003a5e <UART_SetConfig+0xbe>
 8003a1c:	4b93      	ldr	r3, [pc, #588]	@ (8003c6c <UART_SetConfig+0x2cc>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d816      	bhi.n	8003a58 <UART_SetConfig+0xb8>
 8003a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a30 <UART_SetConfig+0x90>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a4d 	.word	0x08003a4d
 8003a38:	08003a47 	.word	0x08003a47
 8003a3c:	08003a53 	.word	0x08003a53
 8003a40:	2301      	movs	r3, #1
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e150      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003a46:	2302      	movs	r3, #2
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e14d      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e14a      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003a52:	2308      	movs	r3, #8
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e147      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e144      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a83      	ldr	r2, [pc, #524]	@ (8003c70 <UART_SetConfig+0x2d0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d132      	bne.n	8003ace <UART_SetConfig+0x12e>
 8003a68:	4b80      	ldr	r3, [pc, #512]	@ (8003c6c <UART_SetConfig+0x2cc>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d828      	bhi.n	8003ac8 <UART_SetConfig+0x128>
 8003a76:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <UART_SetConfig+0xdc>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003ac9 	.word	0x08003ac9
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003abd 	.word	0x08003abd
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ab7 	.word	0x08003ab7
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ac9 	.word	0x08003ac9
 8003aac:	08003ac3 	.word	0x08003ac3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e118      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e115      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e112      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e10f      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e10c      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a68      	ldr	r2, [pc, #416]	@ (8003c74 <UART_SetConfig+0x2d4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d120      	bne.n	8003b1a <UART_SetConfig+0x17a>
 8003ad8:	4b64      	ldr	r3, [pc, #400]	@ (8003c6c <UART_SetConfig+0x2cc>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ae2:	2b30      	cmp	r3, #48	@ 0x30
 8003ae4:	d013      	beq.n	8003b0e <UART_SetConfig+0x16e>
 8003ae6:	2b30      	cmp	r3, #48	@ 0x30
 8003ae8:	d814      	bhi.n	8003b14 <UART_SetConfig+0x174>
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d009      	beq.n	8003b02 <UART_SetConfig+0x162>
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d810      	bhi.n	8003b14 <UART_SetConfig+0x174>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <UART_SetConfig+0x15c>
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d006      	beq.n	8003b08 <UART_SetConfig+0x168>
 8003afa:	e00b      	b.n	8003b14 <UART_SetConfig+0x174>
 8003afc:	2300      	movs	r3, #0
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e0f2      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b02:	2302      	movs	r3, #2
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e0ef      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e0ec      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e0e9      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b14:	2310      	movs	r3, #16
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e0e6      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a56      	ldr	r2, [pc, #344]	@ (8003c78 <UART_SetConfig+0x2d8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d120      	bne.n	8003b66 <UART_SetConfig+0x1c6>
 8003b24:	4b51      	ldr	r3, [pc, #324]	@ (8003c6c <UART_SetConfig+0x2cc>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b30:	d013      	beq.n	8003b5a <UART_SetConfig+0x1ba>
 8003b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b34:	d814      	bhi.n	8003b60 <UART_SetConfig+0x1c0>
 8003b36:	2b80      	cmp	r3, #128	@ 0x80
 8003b38:	d009      	beq.n	8003b4e <UART_SetConfig+0x1ae>
 8003b3a:	2b80      	cmp	r3, #128	@ 0x80
 8003b3c:	d810      	bhi.n	8003b60 <UART_SetConfig+0x1c0>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <UART_SetConfig+0x1a8>
 8003b42:	2b40      	cmp	r3, #64	@ 0x40
 8003b44:	d006      	beq.n	8003b54 <UART_SetConfig+0x1b4>
 8003b46:	e00b      	b.n	8003b60 <UART_SetConfig+0x1c0>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e0cc      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e0c9      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b54:	2304      	movs	r3, #4
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e0c6      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e0c3      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b60:	2310      	movs	r3, #16
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e0c0      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a44      	ldr	r2, [pc, #272]	@ (8003c7c <UART_SetConfig+0x2dc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d125      	bne.n	8003bbc <UART_SetConfig+0x21c>
 8003b70:	4b3e      	ldr	r3, [pc, #248]	@ (8003c6c <UART_SetConfig+0x2cc>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b7e:	d017      	beq.n	8003bb0 <UART_SetConfig+0x210>
 8003b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b84:	d817      	bhi.n	8003bb6 <UART_SetConfig+0x216>
 8003b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b8a:	d00b      	beq.n	8003ba4 <UART_SetConfig+0x204>
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b90:	d811      	bhi.n	8003bb6 <UART_SetConfig+0x216>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <UART_SetConfig+0x1fe>
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b9a:	d006      	beq.n	8003baa <UART_SetConfig+0x20a>
 8003b9c:	e00b      	b.n	8003bb6 <UART_SetConfig+0x216>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e0a1      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e09e      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003baa:	2304      	movs	r3, #4
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e09b      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e098      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e095      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8003c80 <UART_SetConfig+0x2e0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d125      	bne.n	8003c12 <UART_SetConfig+0x272>
 8003bc6:	4b29      	ldr	r3, [pc, #164]	@ (8003c6c <UART_SetConfig+0x2cc>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bd4:	d017      	beq.n	8003c06 <UART_SetConfig+0x266>
 8003bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bda:	d817      	bhi.n	8003c0c <UART_SetConfig+0x26c>
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003be0:	d00b      	beq.n	8003bfa <UART_SetConfig+0x25a>
 8003be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003be6:	d811      	bhi.n	8003c0c <UART_SetConfig+0x26c>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <UART_SetConfig+0x254>
 8003bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf0:	d006      	beq.n	8003c00 <UART_SetConfig+0x260>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x26c>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e076      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e073      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c00:	2304      	movs	r3, #4
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e070      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c06:	2308      	movs	r3, #8
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e06d      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e06a      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <UART_SetConfig+0x2e4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d138      	bne.n	8003c8e <UART_SetConfig+0x2ee>
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <UART_SetConfig+0x2cc>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c2a:	d017      	beq.n	8003c5c <UART_SetConfig+0x2bc>
 8003c2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c30:	d82a      	bhi.n	8003c88 <UART_SetConfig+0x2e8>
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c36:	d00b      	beq.n	8003c50 <UART_SetConfig+0x2b0>
 8003c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3c:	d824      	bhi.n	8003c88 <UART_SetConfig+0x2e8>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <UART_SetConfig+0x2aa>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c46:	d006      	beq.n	8003c56 <UART_SetConfig+0x2b6>
 8003c48:	e01e      	b.n	8003c88 <UART_SetConfig+0x2e8>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e04b      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c50:	2302      	movs	r3, #2
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e048      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c56:	2304      	movs	r3, #4
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e045      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e042      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c62:	bf00      	nop
 8003c64:	efff69f3 	.word	0xefff69f3
 8003c68:	40011000 	.word	0x40011000
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40004c00 	.word	0x40004c00
 8003c7c:	40005000 	.word	0x40005000
 8003c80:	40011400 	.word	0x40011400
 8003c84:	40007800 	.word	0x40007800
 8003c88:	2310      	movs	r3, #16
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e02c      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a72      	ldr	r2, [pc, #456]	@ (8003e5c <UART_SetConfig+0x4bc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d125      	bne.n	8003ce4 <UART_SetConfig+0x344>
 8003c98:	4b71      	ldr	r3, [pc, #452]	@ (8003e60 <UART_SetConfig+0x4c0>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ca2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ca6:	d017      	beq.n	8003cd8 <UART_SetConfig+0x338>
 8003ca8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cac:	d817      	bhi.n	8003cde <UART_SetConfig+0x33e>
 8003cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb2:	d00b      	beq.n	8003ccc <UART_SetConfig+0x32c>
 8003cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb8:	d811      	bhi.n	8003cde <UART_SetConfig+0x33e>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <UART_SetConfig+0x326>
 8003cbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cc2:	d006      	beq.n	8003cd2 <UART_SetConfig+0x332>
 8003cc4:	e00b      	b.n	8003cde <UART_SetConfig+0x33e>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e00d      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e00a      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e007      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e004      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e001      	b.n	8003ce8 <UART_SetConfig+0x348>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cf0:	d15b      	bne.n	8003daa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cf2:	7ffb      	ldrb	r3, [r7, #31]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d828      	bhi.n	8003d4a <UART_SetConfig+0x3aa>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <UART_SetConfig+0x360>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d2d 	.word	0x08003d2d
 8003d08:	08003d35 	.word	0x08003d35
 8003d0c:	08003d4b 	.word	0x08003d4b
 8003d10:	08003d3b 	.word	0x08003d3b
 8003d14:	08003d4b 	.word	0x08003d4b
 8003d18:	08003d4b 	.word	0x08003d4b
 8003d1c:	08003d4b 	.word	0x08003d4b
 8003d20:	08003d43 	.word	0x08003d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d24:	f7ff f9d6 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8003d28:	61b8      	str	r0, [r7, #24]
        break;
 8003d2a:	e013      	b.n	8003d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d2c:	f7ff f9e6 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8003d30:	61b8      	str	r0, [r7, #24]
        break;
 8003d32:	e00f      	b.n	8003d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d34:	4b4b      	ldr	r3, [pc, #300]	@ (8003e64 <UART_SetConfig+0x4c4>)
 8003d36:	61bb      	str	r3, [r7, #24]
        break;
 8003d38:	e00c      	b.n	8003d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3a:	f7ff f8f9 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8003d3e:	61b8      	str	r0, [r7, #24]
        break;
 8003d40:	e008      	b.n	8003d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d46:	61bb      	str	r3, [r7, #24]
        break;
 8003d48:	e004      	b.n	8003d54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	77bb      	strb	r3, [r7, #30]
        break;
 8003d52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d074      	beq.n	8003e44 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	005a      	lsls	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	085b      	lsrs	r3, r3, #1
 8003d64:	441a      	add	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b0f      	cmp	r3, #15
 8003d74:	d916      	bls.n	8003da4 <UART_SetConfig+0x404>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7c:	d212      	bcs.n	8003da4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f023 030f 	bic.w	r3, r3, #15
 8003d86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	89fb      	ldrh	r3, [r7, #14]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	89fa      	ldrh	r2, [r7, #14]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	e04f      	b.n	8003e44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	77bb      	strb	r3, [r7, #30]
 8003da8:	e04c      	b.n	8003e44 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d828      	bhi.n	8003e02 <UART_SetConfig+0x462>
 8003db0:	a201      	add	r2, pc, #4	@ (adr r2, 8003db8 <UART_SetConfig+0x418>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7ff f97a 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8003de0:	61b8      	str	r0, [r7, #24]
        break;
 8003de2:	e013      	b.n	8003e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7ff f98a 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8003de8:	61b8      	str	r0, [r7, #24]
        break;
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <UART_SetConfig+0x4c4>)
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e00c      	b.n	8003e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7ff f89d 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8003df6:	61b8      	str	r0, [r7, #24]
        break;
 8003df8:	e008      	b.n	8003e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dfe:	61bb      	str	r3, [r7, #24]
        break;
 8003e00:	e004      	b.n	8003e0c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	77bb      	strb	r3, [r7, #30]
        break;
 8003e0a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	085a      	lsrs	r2, r3, #1
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	441a      	add	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d909      	bls.n	8003e40 <UART_SetConfig+0x4a0>
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e32:	d205      	bcs.n	8003e40 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	e001      	b.n	8003e44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e50:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40007c00 	.word	0x40007c00
 8003e60:	40023800 	.word	0x40023800
 8003e64:	00f42400 	.word	0x00f42400

08003e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f66:	d10a      	bne.n	8003f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08c      	sub	sp, #48	@ 0x30
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fbc:	f7fc ff6c 	bl	8000e98 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d12e      	bne.n	800402e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f83b 	bl	800405a <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d021      	beq.n	800402e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69b9      	ldr	r1, [r7, #24]
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	617b      	str	r3, [r7, #20]
   return(result);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e011      	b.n	8004052 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3728      	adds	r7, #40	@ 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406a:	e04f      	b.n	800410c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d04b      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fc ff10 	bl	8000e98 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <UART_WaitOnFlagUntilTimeout+0x30>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e04e      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d037      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xb2>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b80      	cmp	r3, #128	@ 0x80
 80040a0:	d034      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xb2>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b40      	cmp	r3, #64	@ 0x40
 80040a6:	d031      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d110      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2208      	movs	r2, #8
 80040bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f838 	bl	8004134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2208      	movs	r2, #8
 80040c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e029      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040e6:	d111      	bne.n	800410c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f81e 	bl	8004134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e00f      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4013      	ands	r3, r2
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	429a      	cmp	r2, r3
 8004128:	d0a0      	beq.n	800406c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b095      	sub	sp, #84	@ 0x54
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415a:	643b      	str	r3, [r7, #64]	@ 0x40
 800415c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004160:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e6      	bne.n	800413c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3308      	adds	r3, #8
 8004174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	61fb      	str	r3, [r7, #28]
   return(result);
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800418e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d118      	bne.n	80041dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f023 0310 	bic.w	r3, r3, #16
 80041be:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6979      	ldr	r1, [r7, #20]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	613b      	str	r3, [r7, #16]
   return(result);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e6      	bne.n	80041aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041f0:	bf00      	nop
 80041f2:	3754      	adds	r7, #84	@ 0x54
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004202:	4b87      	ldr	r3, [pc, #540]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004204:	22c0      	movs	r2, #192	@ 0xc0
 8004206:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004208:	4b85      	ldr	r3, [pc, #532]	@ (8004420 <MX_LWIP_Init+0x224>)
 800420a:	22a8      	movs	r2, #168	@ 0xa8
 800420c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800420e:	4b84      	ldr	r3, [pc, #528]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004210:	2201      	movs	r2, #1
 8004212:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8004214:	4b82      	ldr	r3, [pc, #520]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004216:	2264      	movs	r2, #100	@ 0x64
 8004218:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800421a:	4b82      	ldr	r3, [pc, #520]	@ (8004424 <MX_LWIP_Init+0x228>)
 800421c:	22ff      	movs	r2, #255	@ 0xff
 800421e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004220:	4b80      	ldr	r3, [pc, #512]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004222:	22ff      	movs	r2, #255	@ 0xff
 8004224:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004226:	4b7f      	ldr	r3, [pc, #508]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004228:	22ff      	movs	r2, #255	@ 0xff
 800422a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800422c:	4b7d      	ldr	r3, [pc, #500]	@ (8004424 <MX_LWIP_Init+0x228>)
 800422e:	2200      	movs	r2, #0
 8004230:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004232:	4b7d      	ldr	r3, [pc, #500]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004234:	22c0      	movs	r2, #192	@ 0xc0
 8004236:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004238:	4b7b      	ldr	r3, [pc, #492]	@ (8004428 <MX_LWIP_Init+0x22c>)
 800423a:	22a8      	movs	r2, #168	@ 0xa8
 800423c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800423e:	4b7a      	ldr	r3, [pc, #488]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004240:	2201      	movs	r2, #1
 8004242:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004244:	4b78      	ldr	r3, [pc, #480]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004246:	2201      	movs	r2, #1
 8004248:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800424a:	f001 fecb 	bl	8005fe4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800424e:	4b74      	ldr	r3, [pc, #464]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	061a      	lsls	r2, r3, #24
 8004254:	4b72      	ldr	r3, [pc, #456]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	431a      	orrs	r2, r3
 800425c:	4b70      	ldr	r3, [pc, #448]	@ (8004420 <MX_LWIP_Init+0x224>)
 800425e:	789b      	ldrb	r3, [r3, #2]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	4313      	orrs	r3, r2
 8004264:	4a6e      	ldr	r2, [pc, #440]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004266:	78d2      	ldrb	r2, [r2, #3]
 8004268:	4313      	orrs	r3, r2
 800426a:	061a      	lsls	r2, r3, #24
 800426c:	4b6c      	ldr	r3, [pc, #432]	@ (8004420 <MX_LWIP_Init+0x224>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	0619      	lsls	r1, r3, #24
 8004272:	4b6b      	ldr	r3, [pc, #428]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	4319      	orrs	r1, r3
 800427a:	4b69      	ldr	r3, [pc, #420]	@ (8004420 <MX_LWIP_Init+0x224>)
 800427c:	789b      	ldrb	r3, [r3, #2]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	430b      	orrs	r3, r1
 8004282:	4967      	ldr	r1, [pc, #412]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004284:	78c9      	ldrb	r1, [r1, #3]
 8004286:	430b      	orrs	r3, r1
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800428e:	431a      	orrs	r2, r3
 8004290:	4b63      	ldr	r3, [pc, #396]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	0619      	lsls	r1, r3, #24
 8004296:	4b62      	ldr	r3, [pc, #392]	@ (8004420 <MX_LWIP_Init+0x224>)
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	4319      	orrs	r1, r3
 800429e:	4b60      	ldr	r3, [pc, #384]	@ (8004420 <MX_LWIP_Init+0x224>)
 80042a0:	789b      	ldrb	r3, [r3, #2]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	430b      	orrs	r3, r1
 80042a6:	495e      	ldr	r1, [pc, #376]	@ (8004420 <MX_LWIP_Init+0x224>)
 80042a8:	78c9      	ldrb	r1, [r1, #3]
 80042aa:	430b      	orrs	r3, r1
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80042b2:	431a      	orrs	r2, r3
 80042b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004420 <MX_LWIP_Init+0x224>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	0619      	lsls	r1, r3, #24
 80042ba:	4b59      	ldr	r3, [pc, #356]	@ (8004420 <MX_LWIP_Init+0x224>)
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	4319      	orrs	r1, r3
 80042c2:	4b57      	ldr	r3, [pc, #348]	@ (8004420 <MX_LWIP_Init+0x224>)
 80042c4:	789b      	ldrb	r3, [r3, #2]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	430b      	orrs	r3, r1
 80042ca:	4955      	ldr	r1, [pc, #340]	@ (8004420 <MX_LWIP_Init+0x224>)
 80042cc:	78c9      	ldrb	r1, [r1, #3]
 80042ce:	430b      	orrs	r3, r1
 80042d0:	0e1b      	lsrs	r3, r3, #24
 80042d2:	4313      	orrs	r3, r2
 80042d4:	4a55      	ldr	r2, [pc, #340]	@ (800442c <MX_LWIP_Init+0x230>)
 80042d6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80042d8:	4b52      	ldr	r3, [pc, #328]	@ (8004424 <MX_LWIP_Init+0x228>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	061a      	lsls	r2, r3, #24
 80042de:	4b51      	ldr	r3, [pc, #324]	@ (8004424 <MX_LWIP_Init+0x228>)
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	431a      	orrs	r2, r3
 80042e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004424 <MX_LWIP_Init+0x228>)
 80042e8:	789b      	ldrb	r3, [r3, #2]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	4313      	orrs	r3, r2
 80042ee:	4a4d      	ldr	r2, [pc, #308]	@ (8004424 <MX_LWIP_Init+0x228>)
 80042f0:	78d2      	ldrb	r2, [r2, #3]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	061a      	lsls	r2, r3, #24
 80042f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004424 <MX_LWIP_Init+0x228>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	0619      	lsls	r1, r3, #24
 80042fc:	4b49      	ldr	r3, [pc, #292]	@ (8004424 <MX_LWIP_Init+0x228>)
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	4319      	orrs	r1, r3
 8004304:	4b47      	ldr	r3, [pc, #284]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004306:	789b      	ldrb	r3, [r3, #2]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	430b      	orrs	r3, r1
 800430c:	4945      	ldr	r1, [pc, #276]	@ (8004424 <MX_LWIP_Init+0x228>)
 800430e:	78c9      	ldrb	r1, [r1, #3]
 8004310:	430b      	orrs	r3, r1
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004318:	431a      	orrs	r2, r3
 800431a:	4b42      	ldr	r3, [pc, #264]	@ (8004424 <MX_LWIP_Init+0x228>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	0619      	lsls	r1, r3, #24
 8004320:	4b40      	ldr	r3, [pc, #256]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	4319      	orrs	r1, r3
 8004328:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <MX_LWIP_Init+0x228>)
 800432a:	789b      	ldrb	r3, [r3, #2]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	430b      	orrs	r3, r1
 8004330:	493c      	ldr	r1, [pc, #240]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004332:	78c9      	ldrb	r1, [r1, #3]
 8004334:	430b      	orrs	r3, r1
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800433c:	431a      	orrs	r2, r3
 800433e:	4b39      	ldr	r3, [pc, #228]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	0619      	lsls	r1, r3, #24
 8004344:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	4319      	orrs	r1, r3
 800434c:	4b35      	ldr	r3, [pc, #212]	@ (8004424 <MX_LWIP_Init+0x228>)
 800434e:	789b      	ldrb	r3, [r3, #2]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	430b      	orrs	r3, r1
 8004354:	4933      	ldr	r1, [pc, #204]	@ (8004424 <MX_LWIP_Init+0x228>)
 8004356:	78c9      	ldrb	r1, [r1, #3]
 8004358:	430b      	orrs	r3, r1
 800435a:	0e1b      	lsrs	r3, r3, #24
 800435c:	4313      	orrs	r3, r2
 800435e:	4a34      	ldr	r2, [pc, #208]	@ (8004430 <MX_LWIP_Init+0x234>)
 8004360:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004362:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	061a      	lsls	r2, r3, #24
 8004368:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <MX_LWIP_Init+0x22c>)
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	431a      	orrs	r2, r3
 8004370:	4b2d      	ldr	r3, [pc, #180]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004372:	789b      	ldrb	r3, [r3, #2]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	4313      	orrs	r3, r2
 8004378:	4a2b      	ldr	r2, [pc, #172]	@ (8004428 <MX_LWIP_Init+0x22c>)
 800437a:	78d2      	ldrb	r2, [r2, #3]
 800437c:	4313      	orrs	r3, r2
 800437e:	061a      	lsls	r2, r3, #24
 8004380:	4b29      	ldr	r3, [pc, #164]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	0619      	lsls	r1, r3, #24
 8004386:	4b28      	ldr	r3, [pc, #160]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004388:	785b      	ldrb	r3, [r3, #1]
 800438a:	041b      	lsls	r3, r3, #16
 800438c:	4319      	orrs	r1, r3
 800438e:	4b26      	ldr	r3, [pc, #152]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004390:	789b      	ldrb	r3, [r3, #2]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	430b      	orrs	r3, r1
 8004396:	4924      	ldr	r1, [pc, #144]	@ (8004428 <MX_LWIP_Init+0x22c>)
 8004398:	78c9      	ldrb	r1, [r1, #3]
 800439a:	430b      	orrs	r3, r1
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80043a2:	431a      	orrs	r2, r3
 80043a4:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	0619      	lsls	r1, r3, #24
 80043aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	4319      	orrs	r1, r3
 80043b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043b4:	789b      	ldrb	r3, [r3, #2]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	430b      	orrs	r3, r1
 80043ba:	491b      	ldr	r1, [pc, #108]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043bc:	78c9      	ldrb	r1, [r1, #3]
 80043be:	430b      	orrs	r3, r1
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80043c6:	431a      	orrs	r2, r3
 80043c8:	4b17      	ldr	r3, [pc, #92]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	0619      	lsls	r1, r3, #24
 80043ce:	4b16      	ldr	r3, [pc, #88]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	4319      	orrs	r1, r3
 80043d6:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043d8:	789b      	ldrb	r3, [r3, #2]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	430b      	orrs	r3, r1
 80043de:	4912      	ldr	r1, [pc, #72]	@ (8004428 <MX_LWIP_Init+0x22c>)
 80043e0:	78c9      	ldrb	r1, [r1, #3]
 80043e2:	430b      	orrs	r3, r1
 80043e4:	0e1b      	lsrs	r3, r3, #24
 80043e6:	4313      	orrs	r3, r2
 80043e8:	4a12      	ldr	r2, [pc, #72]	@ (8004434 <MX_LWIP_Init+0x238>)
 80043ea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <MX_LWIP_Init+0x23c>)
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	4b12      	ldr	r3, [pc, #72]	@ (800443c <MX_LWIP_Init+0x240>)
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004434 <MX_LWIP_Init+0x238>)
 80043fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <MX_LWIP_Init+0x234>)
 80043fc:	490b      	ldr	r1, [pc, #44]	@ (800442c <MX_LWIP_Init+0x230>)
 80043fe:	4810      	ldr	r0, [pc, #64]	@ (8004440 <MX_LWIP_Init+0x244>)
 8004400:	f003 fbee 	bl	8007be0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004404:	480e      	ldr	r0, [pc, #56]	@ (8004440 <MX_LWIP_Init+0x244>)
 8004406:	f003 fd9d 	bl	8007f44 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800440a:	480d      	ldr	r0, [pc, #52]	@ (8004440 <MX_LWIP_Init+0x244>)
 800440c:	f003 fdaa 	bl	8007f64 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004410:	490c      	ldr	r1, [pc, #48]	@ (8004444 <MX_LWIP_Init+0x248>)
 8004412:	480b      	ldr	r0, [pc, #44]	@ (8004440 <MX_LWIP_Init+0x244>)
 8004414:	f003 fea8 	bl	8008168 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200002b8 	.word	0x200002b8
 8004424:	200002bc 	.word	0x200002bc
 8004428:	200002c0 	.word	0x200002c0
 800442c:	200002ac 	.word	0x200002ac
 8004430:	200002b0 	.word	0x200002b0
 8004434:	200002b4 	.word	0x200002b4
 8004438:	08005b1d 	.word	0x08005b1d
 800443c:	080047bd 	.word	0x080047bd
 8004440:	20000278 	.word	0x20000278
 8004444:	08004499 	.word	0x08004499

08004448 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004450:	f7fc fd22 	bl	8000e98 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <Ethernet_Link_Periodic_Handle+0x30>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b63      	cmp	r3, #99	@ 0x63
 800445e:	d907      	bls.n	8004470 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004460:	f7fc fd1a 	bl	8000e98 <HAL_GetTick>
 8004464:	4603      	mov	r3, r0
 8004466:	4a04      	ldr	r2, [pc, #16]	@ (8004478 <Ethernet_Link_Periodic_Handle+0x30>)
 8004468:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fadc 	bl	8004a28 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000274 	.word	0x20000274

0800447c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004480:	4804      	ldr	r0, [pc, #16]	@ (8004494 <MX_LWIP_Process+0x18>)
 8004482:	f000 f97b 	bl	800477c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004486:	f009 feed 	bl	800e264 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800448a:	4802      	ldr	r0, [pc, #8]	@ (8004494 <MX_LWIP_Process+0x18>)
 800448c:	f7ff ffdc 	bl	8004448 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000278 	.word	0x20000278

08004498 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <SCB_InvalidateDCache_by_Addr>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80044be:	2320      	movs	r3, #32
 80044c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80044c2:	f3bf 8f4f 	dsb	sy
}
 80044c6:	bf00      	nop
    while (op_size > 0) {
 80044c8:	e00b      	b.n	80044e2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80044ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004500 <SCB_InvalidateDCache_by_Addr+0x54>)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	dcf0      	bgt.n	80044ca <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80044e8:	f3bf 8f4f 	dsb	sy
}
 80044ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044ee:	f3bf 8f6f 	isb	sy
}
 80044f2:	bf00      	nop
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004510:	4b44      	ldr	r3, [pc, #272]	@ (8004624 <low_level_init+0x120>)
 8004512:	4a45      	ldr	r2, [pc, #276]	@ (8004628 <low_level_init+0x124>)
 8004514:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004516:	2300      	movs	r3, #0
 8004518:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800451e:	23e1      	movs	r3, #225	@ 0xe1
 8004520:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004522:	2300      	movs	r3, #0
 8004524:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004526:	2300      	movs	r3, #0
 8004528:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800452a:	2300      	movs	r3, #0
 800452c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800452e:	4a3d      	ldr	r2, [pc, #244]	@ (8004624 <low_level_init+0x120>)
 8004530:	f107 0308 	add.w	r3, r7, #8
 8004534:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004536:	4b3b      	ldr	r3, [pc, #236]	@ (8004624 <low_level_init+0x120>)
 8004538:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800453c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800453e:	4b39      	ldr	r3, [pc, #228]	@ (8004624 <low_level_init+0x120>)
 8004540:	4a3a      	ldr	r2, [pc, #232]	@ (800462c <low_level_init+0x128>)
 8004542:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004544:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <low_level_init+0x120>)
 8004546:	4a3a      	ldr	r2, [pc, #232]	@ (8004630 <low_level_init+0x12c>)
 8004548:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800454a:	4b36      	ldr	r3, [pc, #216]	@ (8004624 <low_level_init+0x120>)
 800454c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004550:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004552:	4834      	ldr	r0, [pc, #208]	@ (8004624 <low_level_init+0x120>)
 8004554:	f7fc fe2e 	bl	80011b4 <HAL_ETH_Init>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800455c:	2238      	movs	r2, #56	@ 0x38
 800455e:	2100      	movs	r1, #0
 8004560:	4834      	ldr	r0, [pc, #208]	@ (8004634 <low_level_init+0x130>)
 8004562:	f00a fcf0 	bl	800ef46 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004566:	4b33      	ldr	r3, [pc, #204]	@ (8004634 <low_level_init+0x130>)
 8004568:	2221      	movs	r2, #33	@ 0x21
 800456a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800456c:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <low_level_init+0x130>)
 800456e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004572:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004574:	4b2f      	ldr	r3, [pc, #188]	@ (8004634 <low_level_init+0x130>)
 8004576:	2200      	movs	r2, #0
 8004578:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800457a:	482f      	ldr	r0, [pc, #188]	@ (8004638 <low_level_init+0x134>)
 800457c:	f003 f9f8 	bl	8007970 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2206      	movs	r2, #6
 8004584:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004588:	4b26      	ldr	r3, [pc, #152]	@ (8004624 <low_level_init+0x120>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004594:	4b23      	ldr	r3, [pc, #140]	@ (8004624 <low_level_init+0x120>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	785a      	ldrb	r2, [r3, #1]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80045a0:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <low_level_init+0x120>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	789a      	ldrb	r2, [r3, #2]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80045ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <low_level_init+0x120>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	78da      	ldrb	r2, [r3, #3]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80045b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <low_level_init+0x120>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	791a      	ldrb	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80045c4:	4b17      	ldr	r3, [pc, #92]	@ (8004624 <low_level_init+0x120>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	795a      	ldrb	r2, [r3, #5]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80045d6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80045de:	f043 030a 	orr.w	r3, r3, #10
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80045ea:	4914      	ldr	r1, [pc, #80]	@ (800463c <low_level_init+0x138>)
 80045ec:	4814      	ldr	r0, [pc, #80]	@ (8004640 <low_level_init+0x13c>)
 80045ee:	f7fc fafc 	bl	8000bea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80045f2:	4813      	ldr	r0, [pc, #76]	@ (8004640 <low_level_init+0x13c>)
 80045f4:	f7fc fb2b 	bl	8000c4e <LAN8742_Init>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f003 fd82 	bl	8008108 <netif_set_link_down>
    netif_set_down(netif);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f003 fd19 	bl	800803c <netif_set_down>
 800460a:	e008      	b.n	800461e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa08 	bl	8004a28 <ethernet_link_check_state>
 8004618:	e001      	b.n	800461e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800461a:	f7fc f8f9 	bl	8000810 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20004c50 	.word	0x20004c50
 8004628:	40028000 	.word	0x40028000
 800462c:	20000128 	.word	0x20000128
 8004630:	20000088 	.word	0x20000088
 8004634:	20004d00 	.word	0x20004d00
 8004638:	08012ce8 	.word	0x08012ce8
 800463c:	2000000c 	.word	0x2000000c
 8004640:	20004d38 	.word	0x20004d38

08004644 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b092      	sub	sp, #72	@ 0x48
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800465c:	f107 030c 	add.w	r3, r7, #12
 8004660:	2230      	movs	r2, #48	@ 0x30
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f00a fc6e 	bl	800ef46 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	2230      	movs	r2, #48	@ 0x30
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f00a fc67 	bl	800ef46 <memset>

  for(q = p; q != NULL; q = q->next)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	643b      	str	r3, [r7, #64]	@ 0x40
 800467c:	e045      	b.n	800470a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800467e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004680:	2b03      	cmp	r3, #3
 8004682:	d902      	bls.n	800468a <low_level_output+0x46>
      return ERR_IF;
 8004684:	f06f 030b 	mvn.w	r3, #11
 8004688:	e055      	b.n	8004736 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800468a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	3348      	adds	r3, #72	@ 0x48
 800469a:	443b      	add	r3, r7
 800469c:	3b3c      	subs	r3, #60	@ 0x3c
 800469e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80046a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a2:	895b      	ldrh	r3, [r3, #10]
 80046a4:	4619      	mov	r1, r3
 80046a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a8:	4613      	mov	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3348      	adds	r3, #72	@ 0x48
 80046b2:	443b      	add	r3, r7
 80046b4:	3b38      	subs	r3, #56	@ 0x38
 80046b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80046b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d011      	beq.n	80046e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80046be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c0:	1e5a      	subs	r2, r3, #1
 80046c2:	f107 000c 	add.w	r0, r7, #12
 80046c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046c8:	460b      	mov	r3, r1
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	440b      	add	r3, r1
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	18c1      	adds	r1, r0, r3
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	3348      	adds	r3, #72	@ 0x48
 80046dc:	443b      	add	r3, r7
 80046de:	3b34      	subs	r3, #52	@ 0x34
 80046e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80046e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80046ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	3348      	adds	r3, #72	@ 0x48
 80046f6:	443b      	add	r3, r7
 80046f8:	3b34      	subs	r3, #52	@ 0x34
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80046fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004700:	3301      	adds	r3, #1
 8004702:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	643b      	str	r3, [r7, #64]	@ 0x40
 800470a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1b6      	bne.n	800467e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	891b      	ldrh	r3, [r3, #8]
 8004714:	461a      	mov	r2, r3
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <low_level_output+0xfc>)
 8004718:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800471a:	4a09      	ldr	r2, [pc, #36]	@ (8004740 <low_level_output+0xfc>)
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004722:	4a07      	ldr	r2, [pc, #28]	@ (8004740 <low_level_output+0xfc>)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004728:	2214      	movs	r2, #20
 800472a:	4905      	ldr	r1, [pc, #20]	@ (8004740 <low_level_output+0xfc>)
 800472c:	4805      	ldr	r0, [pc, #20]	@ (8004744 <low_level_output+0x100>)
 800472e:	f7fc fe93 	bl	8001458 <HAL_ETH_Transmit>

  return errval;
 8004732:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004736:	4618      	mov	r0, r3
 8004738:	3748      	adds	r7, #72	@ 0x48
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20004d00 	.word	0x20004d00
 8004744:	20004c50 	.word	0x20004c50

08004748 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004754:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <low_level_input+0x2c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	4619      	mov	r1, r3
 8004762:	4805      	ldr	r0, [pc, #20]	@ (8004778 <low_level_input+0x30>)
 8004764:	f7fc ff0c 	bl	8001580 <HAL_ETH_ReadData>
  }

  return p;
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20004c4c 	.word	0x20004c4c
 8004778:	20004c50 	.word	0x20004c50

0800477c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ffdd 	bl	8004748 <low_level_input>
 800478e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	4798      	blx	r3
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f004 f85e 	bl	8008868 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ea      	bne.n	8004788 <ethernetif_input+0xc>
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <ethernetif_init+0x1c>
 80047ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <ethernetif_init+0x48>)
 80047cc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80047d0:	490d      	ldr	r1, [pc, #52]	@ (8004808 <ethernetif_init+0x4c>)
 80047d2:	480e      	ldr	r0, [pc, #56]	@ (800480c <ethernetif_init+0x50>)
 80047d4:	f00a fb16 	bl	800ee04 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2273      	movs	r2, #115	@ 0x73
 80047dc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2274      	movs	r2, #116	@ 0x74
 80047e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a09      	ldr	r2, [pc, #36]	@ (8004810 <ethernetif_init+0x54>)
 80047ec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a08      	ldr	r2, [pc, #32]	@ (8004814 <ethernetif_init+0x58>)
 80047f2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fe85 	bl	8004504 <low_level_init>

  return ERR_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	0800ffd0 	.word	0x0800ffd0
 8004808:	0800ffec 	.word	0x0800ffec
 800480c:	0800fffc 	.word	0x0800fffc
 8004810:	0800551d 	.word	0x0800551d
 8004814:	08004645 	.word	0x08004645

08004818 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	4807      	ldr	r0, [pc, #28]	@ (8004844 <pbuf_free_custom+0x2c>)
 8004828:	f003 f984 	bl	8007b34 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800482c:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <pbuf_free_custom+0x30>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d102      	bne.n	800483a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <pbuf_free_custom+0x30>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
  }
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	08012ce8 	.word	0x08012ce8
 8004848:	20004c4c 	.word	0x20004c4c

0800484c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004850:	f7fc fb22 	bl	8000e98 <HAL_GetTick>
 8004854:	4603      	mov	r3, r0
}
 8004856:	4618      	mov	r0, r3
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08e      	sub	sp, #56	@ 0x38
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3f      	ldr	r2, [pc, #252]	@ (8004978 <HAL_ETH_MspInit+0x11c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d178      	bne.n	8004970 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800487e:	4b3f      	ldr	r3, [pc, #252]	@ (800497c <HAL_ETH_MspInit+0x120>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	4a3e      	ldr	r2, [pc, #248]	@ (800497c <HAL_ETH_MspInit+0x120>)
 8004884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004888:	6313      	str	r3, [r2, #48]	@ 0x30
 800488a:	4b3c      	ldr	r3, [pc, #240]	@ (800497c <HAL_ETH_MspInit+0x120>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	623b      	str	r3, [r7, #32]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	4b39      	ldr	r3, [pc, #228]	@ (800497c <HAL_ETH_MspInit+0x120>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	4a38      	ldr	r2, [pc, #224]	@ (800497c <HAL_ETH_MspInit+0x120>)
 800489c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048a2:	4b36      	ldr	r3, [pc, #216]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4b33      	ldr	r3, [pc, #204]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	4a32      	ldr	r2, [pc, #200]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ba:	4b30      	ldr	r3, [pc, #192]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80048c6:	4b2d      	ldr	r3, [pc, #180]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	4a2c      	ldr	r2, [pc, #176]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d2:	4b2a      	ldr	r3, [pc, #168]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048de:	4b27      	ldr	r3, [pc, #156]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	4a26      	ldr	r2, [pc, #152]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ea:	4b24      	ldr	r3, [pc, #144]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	4b21      	ldr	r3, [pc, #132]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	4a20      	ldr	r2, [pc, #128]	@ (800497c <HAL_ETH_MspInit+0x120>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6313      	str	r3, [r2, #48]	@ 0x30
 8004902:	4b1e      	ldr	r3, [pc, #120]	@ (800497c <HAL_ETH_MspInit+0x120>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800490e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004914:	2302      	movs	r3, #2
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491c:	2303      	movs	r3, #3
 800491e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004920:	230b      	movs	r3, #11
 8004922:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004928:	4619      	mov	r1, r3
 800492a:	4815      	ldr	r0, [pc, #84]	@ (8004980 <HAL_ETH_MspInit+0x124>)
 800492c:	f7fd fd74 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004930:	2332      	movs	r3, #50	@ 0x32
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493c:	2303      	movs	r3, #3
 800493e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004940:	230b      	movs	r3, #11
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004948:	4619      	mov	r1, r3
 800494a:	480e      	ldr	r0, [pc, #56]	@ (8004984 <HAL_ETH_MspInit+0x128>)
 800494c:	f7fd fd64 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004950:	2386      	movs	r3, #134	@ 0x86
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495c:	2303      	movs	r3, #3
 800495e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004960:	230b      	movs	r3, #11
 8004962:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004968:	4619      	mov	r1, r3
 800496a:	4807      	ldr	r0, [pc, #28]	@ (8004988 <HAL_ETH_MspInit+0x12c>)
 800496c:	f7fd fd54 	bl	8002418 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004970:	bf00      	nop
 8004972:	3738      	adds	r7, #56	@ 0x38
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40028000 	.word	0x40028000
 800497c:	40023800 	.word	0x40023800
 8004980:	40021800 	.word	0x40021800
 8004984:	40020800 	.word	0x40020800
 8004988:	40020000 	.word	0x40020000

0800498c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004990:	4802      	ldr	r0, [pc, #8]	@ (800499c <ETH_PHY_IO_Init+0x10>)
 8004992:	f7fd f8df 	bl	8001b54 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20004c50 	.word	0x20004c50

080049a0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return 0;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	68f9      	ldr	r1, [r7, #12]
 80049c2:	4807      	ldr	r0, [pc, #28]	@ (80049e0 <ETH_PHY_IO_ReadReg+0x30>)
 80049c4:	f7fc ff20 	bl	8001808 <HAL_ETH_ReadPHYRegister>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
 80049d2:	e000      	b.n	80049d6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20004c50 	.word	0x20004c50

080049e4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	4807      	ldr	r0, [pc, #28]	@ (8004a14 <ETH_PHY_IO_WriteReg+0x30>)
 80049f8:	f7fc ff51 	bl	800189e <HAL_ETH_WritePHYRegister>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	e000      	b.n	8004a0a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20004c50 	.word	0x20004c50

08004a18 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a1c:	f7fc fa3c 	bl	8000e98 <HAL_GetTick>
 8004a20:	4603      	mov	r3, r0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0a0      	sub	sp, #128	@ 0x80
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	2264      	movs	r2, #100	@ 0x64
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f00a fa84 	bl	800ef46 <memset>
  int32_t PHYLinkState = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a46:	2300      	movs	r3, #0
 8004a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a4e:	483a      	ldr	r0, [pc, #232]	@ (8004b38 <ethernet_link_check_state+0x110>)
 8004a50:	f7fc f94a 	bl	8000ce8 <LAN8742_GetLinkState>
 8004a54:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <ethernet_link_check_state+0x5a>
 8004a68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	dc09      	bgt.n	8004a82 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004a6e:	4833      	ldr	r0, [pc, #204]	@ (8004b3c <ethernet_link_check_state+0x114>)
 8004a70:	f7fc fc99 	bl	80013a6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f003 fae1 	bl	800803c <netif_set_down>
    netif_set_link_down(netif);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f003 fb44 	bl	8008108 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004a80:	e055      	b.n	8004b2e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d14e      	bne.n	8004b2e <ethernet_link_check_state+0x106>
 8004a90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	dd4b      	ble.n	8004b2e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a98:	3b02      	subs	r3, #2
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d82a      	bhi.n	8004af4 <ethernet_link_check_state+0xcc>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <ethernet_link_check_state+0x7c>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac7 	.word	0x08004ac7
 8004aac:	08004ad7 	.word	0x08004ad7
 8004ab0:	08004ae7 	.word	0x08004ae7
      duplex = ETH_FULLDUPLEX_MODE;
 8004ab4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ab8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004aba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004abe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004ac4:	e017      	b.n	8004af6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004aca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ace:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004ad4:	e00f      	b.n	8004af6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004ad6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ada:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004adc:	2300      	movs	r3, #0
 8004ade:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004ae4:	e007      	b.n	8004af6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004aea:	2300      	movs	r3, #0
 8004aec:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004af2:	e000      	b.n	8004af6 <ethernet_link_check_state+0xce>
      break;
 8004af4:	bf00      	nop
    if(linkchanged)
 8004af6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d018      	beq.n	8004b2e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	4619      	mov	r1, r3
 8004b02:	480e      	ldr	r0, [pc, #56]	@ (8004b3c <ethernet_link_check_state+0x114>)
 8004b04:	f7fc ff14 	bl	8001930 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b10:	f107 030c 	add.w	r3, r7, #12
 8004b14:	4619      	mov	r1, r3
 8004b16:	4809      	ldr	r0, [pc, #36]	@ (8004b3c <ethernet_link_check_state+0x114>)
 8004b18:	f7fd f801 	bl	8001b1e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004b1c:	4807      	ldr	r0, [pc, #28]	@ (8004b3c <ethernet_link_check_state+0x114>)
 8004b1e:	f7fc fbe3 	bl	80012e8 <HAL_ETH_Start>
      netif_set_up(netif);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f003 fa1e 	bl	8007f64 <netif_set_up>
      netif_set_link_up(netif);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f003 fab9 	bl	80080a0 <netif_set_link_up>
}
 8004b2e:	bf00      	nop
 8004b30:	3780      	adds	r7, #128	@ 0x80
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20004d38 	.word	0x20004d38
 8004b3c:	20004c50 	.word	0x20004c50

08004b40 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004b48:	4812      	ldr	r0, [pc, #72]	@ (8004b94 <HAL_ETH_RxAllocateCallback+0x54>)
 8004b4a:	f002 ff85 	bl	8007a58 <memp_malloc_pool>
 8004b4e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d014      	beq.n	8004b80 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f103 0220 	add.w	r2, r3, #32
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a0d      	ldr	r2, [pc, #52]	@ (8004b98 <HAL_ETH_RxAllocateCallback+0x58>)
 8004b64:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004b6e:	9201      	str	r2, [sp, #4]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2241      	movs	r2, #65	@ 0x41
 8004b76:	2100      	movs	r1, #0
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f003 fcbb 	bl	80084f4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004b7e:	e005      	b.n	8004b8c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	08012ce8 	.word	0x08012ce8
 8004b98:	08004819 	.word	0x08004819
 8004b9c:	20004c4c 	.word	0x20004c4c

08004ba0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3b20      	subs	r3, #32
 8004bbe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e003      	b.n	8004bea <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e009      	b.n	8004c0c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	891a      	ldrh	r2, [r3, #8]
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	4413      	add	r3, r2
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f2      	bne.n	8004bf8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fc48 	bl	80044ac <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004c1c:	bf00      	nop
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	b21a      	sxth	r2, r3
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	b21b      	sxth	r3, r3
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b21b      	sxth	r3, r3
 8004c42:	b29b      	uxth	r3, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	061a      	lsls	r2, r3, #24
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	0e1b      	lsrs	r3, r3, #24
 8004c74:	4313      	orrs	r3, r2
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004c8c:	4915      	ldr	r1, [pc, #84]	@ (8004ce4 <etharp_free_entry+0x60>)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	440b      	add	r3, r1
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004ca0:	4910      	ldr	r1, [pc, #64]	@ (8004ce4 <etharp_free_entry+0x60>)
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f003 fdd9 	bl	8008868 <pbuf_free>
    arp_table[i].q = NULL;
 8004cb6:	490b      	ldr	r1, [pc, #44]	@ (8004ce4 <etharp_free_entry+0x60>)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	440b      	add	r3, r1
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004cc8:	4906      	ldr	r1, [pc, #24]	@ (8004ce4 <etharp_free_entry+0x60>)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3314      	adds	r3, #20
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20004d58 	.word	0x20004d58

08004ce8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	e096      	b.n	8004e22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8004cf4:	494f      	ldr	r1, [pc, #316]	@ (8004e34 <etharp_tmr+0x14c>)
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	440b      	add	r3, r1
 8004d02:	3314      	adds	r3, #20
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8086 	beq.w	8004e1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8004d10:	4948      	ldr	r1, [pc, #288]	@ (8004e34 <etharp_tmr+0x14c>)
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3312      	adds	r3, #18
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	b298      	uxth	r0, r3
 8004d26:	4943      	ldr	r1, [pc, #268]	@ (8004e34 <etharp_tmr+0x14c>)
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	440b      	add	r3, r1
 8004d34:	3312      	adds	r3, #18
 8004d36:	4602      	mov	r2, r0
 8004d38:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004d3a:	493e      	ldr	r1, [pc, #248]	@ (8004e34 <etharp_tmr+0x14c>)
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	440b      	add	r3, r1
 8004d48:	3312      	adds	r3, #18
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004d50:	d215      	bcs.n	8004d7e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004d52:	4938      	ldr	r1, [pc, #224]	@ (8004e34 <etharp_tmr+0x14c>)
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	440b      	add	r3, r1
 8004d60:	3314      	adds	r3, #20
 8004d62:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10e      	bne.n	8004d86 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8004d68:	4932      	ldr	r1, [pc, #200]	@ (8004e34 <etharp_tmr+0x14c>)
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	440b      	add	r3, r1
 8004d76:	3312      	adds	r3, #18
 8004d78:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d903      	bls.n	8004d86 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ff80 	bl	8004c84 <etharp_free_entry>
 8004d84:	e04a      	b.n	8004e1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004d86:	492b      	ldr	r1, [pc, #172]	@ (8004e34 <etharp_tmr+0x14c>)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	440b      	add	r3, r1
 8004d94:	3314      	adds	r3, #20
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d10a      	bne.n	8004db2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004d9c:	4925      	ldr	r1, [pc, #148]	@ (8004e34 <etharp_tmr+0x14c>)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	440b      	add	r3, r1
 8004daa:	3314      	adds	r3, #20
 8004dac:	2204      	movs	r2, #4
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e034      	b.n	8004e1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004db2:	4920      	ldr	r1, [pc, #128]	@ (8004e34 <etharp_tmr+0x14c>)
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3314      	adds	r3, #20
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d10a      	bne.n	8004dde <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004dc8:	491a      	ldr	r1, [pc, #104]	@ (8004e34 <etharp_tmr+0x14c>)
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	2202      	movs	r2, #2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e01e      	b.n	8004e1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004dde:	4915      	ldr	r1, [pc, #84]	@ (8004e34 <etharp_tmr+0x14c>)
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	3314      	adds	r3, #20
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d113      	bne.n	8004e1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004df4:	490f      	ldr	r1, [pc, #60]	@ (8004e34 <etharp_tmr+0x14c>)
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	440b      	add	r3, r1
 8004e02:	3308      	adds	r3, #8
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <etharp_tmr+0x14c>)
 8004e12:	4413      	add	r3, r2
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	f000 fe6e 	bl	8005af8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b09      	cmp	r3, #9
 8004e26:	f77f af65 	ble.w	8004cf4 <etharp_tmr+0xc>
      }
    }
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20004d58 	.word	0x20004d58

08004e38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	@ 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	460b      	mov	r3, r1
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004e46:	230a      	movs	r3, #10
 8004e48:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004e4a:	230a      	movs	r3, #10
 8004e4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8004e4e:	230a      	movs	r3, #10
 8004e50:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8004e56:	230a      	movs	r3, #10
 8004e58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	83bb      	strh	r3, [r7, #28]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	837b      	strh	r3, [r7, #26]
 8004e62:	2300      	movs	r3, #0
 8004e64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004e66:	2300      	movs	r3, #0
 8004e68:	843b      	strh	r3, [r7, #32]
 8004e6a:	e0ae      	b.n	8004fca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8004e6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e70:	49a6      	ldr	r1, [pc, #664]	@ (800510c <etharp_find_entry+0x2d4>)
 8004e72:	4613      	mov	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	4413      	add	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004e82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004e86:	2b0a      	cmp	r3, #10
 8004e88:	d105      	bne.n	8004e96 <etharp_find_entry+0x5e>
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8004e90:	8c3b      	ldrh	r3, [r7, #32]
 8004e92:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e94:	e095      	b.n	8004fc2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8092 	beq.w	8004fc2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d009      	beq.n	8004eb8 <etharp_find_entry+0x80>
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d806      	bhi.n	8004eb8 <etharp_find_entry+0x80>
 8004eaa:	4b99      	ldr	r3, [pc, #612]	@ (8005110 <etharp_find_entry+0x2d8>)
 8004eac:	f240 1223 	movw	r2, #291	@ 0x123
 8004eb0:	4998      	ldr	r1, [pc, #608]	@ (8005114 <etharp_find_entry+0x2dc>)
 8004eb2:	4899      	ldr	r0, [pc, #612]	@ (8005118 <etharp_find_entry+0x2e0>)
 8004eb4:	f009 ffa6 	bl	800ee04 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d020      	beq.n	8004f00 <etharp_find_entry+0xc8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ec6:	4891      	ldr	r0, [pc, #580]	@ (800510c <etharp_find_entry+0x2d4>)
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4403      	add	r3, r0
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4299      	cmp	r1, r3
 8004ed8:	d112      	bne.n	8004f00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00c      	beq.n	8004efa <etharp_find_entry+0xc2>
 8004ee0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ee4:	4989      	ldr	r1, [pc, #548]	@ (800510c <etharp_find_entry+0x2d4>)
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	440b      	add	r3, r1
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d102      	bne.n	8004f00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8004efa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004efe:	e100      	b.n	8005102 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d140      	bne.n	8004f88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004f06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f0a:	4980      	ldr	r1, [pc, #512]	@ (800510c <etharp_find_entry+0x2d4>)
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	440b      	add	r3, r1
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01a      	beq.n	8004f52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8004f1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f20:	497a      	ldr	r1, [pc, #488]	@ (800510c <etharp_find_entry+0x2d4>)
 8004f22:	4613      	mov	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	4413      	add	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3312      	adds	r3, #18
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	8bba      	ldrh	r2, [r7, #28]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d845      	bhi.n	8004fc2 <etharp_find_entry+0x18a>
            old_queue = i;
 8004f36:	8c3b      	ldrh	r3, [r7, #32]
 8004f38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8004f3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f3e:	4973      	ldr	r1, [pc, #460]	@ (800510c <etharp_find_entry+0x2d4>)
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	3312      	adds	r3, #18
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	83bb      	strh	r3, [r7, #28]
 8004f50:	e037      	b.n	8004fc2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8004f52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f56:	496d      	ldr	r1, [pc, #436]	@ (800510c <etharp_find_entry+0x2d4>)
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	440b      	add	r3, r1
 8004f62:	3312      	adds	r3, #18
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	8b7a      	ldrh	r2, [r7, #26]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d82a      	bhi.n	8004fc2 <etharp_find_entry+0x18a>
            old_pending = i;
 8004f6c:	8c3b      	ldrh	r3, [r7, #32]
 8004f6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8004f70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f74:	4965      	ldr	r1, [pc, #404]	@ (800510c <etharp_find_entry+0x2d4>)
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	3312      	adds	r3, #18
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	837b      	strh	r3, [r7, #26]
 8004f86:	e01c      	b.n	8004fc2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d919      	bls.n	8004fc2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8004f8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f92:	495e      	ldr	r1, [pc, #376]	@ (800510c <etharp_find_entry+0x2d4>)
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3312      	adds	r3, #18
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	8b3a      	ldrh	r2, [r7, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d80c      	bhi.n	8004fc2 <etharp_find_entry+0x18a>
            old_stable = i;
 8004fa8:	8c3b      	ldrh	r3, [r7, #32]
 8004faa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8004fac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004fb0:	4956      	ldr	r1, [pc, #344]	@ (800510c <etharp_find_entry+0x2d4>)
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	3312      	adds	r3, #18
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004fc2:	8c3b      	ldrh	r3, [r7, #32]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	843b      	strh	r3, [r7, #32]
 8004fca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	f77f af4c 	ble.w	8004e6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d108      	bne.n	8004ff0 <etharp_find_entry+0x1b8>
 8004fde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004fe2:	2b0a      	cmp	r3, #10
 8004fe4:	d107      	bne.n	8004ff6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8004ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff4:	e085      	b.n	8005102 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8004ff6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	dc02      	bgt.n	8005004 <etharp_find_entry+0x1cc>
    i = empty;
 8004ffe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005000:	843b      	strh	r3, [r7, #32]
 8005002:	e039      	b.n	8005078 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8005004:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005008:	2b09      	cmp	r3, #9
 800500a:	dc14      	bgt.n	8005036 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800500c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800500e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005014:	493d      	ldr	r1, [pc, #244]	@ (800510c <etharp_find_entry+0x2d4>)
 8005016:	4613      	mov	r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <etharp_find_entry+0x220>
 8005026:	4b3a      	ldr	r3, [pc, #232]	@ (8005110 <etharp_find_entry+0x2d8>)
 8005028:	f240 126d 	movw	r2, #365	@ 0x16d
 800502c:	493b      	ldr	r1, [pc, #236]	@ (800511c <etharp_find_entry+0x2e4>)
 800502e:	483a      	ldr	r0, [pc, #232]	@ (8005118 <etharp_find_entry+0x2e0>)
 8005030:	f009 fee8 	bl	800ee04 <iprintf>
 8005034:	e010      	b.n	8005058 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005036:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800503a:	2b09      	cmp	r3, #9
 800503c:	dc02      	bgt.n	8005044 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800503e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005040:	843b      	strh	r3, [r7, #32]
 8005042:	e009      	b.n	8005058 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005044:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005048:	2b09      	cmp	r3, #9
 800504a:	dc02      	bgt.n	8005052 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800504c:	8bfb      	ldrh	r3, [r7, #30]
 800504e:	843b      	strh	r3, [r7, #32]
 8005050:	e002      	b.n	8005058 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8005052:	f04f 33ff 	mov.w	r3, #4294967295
 8005056:	e054      	b.n	8005102 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005058:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800505c:	2b09      	cmp	r3, #9
 800505e:	dd06      	ble.n	800506e <etharp_find_entry+0x236>
 8005060:	4b2b      	ldr	r3, [pc, #172]	@ (8005110 <etharp_find_entry+0x2d8>)
 8005062:	f240 127f 	movw	r2, #383	@ 0x17f
 8005066:	492e      	ldr	r1, [pc, #184]	@ (8005120 <etharp_find_entry+0x2e8>)
 8005068:	482b      	ldr	r0, [pc, #172]	@ (8005118 <etharp_find_entry+0x2e0>)
 800506a:	f009 fecb 	bl	800ee04 <iprintf>
    etharp_free_entry(i);
 800506e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fe06 	bl	8004c84 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005078:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800507c:	2b09      	cmp	r3, #9
 800507e:	dd06      	ble.n	800508e <etharp_find_entry+0x256>
 8005080:	4b23      	ldr	r3, [pc, #140]	@ (8005110 <etharp_find_entry+0x2d8>)
 8005082:	f240 1283 	movw	r2, #387	@ 0x183
 8005086:	4926      	ldr	r1, [pc, #152]	@ (8005120 <etharp_find_entry+0x2e8>)
 8005088:	4823      	ldr	r0, [pc, #140]	@ (8005118 <etharp_find_entry+0x2e0>)
 800508a:	f009 febb 	bl	800ee04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800508e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005092:	491e      	ldr	r1, [pc, #120]	@ (800510c <etharp_find_entry+0x2d4>)
 8005094:	4613      	mov	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	440b      	add	r3, r1
 800509e:	3314      	adds	r3, #20
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <etharp_find_entry+0x27c>
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <etharp_find_entry+0x2d8>)
 80050a8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80050ac:	491d      	ldr	r1, [pc, #116]	@ (8005124 <etharp_find_entry+0x2ec>)
 80050ae:	481a      	ldr	r0, [pc, #104]	@ (8005118 <etharp_find_entry+0x2e0>)
 80050b0:	f009 fea8 	bl	800ee04 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80050ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	4812      	ldr	r0, [pc, #72]	@ (800510c <etharp_find_entry+0x2d4>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4413      	add	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4403      	add	r3, r0
 80050ce:	3304      	adds	r3, #4
 80050d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80050d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050d6:	490d      	ldr	r1, [pc, #52]	@ (800510c <etharp_find_entry+0x2d4>)
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	440b      	add	r3, r1
 80050e2:	3312      	adds	r3, #18
 80050e4:	2200      	movs	r2, #0
 80050e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80050e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050ec:	4907      	ldr	r1, [pc, #28]	@ (800510c <etharp_find_entry+0x2d4>)
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	3308      	adds	r3, #8
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80050fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3728      	adds	r7, #40	@ 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20004d58 	.word	0x20004d58
 8005110:	08010024 	.word	0x08010024
 8005114:	08010094 	.word	0x08010094
 8005118:	080100d4 	.word	0x080100d4
 800511c:	080100fc 	.word	0x080100fc
 8005120:	08010114 	.word	0x08010114
 8005124:	08010128 	.word	0x08010128

08005128 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800513c:	2b06      	cmp	r3, #6
 800513e:	d006      	beq.n	800514e <etharp_update_arp_entry+0x26>
 8005140:	4b48      	ldr	r3, [pc, #288]	@ (8005264 <etharp_update_arp_entry+0x13c>)
 8005142:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8005146:	4948      	ldr	r1, [pc, #288]	@ (8005268 <etharp_update_arp_entry+0x140>)
 8005148:	4848      	ldr	r0, [pc, #288]	@ (800526c <etharp_update_arp_entry+0x144>)
 800514a:	f009 fe5b 	bl	800ee04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d012      	beq.n	800517a <etharp_update_arp_entry+0x52>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	4618      	mov	r0, r3
 8005164:	f001 f9ea 	bl	800653c <ip4_addr_isbroadcast_u32>
 8005168:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800516a:	2b00      	cmp	r3, #0
 800516c:	d105      	bne.n	800517a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005176:	2be0      	cmp	r3, #224	@ 0xe0
 8005178:	d102      	bne.n	8005180 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800517a:	f06f 030f 	mvn.w	r3, #15
 800517e:	e06c      	b.n	800525a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4619      	mov	r1, r3
 8005186:	68b8      	ldr	r0, [r7, #8]
 8005188:	f7ff fe56 	bl	8004e38 <etharp_find_entry>
 800518c:	4603      	mov	r3, r0
 800518e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8005190:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005194:	2b00      	cmp	r3, #0
 8005196:	da02      	bge.n	800519e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8005198:	8afb      	ldrh	r3, [r7, #22]
 800519a:	b25b      	sxtb	r3, r3
 800519c:	e05d      	b.n	800525a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800519e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80051a2:	4933      	ldr	r1, [pc, #204]	@ (8005270 <etharp_update_arp_entry+0x148>)
 80051a4:	4613      	mov	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4413      	add	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	440b      	add	r3, r1
 80051ae:	3314      	adds	r3, #20
 80051b0:	2202      	movs	r2, #2
 80051b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80051b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80051b8:	492d      	ldr	r1, [pc, #180]	@ (8005270 <etharp_update_arp_entry+0x148>)
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	440b      	add	r3, r1
 80051c4:	3308      	adds	r3, #8
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80051ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	3308      	adds	r3, #8
 80051d8:	4a25      	ldr	r2, [pc, #148]	@ (8005270 <etharp_update_arp_entry+0x148>)
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	2206      	movs	r2, #6
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f009 ff25 	bl	800f032 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80051e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80051ec:	4920      	ldr	r1, [pc, #128]	@ (8005270 <etharp_update_arp_entry+0x148>)
 80051ee:	4613      	mov	r3, r2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	440b      	add	r3, r1
 80051f8:	3312      	adds	r3, #18
 80051fa:	2200      	movs	r2, #0
 80051fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80051fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005202:	491b      	ldr	r1, [pc, #108]	@ (8005270 <etharp_update_arp_entry+0x148>)
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	440b      	add	r3, r1
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d021      	beq.n	8005258 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8005214:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005218:	4915      	ldr	r1, [pc, #84]	@ (8005270 <etharp_update_arp_entry+0x148>)
 800521a:	4613      	mov	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	440b      	add	r3, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8005228:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800522c:	4910      	ldr	r1, [pc, #64]	@ (8005270 <etharp_update_arp_entry+0x148>)
 800522e:	4613      	mov	r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8005242:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6939      	ldr	r1, [r7, #16]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fcf3 	bl	8005c38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8005252:	6938      	ldr	r0, [r7, #16]
 8005254:	f003 fb08 	bl	8008868 <pbuf_free>
  }
  return ERR_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	08010024 	.word	0x08010024
 8005268:	08010154 	.word	0x08010154
 800526c:	080100d4 	.word	0x080100d4
 8005270:	20004d58 	.word	0x20004d58

08005274 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e01e      	b.n	80052c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8005282:	4913      	ldr	r1, [pc, #76]	@ (80052d0 <etharp_cleanup_netif+0x5c>)
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3314      	adds	r3, #20
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00e      	beq.n	80052ba <etharp_cleanup_netif+0x46>
 800529c:	490c      	ldr	r1, [pc, #48]	@ (80052d0 <etharp_cleanup_netif+0x5c>)
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4613      	mov	r3, r2
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	440b      	add	r3, r1
 80052aa:	3308      	adds	r3, #8
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d102      	bne.n	80052ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fce5 	bl	8004c84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b09      	cmp	r3, #9
 80052c4:	dddd      	ble.n	8005282 <etharp_cleanup_netif+0xe>
    }
  }
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20004d58 	.word	0x20004d58

080052d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80052d4:	b5b0      	push	{r4, r5, r7, lr}
 80052d6:	b08a      	sub	sp, #40	@ 0x28
 80052d8:	af04      	add	r7, sp, #16
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <etharp_input+0x20>
 80052e4:	4b3d      	ldr	r3, [pc, #244]	@ (80053dc <etharp_input+0x108>)
 80052e6:	f240 228a 	movw	r2, #650	@ 0x28a
 80052ea:	493d      	ldr	r1, [pc, #244]	@ (80053e0 <etharp_input+0x10c>)
 80052ec:	483d      	ldr	r0, [pc, #244]	@ (80053e4 <etharp_input+0x110>)
 80052ee:	f009 fd89 	bl	800ee04 <iprintf>
 80052f2:	e06f      	b.n	80053d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005304:	d10c      	bne.n	8005320 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800530a:	2b06      	cmp	r3, #6
 800530c:	d108      	bne.n	8005320 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005312:	2b04      	cmp	r3, #4
 8005314:	d104      	bne.n	8005320 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	885b      	ldrh	r3, [r3, #2]
 800531a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800531c:	2b08      	cmp	r3, #8
 800531e:	d003      	beq.n	8005328 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f003 faa1 	bl	8008868 <pbuf_free>
    return;
 8005326:	e055      	b.n	80053d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	330e      	adds	r3, #14
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	3318      	adds	r3, #24
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	3304      	adds	r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <etharp_input+0x74>
    for_us = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
 8005346:	e009      	b.n	800535c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	3304      	adds	r3, #4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <etharp_input+0x98>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <etharp_input+0x9a>
 800536c:	2302      	movs	r3, #2
 800536e:	f107 010c 	add.w	r1, r7, #12
 8005372:	6838      	ldr	r0, [r7, #0]
 8005374:	f7ff fed8 	bl	8005128 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	88db      	ldrh	r3, [r3, #6]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005382:	d003      	beq.n	800538c <etharp_input+0xb8>
 8005384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005388:	d01e      	beq.n	80053c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800538a:	e020      	b.n	80053ce <etharp_input+0xfa>
      if (for_us) {
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01c      	beq.n	80053cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80053ac:	2102      	movs	r1, #2
 80053ae:	9103      	str	r1, [sp, #12]
 80053b0:	f107 010c 	add.w	r1, r7, #12
 80053b4:	9102      	str	r1, [sp, #8]
 80053b6:	9201      	str	r2, [sp, #4]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	462b      	mov	r3, r5
 80053bc:	4622      	mov	r2, r4
 80053be:	4601      	mov	r1, r0
 80053c0:	6838      	ldr	r0, [r7, #0]
 80053c2:	f000 faeb 	bl	800599c <etharp_raw>
      break;
 80053c6:	e001      	b.n	80053cc <etharp_input+0xf8>
      break;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <etharp_input+0xfa>
      break;
 80053cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f003 fa4a 	bl	8008868 <pbuf_free>
}
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bdb0      	pop	{r4, r5, r7, pc}
 80053da:	bf00      	nop
 80053dc:	08010024 	.word	0x08010024
 80053e0:	080101ac 	.word	0x080101ac
 80053e4:	080100d4 	.word	0x080100d4

080053e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80053f6:	79fa      	ldrb	r2, [r7, #7]
 80053f8:	4944      	ldr	r1, [pc, #272]	@ (800550c <etharp_output_to_arp_index+0x124>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	440b      	add	r3, r1
 8005404:	3314      	adds	r3, #20
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d806      	bhi.n	800541a <etharp_output_to_arp_index+0x32>
 800540c:	4b40      	ldr	r3, [pc, #256]	@ (8005510 <etharp_output_to_arp_index+0x128>)
 800540e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8005412:	4940      	ldr	r1, [pc, #256]	@ (8005514 <etharp_output_to_arp_index+0x12c>)
 8005414:	4840      	ldr	r0, [pc, #256]	@ (8005518 <etharp_output_to_arp_index+0x130>)
 8005416:	f009 fcf5 	bl	800ee04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800541a:	79fa      	ldrb	r2, [r7, #7]
 800541c:	493b      	ldr	r1, [pc, #236]	@ (800550c <etharp_output_to_arp_index+0x124>)
 800541e:	4613      	mov	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4413      	add	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	440b      	add	r3, r1
 8005428:	3314      	adds	r3, #20
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d153      	bne.n	80054d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005430:	79fa      	ldrb	r2, [r7, #7]
 8005432:	4936      	ldr	r1, [pc, #216]	@ (800550c <etharp_output_to_arp_index+0x124>)
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	3312      	adds	r3, #18
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8005446:	d919      	bls.n	800547c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005448:	79fa      	ldrb	r2, [r7, #7]
 800544a:	4613      	mov	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4a2e      	ldr	r2, [pc, #184]	@ (800550c <etharp_output_to_arp_index+0x124>)
 8005454:	4413      	add	r3, r2
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fb4c 	bl	8005af8 <etharp_request>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d138      	bne.n	80054d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005466:	79fa      	ldrb	r2, [r7, #7]
 8005468:	4928      	ldr	r1, [pc, #160]	@ (800550c <etharp_output_to_arp_index+0x124>)
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	3314      	adds	r3, #20
 8005476:	2203      	movs	r2, #3
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e02d      	b.n	80054d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800547c:	79fa      	ldrb	r2, [r7, #7]
 800547e:	4923      	ldr	r1, [pc, #140]	@ (800550c <etharp_output_to_arp_index+0x124>)
 8005480:	4613      	mov	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	3312      	adds	r3, #18
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8005492:	d321      	bcc.n	80054d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005494:	79fa      	ldrb	r2, [r7, #7]
 8005496:	4613      	mov	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4a1b      	ldr	r2, [pc, #108]	@ (800550c <etharp_output_to_arp_index+0x124>)
 80054a0:	4413      	add	r3, r2
 80054a2:	1d19      	adds	r1, r3, #4
 80054a4:	79fa      	ldrb	r2, [r7, #7]
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	3308      	adds	r3, #8
 80054b0:	4a16      	ldr	r2, [pc, #88]	@ (800550c <etharp_output_to_arp_index+0x124>)
 80054b2:	4413      	add	r3, r2
 80054b4:	3304      	adds	r3, #4
 80054b6:	461a      	mov	r2, r3
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fafb 	bl	8005ab4 <etharp_request_dst>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80054c4:	79fa      	ldrb	r2, [r7, #7]
 80054c6:	4911      	ldr	r1, [pc, #68]	@ (800550c <etharp_output_to_arp_index+0x124>)
 80054c8:	4613      	mov	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	3314      	adds	r3, #20
 80054d4:	2203      	movs	r2, #3
 80054d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80054de:	79fa      	ldrb	r2, [r7, #7]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	3308      	adds	r3, #8
 80054ea:	4a08      	ldr	r2, [pc, #32]	@ (800550c <etharp_output_to_arp_index+0x124>)
 80054ec:	4413      	add	r3, r2
 80054ee:	3304      	adds	r3, #4
 80054f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054f4:	9200      	str	r2, [sp, #0]
 80054f6:	460a      	mov	r2, r1
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fb9c 	bl	8005c38 <ethernet_output>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20004d58 	.word	0x20004d58
 8005510:	08010024 	.word	0x08010024
 8005514:	080101cc 	.word	0x080101cc
 8005518:	080100d4 	.word	0x080100d4

0800551c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	@ 0x28
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <etharp_output+0x24>
 8005532:	4b73      	ldr	r3, [pc, #460]	@ (8005700 <etharp_output+0x1e4>)
 8005534:	f240 321e 	movw	r2, #798	@ 0x31e
 8005538:	4972      	ldr	r1, [pc, #456]	@ (8005704 <etharp_output+0x1e8>)
 800553a:	4873      	ldr	r0, [pc, #460]	@ (8005708 <etharp_output+0x1ec>)
 800553c:	f009 fc62 	bl	800ee04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <etharp_output+0x38>
 8005546:	4b6e      	ldr	r3, [pc, #440]	@ (8005700 <etharp_output+0x1e4>)
 8005548:	f240 321f 	movw	r2, #799	@ 0x31f
 800554c:	496f      	ldr	r1, [pc, #444]	@ (800570c <etharp_output+0x1f0>)
 800554e:	486e      	ldr	r0, [pc, #440]	@ (8005708 <etharp_output+0x1ec>)
 8005550:	f009 fc58 	bl	800ee04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <etharp_output+0x4c>
 800555a:	4b69      	ldr	r3, [pc, #420]	@ (8005700 <etharp_output+0x1e4>)
 800555c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005560:	496b      	ldr	r1, [pc, #428]	@ (8005710 <etharp_output+0x1f4>)
 8005562:	4869      	ldr	r0, [pc, #420]	@ (8005708 <etharp_output+0x1ec>)
 8005564:	f009 fc4e 	bl	800ee04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 ffe4 	bl	800653c <ip4_addr_isbroadcast_u32>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800557a:	4b66      	ldr	r3, [pc, #408]	@ (8005714 <etharp_output+0x1f8>)
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e0af      	b.n	80056e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005588:	2be0      	cmp	r3, #224	@ 0xe0
 800558a:	d118      	bne.n	80055be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800558c:	2301      	movs	r3, #1
 800558e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005590:	2300      	movs	r3, #0
 8005592:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005594:	235e      	movs	r3, #94	@ 0x5e
 8005596:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3301      	adds	r3, #1
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3302      	adds	r3, #2
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3303      	adds	r3, #3
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80055b6:	f107 0310 	add.w	r3, r7, #16
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	e090      	b.n	80056e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3304      	adds	r3, #4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	405a      	eors	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3308      	adds	r3, #8
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d012      	beq.n	80055fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80055dc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	330c      	adds	r3, #12
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	330c      	adds	r3, #12
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e002      	b.n	80055fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80055f6:	f06f 0303 	mvn.w	r3, #3
 80055fa:	e07d      	b.n	80056f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80055fc:	4b46      	ldr	r3, [pc, #280]	@ (8005718 <etharp_output+0x1fc>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	4619      	mov	r1, r3
 8005602:	4a46      	ldr	r2, [pc, #280]	@ (800571c <etharp_output+0x200>)
 8005604:	460b      	mov	r3, r1
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	440b      	add	r3, r1
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	3314      	adds	r3, #20
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d925      	bls.n	8005662 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8005616:	4b40      	ldr	r3, [pc, #256]	@ (8005718 <etharp_output+0x1fc>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	4a3f      	ldr	r2, [pc, #252]	@ (800571c <etharp_output+0x200>)
 800561e:	460b      	mov	r3, r1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	440b      	add	r3, r1
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	3308      	adds	r3, #8
 800562a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	429a      	cmp	r2, r3
 8005630:	d117      	bne.n	8005662 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b38      	ldr	r3, [pc, #224]	@ (8005718 <etharp_output+0x1fc>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	4937      	ldr	r1, [pc, #220]	@ (800571c <etharp_output+0x200>)
 800563e:	4603      	mov	r3, r0
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4403      	add	r3, r0
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	440b      	add	r3, r1
 8005648:	3304      	adds	r3, #4
 800564a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800564c:	429a      	cmp	r2, r3
 800564e:	d108      	bne.n	8005662 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005650:	4b31      	ldr	r3, [pc, #196]	@ (8005718 <etharp_output+0x1fc>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff fec5 	bl	80053e8 <etharp_output_to_arp_index>
 800565e:	4603      	mov	r3, r0
 8005660:	e04a      	b.n	80056f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]
 8005666:	e031      	b.n	80056cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005668:	7dfa      	ldrb	r2, [r7, #23]
 800566a:	492c      	ldr	r1, [pc, #176]	@ (800571c <etharp_output+0x200>)
 800566c:	4613      	mov	r3, r2
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	3314      	adds	r3, #20
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d923      	bls.n	80056c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800567e:	7dfa      	ldrb	r2, [r7, #23]
 8005680:	4926      	ldr	r1, [pc, #152]	@ (800571c <etharp_output+0x200>)
 8005682:	4613      	mov	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4413      	add	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	440b      	add	r3, r1
 800568c:	3308      	adds	r3, #8
 800568e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d117      	bne.n	80056c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	6819      	ldr	r1, [r3, #0]
 800569a:	7dfa      	ldrb	r2, [r7, #23]
 800569c:	481f      	ldr	r0, [pc, #124]	@ (800571c <etharp_output+0x200>)
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4403      	add	r3, r0
 80056a8:	3304      	adds	r3, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80056ac:	4299      	cmp	r1, r3
 80056ae:	d10a      	bne.n	80056c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80056b0:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <etharp_output+0x1fc>)
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	461a      	mov	r2, r3
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff fe93 	bl	80053e8 <etharp_output_to_arp_index>
 80056c2:	4603      	mov	r3, r0
 80056c4:	e018      	b.n	80056f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	3301      	adds	r3, #1
 80056ca:	75fb      	strb	r3, [r7, #23]
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	2b09      	cmp	r3, #9
 80056d0:	d9ca      	bls.n	8005668 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f822 	bl	8005720 <etharp_query>
 80056dc:	4603      	mov	r3, r0
 80056de:	e00b      	b.n	80056f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80056e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 faa1 	bl	8005c38 <ethernet_output>
 80056f6:	4603      	mov	r3, r0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	08010024 	.word	0x08010024
 8005704:	080101ac 	.word	0x080101ac
 8005708:	080100d4 	.word	0x080100d4
 800570c:	080101fc 	.word	0x080101fc
 8005710:	0801019c 	.word	0x0801019c
 8005714:	08012cf4 	.word	0x08012cf4
 8005718:	20004e48 	.word	0x20004e48
 800571c:	20004d58 	.word	0x20004d58

08005720 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08c      	sub	sp, #48	@ 0x30
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3326      	adds	r3, #38	@ 0x26
 8005730:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8005732:	23ff      	movs	r3, #255	@ 0xff
 8005734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fefa 	bl	800653c <ip4_addr_isbroadcast_u32>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10c      	bne.n	8005768 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005756:	2be0      	cmp	r3, #224	@ 0xe0
 8005758:	d006      	beq.n	8005768 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8005768:	f06f 030f 	mvn.w	r3, #15
 800576c:	e101      	b.n	8005972 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	2101      	movs	r1, #1
 8005772:	68b8      	ldr	r0, [r7, #8]
 8005774:	f7ff fb60 	bl	8004e38 <etharp_find_entry>
 8005778:	4603      	mov	r3, r0
 800577a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800577c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005780:	2b00      	cmp	r3, #0
 8005782:	da02      	bge.n	800578a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8005784:	8a7b      	ldrh	r3, [r7, #18]
 8005786:	b25b      	sxtb	r3, r3
 8005788:	e0f3      	b.n	8005972 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800578a:	8a7b      	ldrh	r3, [r7, #18]
 800578c:	2b7e      	cmp	r3, #126	@ 0x7e
 800578e:	d906      	bls.n	800579e <etharp_query+0x7e>
 8005790:	4b7a      	ldr	r3, [pc, #488]	@ (800597c <etharp_query+0x25c>)
 8005792:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8005796:	497a      	ldr	r1, [pc, #488]	@ (8005980 <etharp_query+0x260>)
 8005798:	487a      	ldr	r0, [pc, #488]	@ (8005984 <etharp_query+0x264>)
 800579a:	f009 fb33 	bl	800ee04 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800579e:	8a7b      	ldrh	r3, [r7, #18]
 80057a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80057a2:	7c7a      	ldrb	r2, [r7, #17]
 80057a4:	4978      	ldr	r1, [pc, #480]	@ (8005988 <etharp_query+0x268>)
 80057a6:	4613      	mov	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	440b      	add	r3, r1
 80057b0:	3314      	adds	r3, #20
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d115      	bne.n	80057e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80057b8:	2301      	movs	r3, #1
 80057ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80057bc:	7c7a      	ldrb	r2, [r7, #17]
 80057be:	4972      	ldr	r1, [pc, #456]	@ (8005988 <etharp_query+0x268>)
 80057c0:	4613      	mov	r3, r2
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	3314      	adds	r3, #20
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80057d0:	7c7a      	ldrb	r2, [r7, #17]
 80057d2:	496d      	ldr	r1, [pc, #436]	@ (8005988 <etharp_query+0x268>)
 80057d4:	4613      	mov	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3308      	adds	r3, #8
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80057e4:	7c7a      	ldrb	r2, [r7, #17]
 80057e6:	4968      	ldr	r1, [pc, #416]	@ (8005988 <etharp_query+0x268>)
 80057e8:	4613      	mov	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	440b      	add	r3, r1
 80057f2:	3314      	adds	r3, #20
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d011      	beq.n	800581e <etharp_query+0xfe>
 80057fa:	7c7a      	ldrb	r2, [r7, #17]
 80057fc:	4962      	ldr	r1, [pc, #392]	@ (8005988 <etharp_query+0x268>)
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	440b      	add	r3, r1
 8005808:	3314      	adds	r3, #20
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d806      	bhi.n	800581e <etharp_query+0xfe>
 8005810:	4b5a      	ldr	r3, [pc, #360]	@ (800597c <etharp_query+0x25c>)
 8005812:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8005816:	495d      	ldr	r1, [pc, #372]	@ (800598c <etharp_query+0x26c>)
 8005818:	485a      	ldr	r0, [pc, #360]	@ (8005984 <etharp_query+0x264>)
 800581a:	f009 faf3 	bl	800ee04 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <etharp_query+0x10a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10c      	bne.n	8005844 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f963 	bl	8005af8 <etharp_request>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <etharp_query+0x124>
      return result;
 800583e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005842:	e096      	b.n	8005972 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <etharp_query+0x138>
 800584a:	4b4c      	ldr	r3, [pc, #304]	@ (800597c <etharp_query+0x25c>)
 800584c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8005850:	494f      	ldr	r1, [pc, #316]	@ (8005990 <etharp_query+0x270>)
 8005852:	484c      	ldr	r0, [pc, #304]	@ (8005984 <etharp_query+0x264>)
 8005854:	f009 fad6 	bl	800ee04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005858:	7c7a      	ldrb	r2, [r7, #17]
 800585a:	494b      	ldr	r1, [pc, #300]	@ (8005988 <etharp_query+0x268>)
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	440b      	add	r3, r1
 8005866:	3314      	adds	r3, #20
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d917      	bls.n	800589e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800586e:	4a49      	ldr	r2, [pc, #292]	@ (8005994 <etharp_query+0x274>)
 8005870:	7c7b      	ldrb	r3, [r7, #17]
 8005872:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005874:	7c7a      	ldrb	r2, [r7, #17]
 8005876:	4613      	mov	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	3308      	adds	r3, #8
 8005880:	4a41      	ldr	r2, [pc, #260]	@ (8005988 <etharp_query+0x268>)
 8005882:	4413      	add	r3, r2
 8005884:	3304      	adds	r3, #4
 8005886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800588a:	9200      	str	r2, [sp, #0]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f9d1 	bl	8005c38 <ethernet_output>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800589c:	e067      	b.n	800596e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800589e:	7c7a      	ldrb	r2, [r7, #17]
 80058a0:	4939      	ldr	r1, [pc, #228]	@ (8005988 <etharp_query+0x268>)
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	3314      	adds	r3, #20
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d15c      	bne.n	800596e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80058bc:	e01c      	b.n	80058f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	895a      	ldrh	r2, [r3, #10]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	891b      	ldrh	r3, [r3, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d10a      	bne.n	80058e0 <etharp_query+0x1c0>
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <etharp_query+0x1c0>
 80058d2:	4b2a      	ldr	r3, [pc, #168]	@ (800597c <etharp_query+0x25c>)
 80058d4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80058d8:	492f      	ldr	r1, [pc, #188]	@ (8005998 <etharp_query+0x278>)
 80058da:	482a      	ldr	r0, [pc, #168]	@ (8005984 <etharp_query+0x264>)
 80058dc:	f009 fa92 	bl	800ee04 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	7b1b      	ldrb	r3, [r3, #12]
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <etharp_query+0x1d2>
        copy_needed = 1;
 80058ec:	2301      	movs	r3, #1
 80058ee:	61bb      	str	r3, [r7, #24]
        break;
 80058f0:	e005      	b.n	80058fe <etharp_query+0x1de>
      }
      p = p->next;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1df      	bne.n	80058be <etharp_query+0x19e>
    }
    if (copy_needed) {
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800590a:	200e      	movs	r0, #14
 800590c:	f003 fa18 	bl	8008d40 <pbuf_clone>
 8005910:	61f8      	str	r0, [r7, #28]
 8005912:	e004      	b.n	800591e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8005918:	69f8      	ldr	r0, [r7, #28]
 800591a:	f003 f845 	bl	80089a8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d021      	beq.n	8005968 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8005924:	7c7a      	ldrb	r2, [r7, #17]
 8005926:	4918      	ldr	r1, [pc, #96]	@ (8005988 <etharp_query+0x268>)
 8005928:	4613      	mov	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8005938:	7c7a      	ldrb	r2, [r7, #17]
 800593a:	4913      	ldr	r1, [pc, #76]	@ (8005988 <etharp_query+0x268>)
 800593c:	4613      	mov	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	440b      	add	r3, r1
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f002 ff8d 	bl	8008868 <pbuf_free>
      }
      arp_table[i].q = p;
 800594e:	7c7a      	ldrb	r2, [r7, #17]
 8005950:	490d      	ldr	r1, [pc, #52]	@ (8005988 <etharp_query+0x268>)
 8005952:	4613      	mov	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4413      	add	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	440b      	add	r3, r1
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005966:	e002      	b.n	800596e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8005968:	23ff      	movs	r3, #255	@ 0xff
 800596a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800596e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005972:	4618      	mov	r0, r3
 8005974:	3728      	adds	r7, #40	@ 0x28
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	08010024 	.word	0x08010024
 8005980:	08010208 	.word	0x08010208
 8005984:	080100d4 	.word	0x080100d4
 8005988:	20004d58 	.word	0x20004d58
 800598c:	08010218 	.word	0x08010218
 8005990:	080101fc 	.word	0x080101fc
 8005994:	20004e48 	.word	0x20004e48
 8005998:	08010240 	.word	0x08010240

0800599c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	@ 0x28
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <etharp_raw+0x26>
 80059b4:	4b3a      	ldr	r3, [pc, #232]	@ (8005aa0 <etharp_raw+0x104>)
 80059b6:	f240 4257 	movw	r2, #1111	@ 0x457
 80059ba:	493a      	ldr	r1, [pc, #232]	@ (8005aa4 <etharp_raw+0x108>)
 80059bc:	483a      	ldr	r0, [pc, #232]	@ (8005aa8 <etharp_raw+0x10c>)
 80059be:	f009 fa21 	bl	800ee04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80059c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80059c6:	211c      	movs	r1, #28
 80059c8:	200e      	movs	r0, #14
 80059ca:	f002 fc69 	bl	80082a0 <pbuf_alloc>
 80059ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	e05d      	b.n	8005a98 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	895b      	ldrh	r3, [r3, #10]
 80059e0:	2b1b      	cmp	r3, #27
 80059e2:	d806      	bhi.n	80059f2 <etharp_raw+0x56>
 80059e4:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa0 <etharp_raw+0x104>)
 80059e6:	f240 4262 	movw	r2, #1122	@ 0x462
 80059ea:	4930      	ldr	r1, [pc, #192]	@ (8005aac <etharp_raw+0x110>)
 80059ec:	482e      	ldr	r0, [pc, #184]	@ (8005aa8 <etharp_raw+0x10c>)
 80059ee:	f009 fa09 	bl	800ee04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80059f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff f912 	bl	8004c24 <lwip_htons>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d006      	beq.n	8005a20 <etharp_raw+0x84>
 8005a12:	4b23      	ldr	r3, [pc, #140]	@ (8005aa0 <etharp_raw+0x104>)
 8005a14:	f240 4269 	movw	r2, #1129	@ 0x469
 8005a18:	4925      	ldr	r1, [pc, #148]	@ (8005ab0 <etharp_raw+0x114>)
 8005a1a:	4823      	ldr	r0, [pc, #140]	@ (8005aa8 <etharp_raw+0x10c>)
 8005a1c:	f009 f9f2 	bl	800ee04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	3308      	adds	r3, #8
 8005a24:	2206      	movs	r2, #6
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f009 fb02 	bl	800f032 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3312      	adds	r3, #18
 8005a32:	2206      	movs	r2, #6
 8005a34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a36:	4618      	mov	r0, r3
 8005a38:	f009 fafb 	bl	800f032 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	330e      	adds	r3, #14
 8005a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3318      	adds	r3, #24
 8005a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f042 0201 	orr.w	r2, r2, #1
 8005a5c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f042 0208 	orr.w	r2, r2, #8
 8005a66:	709a      	strb	r2, [r3, #2]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2206      	movs	r2, #6
 8005a70:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2204      	movs	r2, #4
 8005a76:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005a78:	f640 0306 	movw	r3, #2054	@ 0x806
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f8d7 	bl	8005c38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005a8a:	69b8      	ldr	r0, [r7, #24]
 8005a8c:	f002 feec 	bl	8008868 <pbuf_free>
  p = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8005a94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	08010024 	.word	0x08010024
 8005aa4:	080101ac 	.word	0x080101ac
 8005aa8:	080100d4 	.word	0x080100d4
 8005aac:	0801025c 	.word	0x0801025c
 8005ab0:	08010290 	.word	0x08010290

08005ab4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af04      	add	r7, sp, #16
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	9203      	str	r2, [sp, #12]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	9202      	str	r2, [sp, #8]
 8005ad8:	4a06      	ldr	r2, [pc, #24]	@ (8005af4 <etharp_request_dst+0x40>)
 8005ada:	9201      	str	r2, [sp, #4]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	4603      	mov	r3, r0
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff ff5a 	bl	800599c <etharp_raw>
 8005ae8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	08012cfc 	.word	0x08012cfc

08005af8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8005b02:	4a05      	ldr	r2, [pc, #20]	@ (8005b18 <etharp_request+0x20>)
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff ffd4 	bl	8005ab4 <etharp_request_dst>
 8005b0c:	4603      	mov	r3, r0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	08012cf4 	.word	0x08012cf4

08005b1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8005b26:	230e      	movs	r3, #14
 8005b28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	895b      	ldrh	r3, [r3, #10]
 8005b2e:	2b0e      	cmp	r3, #14
 8005b30:	d96e      	bls.n	8005c10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	7bdb      	ldrb	r3, [r3, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b40:	3301      	adds	r3, #1
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	7b1a      	ldrb	r2, [r3, #12]
 8005b52:	7b5b      	ldrb	r3, [r3, #13]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	4313      	orrs	r3, r2
 8005b58:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d023      	beq.n	8005bae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10f      	bne.n	8005b8e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d11b      	bne.n	8005bae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005b7a:	2b5e      	cmp	r3, #94	@ 0x5e
 8005b7c:	d117      	bne.n	8005bae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7b5b      	ldrb	r3, [r3, #13]
 8005b82:	f043 0310 	orr.w	r3, r3, #16
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	735a      	strb	r2, [r3, #13]
 8005b8c:	e00f      	b.n	8005bae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2206      	movs	r2, #6
 8005b92:	4928      	ldr	r1, [pc, #160]	@ (8005c34 <ethernet_input+0x118>)
 8005b94:	4618      	mov	r0, r3
 8005b96:	f009 f9ac 	bl	800eef2 <memcmp>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	7b5b      	ldrb	r3, [r3, #13]
 8005ba4:	f043 0308 	orr.w	r3, r3, #8
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8005bae:	89fb      	ldrh	r3, [r7, #14]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d003      	beq.n	8005bbc <ethernet_input+0xa0>
 8005bb4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8005bb8:	d014      	beq.n	8005be4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8005bba:	e032      	b.n	8005c22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d024      	beq.n	8005c14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005bca:	8afb      	ldrh	r3, [r7, #22]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f002 fdc4 	bl	800875c <pbuf_remove_header>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d11e      	bne.n	8005c18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fab1 	bl	8006144 <ip4_input>
      break;
 8005be2:	e013      	b.n	8005c0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d014      	beq.n	8005c1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8005bf2:	8afb      	ldrh	r3, [r7, #22]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 fdb0 	bl	800875c <pbuf_remove_header>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10e      	bne.n	8005c20 <ethernet_input+0x104>
        etharp_input(p, netif);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fb65 	bl	80052d4 <etharp_input>
      break;
 8005c0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e00c      	b.n	8005c2a <ethernet_input+0x10e>
    goto free_and_return;
 8005c10:	bf00      	nop
 8005c12:	e006      	b.n	8005c22 <ethernet_input+0x106>
        goto free_and_return;
 8005c14:	bf00      	nop
 8005c16:	e004      	b.n	8005c22 <ethernet_input+0x106>
        goto free_and_return;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <ethernet_input+0x106>
        goto free_and_return;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <ethernet_input+0x106>
        goto free_and_return;
 8005c20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f002 fe20 	bl	8008868 <pbuf_free>
  return ERR_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	08012cf4 	.word	0x08012cf4

08005c38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8005c46:	8c3b      	ldrh	r3, [r7, #32]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe ffeb 	bl	8004c24 <lwip_htons>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8005c52:	210e      	movs	r1, #14
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	f002 fd71 	bl	800873c <pbuf_add_header>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d125      	bne.n	8005cac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	8afa      	ldrh	r2, [r7, #22]
 8005c6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2206      	movs	r2, #6
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f009 f9dd 	bl	800f032 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3306      	adds	r3, #6
 8005c7c:	2206      	movs	r2, #6
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f009 f9d6 	bl	800f032 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d006      	beq.n	8005c9e <ethernet_output+0x66>
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <ethernet_output+0x84>)
 8005c92:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8005c96:	490a      	ldr	r1, [pc, #40]	@ (8005cc0 <ethernet_output+0x88>)
 8005c98:	480a      	ldr	r0, [pc, #40]	@ (8005cc4 <ethernet_output+0x8c>)
 8005c9a:	f009 f8b3 	bl	800ee04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	4798      	blx	r3
 8005ca8:	4603      	mov	r3, r0
 8005caa:	e002      	b.n	8005cb2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8005cac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8005cae:	f06f 0301 	mvn.w	r3, #1
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	080102d4 	.word	0x080102d4
 8005cc0:	08010344 	.word	0x08010344
 8005cc4:	08010378 	.word	0x08010378

08005cc8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	@ 0x38
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8005cd2:	4b79      	ldr	r3, [pc, #484]	@ (8005eb8 <icmp_input+0x1f0>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8005ce8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cea:	2b13      	cmp	r3, #19
 8005cec:	f240 80cd 	bls.w	8005e8a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	895b      	ldrh	r3, [r3, #10]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	f240 80ca 	bls.w	8005e8e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8005d04:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80b7 	beq.w	8005e7c <icmp_input+0x1b4>
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	f040 80b7 	bne.w	8005e82 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8005d14:	4b69      	ldr	r3, [pc, #420]	@ (8005ebc <icmp_input+0x1f4>)
 8005d16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005d18:	4b67      	ldr	r3, [pc, #412]	@ (8005eb8 <icmp_input+0x1f0>)
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d20:	2be0      	cmp	r3, #224	@ 0xe0
 8005d22:	f000 80bb 	beq.w	8005e9c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005d26:	4b64      	ldr	r3, [pc, #400]	@ (8005eb8 <icmp_input+0x1f0>)
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	4a63      	ldr	r2, [pc, #396]	@ (8005eb8 <icmp_input+0x1f0>)
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fc03 	bl	800653c <ip4_addr_isbroadcast_u32>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 80b1 	bne.w	8005ea0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	891b      	ldrh	r3, [r3, #8]
 8005d42:	2b07      	cmp	r3, #7
 8005d44:	f240 80a5 	bls.w	8005e92 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005d48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d4a:	330e      	adds	r3, #14
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f002 fcf4 	bl	800873c <pbuf_add_header>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d04b      	beq.n	8005df2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	891a      	ldrh	r2, [r3, #8]
 8005d5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d60:	4413      	add	r3, r2
 8005d62:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	891b      	ldrh	r3, [r3, #8]
 8005d68:	8b7a      	ldrh	r2, [r7, #26]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	f0c0 809a 	bcc.w	8005ea4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8005d70:	8b7b      	ldrh	r3, [r7, #26]
 8005d72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005d76:	4619      	mov	r1, r3
 8005d78:	200e      	movs	r0, #14
 8005d7a:	f002 fa91 	bl	80082a0 <pbuf_alloc>
 8005d7e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8090 	beq.w	8005ea8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	895b      	ldrh	r3, [r3, #10]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d90:	3308      	adds	r3, #8
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d203      	bcs.n	8005d9e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f002 fd66 	bl	8008868 <pbuf_free>
          goto icmperr;
 8005d9c:	e085      	b.n	8005eaa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005da6:	4618      	mov	r0, r3
 8005da8:	f009 f943 	bl	800f032 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8005dac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005dae:	4619      	mov	r1, r3
 8005db0:	6978      	ldr	r0, [r7, #20]
 8005db2:	f002 fcd3 	bl	800875c <pbuf_remove_header>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d009      	beq.n	8005dd0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005dbc:	4b40      	ldr	r3, [pc, #256]	@ (8005ec0 <icmp_input+0x1f8>)
 8005dbe:	22b6      	movs	r2, #182	@ 0xb6
 8005dc0:	4940      	ldr	r1, [pc, #256]	@ (8005ec4 <icmp_input+0x1fc>)
 8005dc2:	4841      	ldr	r0, [pc, #260]	@ (8005ec8 <icmp_input+0x200>)
 8005dc4:	f009 f81e 	bl	800ee04 <iprintf>
          pbuf_free(r);
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f002 fd4d 	bl	8008868 <pbuf_free>
          goto icmperr;
 8005dce:	e06c      	b.n	8005eaa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	6978      	ldr	r0, [r7, #20]
 8005dd4:	f002 fe70 	bl	8008ab8 <pbuf_copy>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f002 fd42 	bl	8008868 <pbuf_free>
          goto icmperr;
 8005de4:	e061      	b.n	8005eaa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f002 fd3e 	bl	8008868 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	e00f      	b.n	8005e12 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005df2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005df4:	330e      	adds	r3, #14
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f002 fcaf 	bl	800875c <pbuf_remove_header>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d006      	beq.n	8005e12 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005e04:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec0 <icmp_input+0x1f8>)
 8005e06:	22c7      	movs	r2, #199	@ 0xc7
 8005e08:	4930      	ldr	r1, [pc, #192]	@ (8005ecc <icmp_input+0x204>)
 8005e0a:	482f      	ldr	r0, [pc, #188]	@ (8005ec8 <icmp_input+0x200>)
 8005e0c:	f008 fffa 	bl	800ee04 <iprintf>
          goto icmperr;
 8005e10:	e04b      	b.n	8005eaa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8005e18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 fc8d 	bl	800873c <pbuf_add_header>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d12b      	bne.n	8005e80 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005e36:	4b20      	ldr	r3, [pc, #128]	@ (8005eb8 <icmp_input+0x1f0>)
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2200      	movs	r2, #0
 8005e48:	709a      	strb	r2, [r3, #2]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	22ff      	movs	r2, #255	@ 0xff
 8005e52:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	729a      	strb	r2, [r3, #10]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9302      	str	r3, [sp, #8]
 8005e62:	2301      	movs	r3, #1
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	23ff      	movs	r3, #255	@ 0xff
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	69f9      	ldr	r1, [r7, #28]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fa8b 	bl	800638c <ip4_output_if>
 8005e76:	4603      	mov	r3, r0
 8005e78:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8005e7a:	e001      	b.n	8005e80 <icmp_input+0x1b8>
      break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <icmp_input+0x1ba>
      break;
 8005e80:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f002 fcf0 	bl	8008868 <pbuf_free>
  return;
 8005e88:	e013      	b.n	8005eb2 <icmp_input+0x1ea>
    goto lenerr;
 8005e8a:	bf00      	nop
 8005e8c:	e002      	b.n	8005e94 <icmp_input+0x1cc>
    goto lenerr;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <icmp_input+0x1cc>
        goto lenerr;
 8005e92:	bf00      	nop
lenerr:
  pbuf_free(p);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f002 fce7 	bl	8008868 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005e9a:	e00a      	b.n	8005eb2 <icmp_input+0x1ea>
        goto icmperr;
 8005e9c:	bf00      	nop
 8005e9e:	e004      	b.n	8005eaa <icmp_input+0x1e2>
        goto icmperr;
 8005ea0:	bf00      	nop
 8005ea2:	e002      	b.n	8005eaa <icmp_input+0x1e2>
          goto icmperr;
 8005ea4:	bf00      	nop
 8005ea6:	e000      	b.n	8005eaa <icmp_input+0x1e2>
          goto icmperr;
 8005ea8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 fcdc 	bl	8008868 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005eb0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8005eb2:	3728      	adds	r7, #40	@ 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20004e4c 	.word	0x20004e4c
 8005ebc:	20004e60 	.word	0x20004e60
 8005ec0:	080103a0 	.word	0x080103a0
 8005ec4:	08010410 	.word	0x08010410
 8005ec8:	08010448 	.word	0x08010448
 8005ecc:	08010470 	.word	0x08010470

08005ed0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2103      	movs	r1, #3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f814 	bl	8005f10 <icmp_send_response>
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	461a      	mov	r2, r3
 8005f00:	210b      	movs	r1, #11
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f804 	bl	8005f10 <icmp_send_response>
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	@ 0x30
 8005f14:	af04      	add	r7, sp, #16
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005f20:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005f24:	2124      	movs	r1, #36	@ 0x24
 8005f26:	2022      	movs	r0, #34	@ 0x22
 8005f28:	f002 f9ba 	bl	80082a0 <pbuf_alloc>
 8005f2c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d04c      	beq.n	8005fce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	895b      	ldrh	r3, [r3, #10]
 8005f38:	2b23      	cmp	r3, #35	@ 0x23
 8005f3a:	d806      	bhi.n	8005f4a <icmp_send_response+0x3a>
 8005f3c:	4b26      	ldr	r3, [pc, #152]	@ (8005fd8 <icmp_send_response+0xc8>)
 8005f3e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8005f42:	4926      	ldr	r1, [pc, #152]	@ (8005fdc <icmp_send_response+0xcc>)
 8005f44:	4826      	ldr	r0, [pc, #152]	@ (8005fe0 <icmp_send_response+0xd0>)
 8005f46:	f008 ff5d 	bl	800ee04 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	78ba      	ldrb	r2, [r7, #2]
 8005f60:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	711a      	strb	r2, [r3, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	719a      	strb	r2, [r3, #6]
 8005f72:	2200      	movs	r2, #0
 8005f74:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f103 0008 	add.w	r0, r3, #8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	221c      	movs	r2, #28
 8005f84:	4619      	mov	r1, r3
 8005f86:	f009 f854 	bl	800f032 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f83b 	bl	8006010 <ip4_route>
 8005f9a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d011      	beq.n	8005fc6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	709a      	strb	r2, [r3, #2]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005fac:	f107 020c 	add.w	r2, r7, #12
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	9302      	str	r3, [sp, #8]
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	23ff      	movs	r3, #255	@ 0xff
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	69f8      	ldr	r0, [r7, #28]
 8005fc2:	f000 f9e3 	bl	800638c <ip4_output_if>
  }
  pbuf_free(q);
 8005fc6:	69f8      	ldr	r0, [r7, #28]
 8005fc8:	f002 fc4e 	bl	8008868 <pbuf_free>
 8005fcc:	e000      	b.n	8005fd0 <icmp_send_response+0xc0>
    return;
 8005fce:	bf00      	nop
}
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	080103a0 	.word	0x080103a0
 8005fdc:	080104a4 	.word	0x080104a4
 8005fe0:	08010448 	.word	0x08010448

08005fe4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005fee:	f001 f9eb 	bl	80073c8 <mem_init>
  memp_init();
 8005ff2:	f001 fced 	bl	80079d0 <memp_init>
  pbuf_init();
  netif_init();
 8005ff6:	f001 fdeb 	bl	8007bd0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005ffa:	f008 f975 	bl	800e2e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005ffe:	f002 fed1 	bl	8008da4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006002:	f008 f8e7 	bl	800e1d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8006018:	4b33      	ldr	r3, [pc, #204]	@ (80060e8 <ip4_route+0xd8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e036      	b.n	800608e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d02b      	beq.n	8006088 <ip4_route+0x78>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d022      	beq.n	8006088 <ip4_route+0x78>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3304      	adds	r3, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01d      	beq.n	8006088 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3304      	adds	r3, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	405a      	eors	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3308      	adds	r3, #8
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	e038      	b.n	80060da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d108      	bne.n	8006088 <ip4_route+0x78>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	330c      	adds	r3, #12
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d101      	bne.n	8006088 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	e028      	b.n	80060da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1c5      	bne.n	8006020 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006094:	4b15      	ldr	r3, [pc, #84]	@ (80060ec <ip4_route+0xdc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01a      	beq.n	80060d2 <ip4_route+0xc2>
 800609c:	4b13      	ldr	r3, [pc, #76]	@ (80060ec <ip4_route+0xdc>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d012      	beq.n	80060d2 <ip4_route+0xc2>
 80060ac:	4b0f      	ldr	r3, [pc, #60]	@ (80060ec <ip4_route+0xdc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80060bc:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <ip4_route+0xdc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3304      	adds	r3, #4
 80060c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80060d0:	d101      	bne.n	80060d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e001      	b.n	80060da <ip4_route+0xca>
  }

  return netif_default;
 80060d6:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <ip4_route+0xdc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20007d68 	.word	0x20007d68
 80060ec:	20007d6c 	.word	0x20007d6c

080060f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d016      	beq.n	8006136 <ip4_input_accept+0x46>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d011      	beq.n	8006136 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006112:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <ip4_input_accept+0x50>)
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3304      	adds	r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d008      	beq.n	8006132 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <ip4_input_accept+0x50>)
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fa08 	bl	800653c <ip4_addr_isbroadcast_u32>
 800612c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20004e4c 	.word	0x20004e4c

08006144 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b04      	cmp	r3, #4
 800615e:	d004      	beq.n	800616a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f002 fb81 	bl	8008868 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e107      	b.n	800637a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	b2db      	uxtb	r3, r3
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	b2db      	uxtb	r3, r3
 8006178:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	885b      	ldrh	r3, [r3, #2]
 800617e:	b29b      	uxth	r3, r3
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fd4f 	bl	8004c24 <lwip_htons>
 8006186:	4603      	mov	r3, r0
 8006188:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	891b      	ldrh	r3, [r3, #8]
 800618e:	89ba      	ldrh	r2, [r7, #12]
 8006190:	429a      	cmp	r2, r3
 8006192:	d204      	bcs.n	800619e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8006194:	89bb      	ldrh	r3, [r7, #12]
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f002 f9df 	bl	800855c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	895b      	ldrh	r3, [r3, #10]
 80061a2:	89fa      	ldrh	r2, [r7, #14]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d807      	bhi.n	80061b8 <ip4_input+0x74>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	891b      	ldrh	r3, [r3, #8]
 80061ac:	89ba      	ldrh	r2, [r7, #12]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d802      	bhi.n	80061b8 <ip4_input+0x74>
 80061b2:	89fb      	ldrh	r3, [r7, #14]
 80061b4:	2b13      	cmp	r3, #19
 80061b6:	d804      	bhi.n	80061c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f002 fb55 	bl	8008868 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e0db      	b.n	800637a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	4a6f      	ldr	r2, [pc, #444]	@ (8006384 <ip4_input+0x240>)
 80061c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006384 <ip4_input+0x240>)
 80061d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80061d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006384 <ip4_input+0x240>)
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061da:	2be0      	cmp	r3, #224	@ 0xe0
 80061dc:	d112      	bne.n	8006204 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <ip4_input+0xba>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <ip4_input+0xba>
      netif = inp;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	e02a      	b.n	8006254 <ip4_input+0x110>
    } else {
      netif = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e027      	b.n	8006254 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8006204:	6838      	ldr	r0, [r7, #0]
 8006206:	f7ff ff73 	bl	80060f0 <ip4_input_accept>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <ip4_input+0xd2>
      netif = inp;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	e01e      	b.n	8006254 <ip4_input+0x110>
    } else {
      netif = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800621a:	4b5a      	ldr	r3, [pc, #360]	@ (8006384 <ip4_input+0x240>)
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b7f      	cmp	r3, #127	@ 0x7f
 8006222:	d017      	beq.n	8006254 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8006224:	4b58      	ldr	r3, [pc, #352]	@ (8006388 <ip4_input+0x244>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	e00e      	b.n	800624a <ip4_input+0x106>
          if (netif == inp) {
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d006      	beq.n	8006242 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8006234:	6938      	ldr	r0, [r7, #16]
 8006236:	f7ff ff5b 	bl	80060f0 <ip4_input_accept>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d108      	bne.n	8006252 <ip4_input+0x10e>
 8006240:	e000      	b.n	8006244 <ip4_input+0x100>
            continue;
 8006242:	bf00      	nop
        NETIF_FOREACH(netif) {
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ed      	bne.n	800622c <ip4_input+0xe8>
 8006250:	e000      	b.n	8006254 <ip4_input+0x110>
            break;
 8006252:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006254:	4b4b      	ldr	r3, [pc, #300]	@ (8006384 <ip4_input+0x240>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f96e 	bl	800653c <ip4_addr_isbroadcast_u32>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d105      	bne.n	8006272 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006266:	4b47      	ldr	r3, [pc, #284]	@ (8006384 <ip4_input+0x240>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800626e:	2be0      	cmp	r3, #224	@ 0xe0
 8006270:	d104      	bne.n	800627c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 faf8 	bl	8008868 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e07e      	b.n	800637a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f002 faf0 	bl	8008868 <pbuf_free>
    return ERR_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	e076      	b.n	800637a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	88db      	ldrh	r3, [r3, #6]
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fc92 	bl	8006bc8 <ip4_reass>
 80062a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <ip4_input+0x16c>
      return ERR_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e064      	b.n	800637a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80062b6:	4a33      	ldr	r2, [pc, #204]	@ (8006384 <ip4_input+0x240>)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80062bc:	4a31      	ldr	r2, [pc, #196]	@ (8006384 <ip4_input+0x240>)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80062c2:	4a30      	ldr	r2, [pc, #192]	@ (8006384 <ip4_input+0x240>)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006384 <ip4_input+0x240>)
 80062da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f002 fa3b 	bl	800875c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	7a5b      	ldrb	r3, [r3, #9]
 80062ea:	2b11      	cmp	r3, #17
 80062ec:	d006      	beq.n	80062fc <ip4_input+0x1b8>
 80062ee:	2b11      	cmp	r3, #17
 80062f0:	dc13      	bgt.n	800631a <ip4_input+0x1d6>
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d00c      	beq.n	8006310 <ip4_input+0x1cc>
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d005      	beq.n	8006306 <ip4_input+0x1c2>
 80062fa:	e00e      	b.n	800631a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f008 f8a0 	bl	800e444 <udp_input>
        break;
 8006304:	e026      	b.n	8006354 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f004 f8e7 	bl	800a4dc <tcp_input>
        break;
 800630e:	e021      	b.n	8006354 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fcd8 	bl	8005cc8 <icmp_input>
        break;
 8006318:	e01c      	b.n	8006354 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800631a:	4b1a      	ldr	r3, [pc, #104]	@ (8006384 <ip4_input+0x240>)
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	6939      	ldr	r1, [r7, #16]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f90b 	bl	800653c <ip4_addr_isbroadcast_u32>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10f      	bne.n	800634c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800632c:	4b15      	ldr	r3, [pc, #84]	@ (8006384 <ip4_input+0x240>)
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006334:	2be0      	cmp	r3, #224	@ 0xe0
 8006336:	d009      	beq.n	800634c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8006338:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f002 fa7f 	bl	8008842 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006344:	2102      	movs	r1, #2
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff fdc2 	bl	8005ed0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f002 fa8b 	bl	8008868 <pbuf_free>
        break;
 8006352:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8006354:	4b0b      	ldr	r3, [pc, #44]	@ (8006384 <ip4_input+0x240>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800635a:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <ip4_input+0x240>)
 800635c:	2200      	movs	r2, #0
 800635e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8006360:	4b08      	ldr	r3, [pc, #32]	@ (8006384 <ip4_input+0x240>)
 8006362:	2200      	movs	r2, #0
 8006364:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8006366:	4b07      	ldr	r3, [pc, #28]	@ (8006384 <ip4_input+0x240>)
 8006368:	2200      	movs	r2, #0
 800636a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <ip4_input+0x240>)
 800636e:	2200      	movs	r2, #0
 8006370:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006372:	4b04      	ldr	r3, [pc, #16]	@ (8006384 <ip4_input+0x240>)
 8006374:	2200      	movs	r2, #0
 8006376:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20004e4c 	.word	0x20004e4c
 8006388:	20007d68 	.word	0x20007d68

0800638c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	@ 0x28
 8006390:	af04      	add	r7, sp, #16
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d009      	beq.n	80063b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <ip4_output_if+0x26>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	3304      	adds	r3, #4
 80063b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6979      	ldr	r1, [r7, #20]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f805 	bl	80063e0 <ip4_output_if_src>
 80063d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	7b9b      	ldrb	r3, [r3, #14]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d006      	beq.n	8006404 <ip4_output_if_src+0x24>
 80063f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006524 <ip4_output_if_src+0x144>)
 80063f8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80063fc:	494a      	ldr	r1, [pc, #296]	@ (8006528 <ip4_output_if_src+0x148>)
 80063fe:	484b      	ldr	r0, [pc, #300]	@ (800652c <ip4_output_if_src+0x14c>)
 8006400:	f008 fd00 	bl	800ee04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d060      	beq.n	80064cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800640a:	2314      	movs	r3, #20
 800640c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800640e:	2114      	movs	r1, #20
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f002 f993 	bl	800873c <pbuf_add_header>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800641c:	f06f 0301 	mvn.w	r3, #1
 8006420:	e07c      	b.n	800651c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	895b      	ldrh	r3, [r3, #10]
 800642c:	2b13      	cmp	r3, #19
 800642e:	d806      	bhi.n	800643e <ip4_output_if_src+0x5e>
 8006430:	4b3c      	ldr	r3, [pc, #240]	@ (8006524 <ip4_output_if_src+0x144>)
 8006432:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8006436:	493e      	ldr	r1, [pc, #248]	@ (8006530 <ip4_output_if_src+0x150>)
 8006438:	483c      	ldr	r0, [pc, #240]	@ (800652c <ip4_output_if_src+0x14c>)
 800643a:	f008 fce3 	bl	800ee04 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800644a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006454:	8b7b      	ldrh	r3, [r7, #26]
 8006456:	089b      	lsrs	r3, r3, #2
 8006458:	b29b      	uxth	r3, r3
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006460:	b2da      	uxtb	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800646c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	891b      	ldrh	r3, [r3, #8]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe fbd6 	bl	8004c24 <lwip_htons>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2200      	movs	r2, #0
 8006484:	719a      	strb	r2, [r3, #6]
 8006486:	2200      	movs	r2, #0
 8006488:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800648a:	4b2a      	ldr	r3, [pc, #168]	@ (8006534 <ip4_output_if_src+0x154>)
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe fbc8 	bl	8004c24 <lwip_htons>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800649c:	4b25      	ldr	r3, [pc, #148]	@ (8006534 <ip4_output_if_src+0x154>)
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	4b23      	ldr	r3, [pc, #140]	@ (8006534 <ip4_output_if_src+0x154>)
 80064a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80064ae:	4b22      	ldr	r3, [pc, #136]	@ (8006538 <ip4_output_if_src+0x158>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	e003      	b.n	80064c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	2200      	movs	r2, #0
 80064c4:	729a      	strb	r2, [r3, #10]
 80064c6:	2200      	movs	r2, #0
 80064c8:	72da      	strb	r2, [r3, #11]
 80064ca:	e00f      	b.n	80064ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	895b      	ldrh	r3, [r3, #10]
 80064d0:	2b13      	cmp	r3, #19
 80064d2:	d802      	bhi.n	80064da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80064d4:	f06f 0301 	mvn.w	r3, #1
 80064d8:	e020      	b.n	800651c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00c      	beq.n	800650e <ip4_output_if_src+0x12e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	891a      	ldrh	r2, [r3, #8]
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d906      	bls.n	800650e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fd53 	bl	8006fb0 <ip4_frag>
 800650a:	4603      	mov	r3, r0
 800650c:	e006      	b.n	800651c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68f9      	ldr	r1, [r7, #12]
 8006516:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006518:	4798      	blx	r3
 800651a:	4603      	mov	r3, r0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	080104d0 	.word	0x080104d0
 8006528:	08010540 	.word	0x08010540
 800652c:	0801054c 	.word	0x0801054c
 8006530:	08010574 	.word	0x08010574
 8006534:	20004e64 	.word	0x20004e64
 8006538:	08012d04 	.word	0x08012d04

0800653c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d002      	beq.n	8006558 <ip4_addr_isbroadcast_u32+0x1c>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8006558:	2301      	movs	r3, #1
 800655a:	e02a      	b.n	80065b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800656a:	2300      	movs	r3, #0
 800656c:	e021      	b.n	80065b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	3304      	adds	r3, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d101      	bne.n	800657e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800657a:	2300      	movs	r3, #0
 800657c:	e019      	b.n	80065b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	3304      	adds	r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	405a      	eors	r2, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10d      	bne.n	80065b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	43da      	mvns	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d101      	bne.n	80065b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80065b0:	2300      	movs	r3, #0
  }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80065ca:	4b12      	ldr	r3, [pc, #72]	@ (8006614 <ip_reass_tmr+0x54>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80065d0:	e018      	b.n	8006604 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	7fdb      	ldrb	r3, [r3, #31]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <ip_reass_tmr+0x32>
      r->timer--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	7fdb      	ldrb	r3, [r3, #31]
 80065de:	3b01      	subs	r3, #1
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e008      	b.n	8006604 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f80a 	bl	8006618 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e3      	bne.n	80065d2 <ip_reass_tmr+0x12>
    }
  }
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20004e68 	.word	0x20004e68

08006618 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	429a      	cmp	r2, r3
 800662c:	d105      	bne.n	800663a <ip_reass_free_complete_datagram+0x22>
 800662e:	4b45      	ldr	r3, [pc, #276]	@ (8006744 <ip_reass_free_complete_datagram+0x12c>)
 8006630:	22ab      	movs	r2, #171	@ 0xab
 8006632:	4945      	ldr	r1, [pc, #276]	@ (8006748 <ip_reass_free_complete_datagram+0x130>)
 8006634:	4845      	ldr	r0, [pc, #276]	@ (800674c <ip_reass_free_complete_datagram+0x134>)
 8006636:	f008 fbe5 	bl	800ee04 <iprintf>
  if (prev != NULL) {
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d005      	beq.n	8006656 <ip_reass_free_complete_datagram+0x3e>
 800664a:	4b3e      	ldr	r3, [pc, #248]	@ (8006744 <ip_reass_free_complete_datagram+0x12c>)
 800664c:	22ad      	movs	r2, #173	@ 0xad
 800664e:	4940      	ldr	r1, [pc, #256]	@ (8006750 <ip_reass_free_complete_datagram+0x138>)
 8006650:	483e      	ldr	r0, [pc, #248]	@ (800674c <ip_reass_free_complete_datagram+0x134>)
 8006652:	f008 fbd7 	bl	800ee04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	889b      	ldrh	r3, [r3, #4]
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d12a      	bne.n	80066be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	6858      	ldr	r0, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3308      	adds	r3, #8
 800667e:	2214      	movs	r2, #20
 8006680:	4619      	mov	r1, r3
 8006682:	f008 fcd6 	bl	800f032 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8006686:	2101      	movs	r1, #1
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f7ff fc31 	bl	8005ef0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800668e:	69b8      	ldr	r0, [r7, #24]
 8006690:	f002 f972 	bl	8008978 <pbuf_clen>
 8006694:	4603      	mov	r3, r0
 8006696:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006698:	8bfa      	ldrh	r2, [r7, #30]
 800669a:	8a7b      	ldrh	r3, [r7, #18]
 800669c:	4413      	add	r3, r2
 800669e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a2:	db05      	blt.n	80066b0 <ip_reass_free_complete_datagram+0x98>
 80066a4:	4b27      	ldr	r3, [pc, #156]	@ (8006744 <ip_reass_free_complete_datagram+0x12c>)
 80066a6:	22bc      	movs	r2, #188	@ 0xbc
 80066a8:	492a      	ldr	r1, [pc, #168]	@ (8006754 <ip_reass_free_complete_datagram+0x13c>)
 80066aa:	4828      	ldr	r0, [pc, #160]	@ (800674c <ip_reass_free_complete_datagram+0x134>)
 80066ac:	f008 fbaa 	bl	800ee04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80066b0:	8bfa      	ldrh	r2, [r7, #30]
 80066b2:	8a7b      	ldrh	r3, [r7, #18]
 80066b4:	4413      	add	r3, r2
 80066b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80066b8:	69b8      	ldr	r0, [r7, #24]
 80066ba:	f002 f8d5 	bl	8008868 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80066c4:	e01f      	b.n	8006706 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f002 f94e 	bl	8008978 <pbuf_clen>
 80066dc:	4603      	mov	r3, r0
 80066de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80066e0:	8bfa      	ldrh	r2, [r7, #30]
 80066e2:	8a7b      	ldrh	r3, [r7, #18]
 80066e4:	4413      	add	r3, r2
 80066e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ea:	db05      	blt.n	80066f8 <ip_reass_free_complete_datagram+0xe0>
 80066ec:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <ip_reass_free_complete_datagram+0x12c>)
 80066ee:	22cc      	movs	r2, #204	@ 0xcc
 80066f0:	4918      	ldr	r1, [pc, #96]	@ (8006754 <ip_reass_free_complete_datagram+0x13c>)
 80066f2:	4816      	ldr	r0, [pc, #88]	@ (800674c <ip_reass_free_complete_datagram+0x134>)
 80066f4:	f008 fb86 	bl	800ee04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80066f8:	8bfa      	ldrh	r2, [r7, #30]
 80066fa:	8a7b      	ldrh	r3, [r7, #18]
 80066fc:	4413      	add	r3, r2
 80066fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f002 f8b1 	bl	8008868 <pbuf_free>
  while (p != NULL) {
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1dc      	bne.n	80066c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8c2 	bl	8006898 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8006714:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <ip_reass_free_complete_datagram+0x140>)
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	8bfa      	ldrh	r2, [r7, #30]
 800671a:	429a      	cmp	r2, r3
 800671c:	d905      	bls.n	800672a <ip_reass_free_complete_datagram+0x112>
 800671e:	4b09      	ldr	r3, [pc, #36]	@ (8006744 <ip_reass_free_complete_datagram+0x12c>)
 8006720:	22d2      	movs	r2, #210	@ 0xd2
 8006722:	490e      	ldr	r1, [pc, #56]	@ (800675c <ip_reass_free_complete_datagram+0x144>)
 8006724:	4809      	ldr	r0, [pc, #36]	@ (800674c <ip_reass_free_complete_datagram+0x134>)
 8006726:	f008 fb6d 	bl	800ee04 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800672a:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <ip_reass_free_complete_datagram+0x140>)
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	8bfb      	ldrh	r3, [r7, #30]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	b29a      	uxth	r2, r3
 8006734:	4b08      	ldr	r3, [pc, #32]	@ (8006758 <ip_reass_free_complete_datagram+0x140>)
 8006736:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8006738:	8bfb      	ldrh	r3, [r7, #30]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	080105a4 	.word	0x080105a4
 8006748:	08010618 	.word	0x08010618
 800674c:	08010624 	.word	0x08010624
 8006750:	0801064c 	.word	0x0801064c
 8006754:	08010660 	.word	0x08010660
 8006758:	20004e6c 	.word	0x20004e6c
 800675c:	08010680 	.word	0x08010680

08006760 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	@ 0x28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800677e:	4b28      	ldr	r3, [pc, #160]	@ (8006820 <ip_reass_remove_oldest_datagram+0xc0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8006784:	e030      	b.n	80067e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	695a      	ldr	r2, [r3, #20]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d10c      	bne.n	80067ac <ip_reass_remove_oldest_datagram+0x4c>
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	429a      	cmp	r2, r3
 800679c:	d106      	bne.n	80067ac <ip_reass_remove_oldest_datagram+0x4c>
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	899a      	ldrh	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	889b      	ldrh	r3, [r3, #4]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d014      	beq.n	80067d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	3301      	adds	r3, #1
 80067b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	e009      	b.n	80067d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	7fda      	ldrb	r2, [r3, #31]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	7fdb      	ldrb	r3, [r3, #31]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d803      	bhi.n	80067d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1cb      	bne.n	8006786 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80067f4:	69b9      	ldr	r1, [r7, #24]
 80067f6:	6a38      	ldr	r0, [r7, #32]
 80067f8:	f7ff ff0e 	bl	8006618 <ip_reass_free_complete_datagram>
 80067fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	da02      	bge.n	8006814 <ip_reass_remove_oldest_datagram+0xb4>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b01      	cmp	r3, #1
 8006812:	dcac      	bgt.n	800676e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8006814:	697b      	ldr	r3, [r7, #20]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3728      	adds	r7, #40	@ 0x28
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20004e68 	.word	0x20004e68

08006824 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800682e:	2004      	movs	r0, #4
 8006830:	f001 f934 	bl	8007a9c <memp_malloc>
 8006834:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d110      	bne.n	800685e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff ff8e 	bl	8006760 <ip_reass_remove_oldest_datagram>
 8006844:	4602      	mov	r2, r0
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	4293      	cmp	r3, r2
 800684a:	dc03      	bgt.n	8006854 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800684c:	2004      	movs	r0, #4
 800684e:	f001 f925 	bl	8007a9c <memp_malloc>
 8006852:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	e016      	b.n	800688c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800685e:	2220      	movs	r2, #32
 8006860:	2100      	movs	r1, #0
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f008 fb6f 	bl	800ef46 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	220f      	movs	r2, #15
 800686c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800686e:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <ip_reass_enqueue_new_datagram+0x70>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8006876:	4a07      	ldr	r2, [pc, #28]	@ (8006894 <ip_reass_enqueue_new_datagram+0x70>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3308      	adds	r3, #8
 8006880:	2214      	movs	r2, #20
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4618      	mov	r0, r3
 8006886:	f008 fbd4 	bl	800f032 <memcpy>
  return ipr;
 800688a:	68fb      	ldr	r3, [r7, #12]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20004e68 	.word	0x20004e68

08006898 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <ip_reass_dequeue_datagram+0x4c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d104      	bne.n	80068b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a0c      	ldr	r2, [pc, #48]	@ (80068e4 <ip_reass_dequeue_datagram+0x4c>)
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e00d      	b.n	80068d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d106      	bne.n	80068ca <ip_reass_dequeue_datagram+0x32>
 80068bc:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <ip_reass_dequeue_datagram+0x50>)
 80068be:	f240 1245 	movw	r2, #325	@ 0x145
 80068c2:	490a      	ldr	r1, [pc, #40]	@ (80068ec <ip_reass_dequeue_datagram+0x54>)
 80068c4:	480a      	ldr	r0, [pc, #40]	@ (80068f0 <ip_reass_dequeue_datagram+0x58>)
 80068c6:	f008 fa9d 	bl	800ee04 <iprintf>
    prev->next = ipr->next;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	2004      	movs	r0, #4
 80068d6:	f001 f951 	bl	8007b7c <memp_free>
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20004e68 	.word	0x20004e68
 80068e8:	080105a4 	.word	0x080105a4
 80068ec:	080106a4 	.word	0x080106a4
 80068f0:	08010624 	.word	0x08010624

080068f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08c      	sub	sp, #48	@ 0x30
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8006904:	2301      	movs	r3, #1
 8006906:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	b29b      	uxth	r3, r3
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe f985 	bl	8004c24 <lwip_htons>
 800691a:	4603      	mov	r3, r0
 800691c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	b2db      	uxtb	r3, r3
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800692c:	7e7b      	ldrb	r3, [r7, #25]
 800692e:	b29b      	uxth	r3, r3
 8006930:	8b7a      	ldrh	r2, [r7, #26]
 8006932:	429a      	cmp	r2, r3
 8006934:	d202      	bcs.n	800693c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006936:	f04f 33ff 	mov.w	r3, #4294967295
 800693a:	e135      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800693c:	7e7b      	ldrb	r3, [r7, #25]
 800693e:	b29b      	uxth	r3, r3
 8006940:	8b7a      	ldrh	r2, [r7, #26]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	88db      	ldrh	r3, [r3, #6]
 800694a:	b29b      	uxth	r3, r3
 800694c:	4618      	mov	r0, r3
 800694e:	f7fe f969 	bl	8004c24 <lwip_htons>
 8006952:	4603      	mov	r3, r0
 8006954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006958:	b29b      	uxth	r3, r3
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8006964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	705a      	strb	r2, [r3, #1]
 800696e:	2200      	movs	r2, #0
 8006970:	709a      	strb	r2, [r3, #2]
 8006972:	2200      	movs	r2, #0
 8006974:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8006976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006978:	8afa      	ldrh	r2, [r7, #22]
 800697a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800697c:	8afa      	ldrh	r2, [r7, #22]
 800697e:	8b7b      	ldrh	r3, [r7, #26]
 8006980:	4413      	add	r3, r2
 8006982:	b29a      	uxth	r2, r3
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8006988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698a:	88db      	ldrh	r3, [r3, #6]
 800698c:	b29b      	uxth	r3, r3
 800698e:	8afa      	ldrh	r2, [r7, #22]
 8006990:	429a      	cmp	r2, r3
 8006992:	d902      	bls.n	800699a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	e106      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a0:	e068      	b.n	8006a74 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80069a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069aa:	889b      	ldrh	r3, [r3, #4]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	889b      	ldrh	r3, [r3, #4]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d235      	bcs.n	8006a24 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80069b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80069be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d020      	beq.n	8006a06 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	889b      	ldrh	r3, [r3, #4]
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	88db      	ldrh	r3, [r3, #6]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d307      	bcc.n	80069e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80069d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d6:	88db      	ldrh	r3, [r3, #6]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	889b      	ldrh	r3, [r3, #4]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d902      	bls.n	80069ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80069e4:	f04f 33ff 	mov.w	r3, #4294967295
 80069e8:	e0de      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80069ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	88db      	ldrh	r3, [r3, #6]
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f8:	889b      	ldrh	r3, [r3, #4]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d03d      	beq.n	8006a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8006a04:	e03a      	b.n	8006a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	88db      	ldrh	r3, [r3, #6]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	889b      	ldrh	r3, [r3, #4]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d902      	bls.n	8006a1c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1a:	e0c5      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	605a      	str	r2, [r3, #4]
      break;
 8006a22:	e02b      	b.n	8006a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8006a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a26:	889b      	ldrh	r3, [r3, #4]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	889b      	ldrh	r3, [r3, #4]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d102      	bne.n	8006a3a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006a34:	f04f 33ff 	mov.w	r3, #4294967295
 8006a38:	e0b6      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	889b      	ldrh	r3, [r3, #4]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	88db      	ldrh	r3, [r3, #6]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d202      	bcs.n	8006a50 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	e0ab      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8006a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	88db      	ldrh	r3, [r3, #6]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	889b      	ldrh	r3, [r3, #4]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d001      	beq.n	8006a6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d193      	bne.n	80069a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8006a7a:	e000      	b.n	8006a7e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8006a7c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d12d      	bne.n	8006ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01c      	beq.n	8006ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	889b      	ldrh	r3, [r3, #4]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d906      	bls.n	8006aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8006a9a:	4b45      	ldr	r3, [pc, #276]	@ (8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006a9c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8006aa0:	4944      	ldr	r1, [pc, #272]	@ (8006bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8006aa2:	4845      	ldr	r0, [pc, #276]	@ (8006bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006aa4:	f008 f9ae 	bl	800ee04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	88db      	ldrh	r3, [r3, #6]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab6:	889b      	ldrh	r3, [r3, #4]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d010      	beq.n	8006ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	623b      	str	r3, [r7, #32]
 8006ac2:	e00d      	b.n	8006ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8006acc:	4b38      	ldr	r3, [pc, #224]	@ (8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006ace:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8006ad2:	493a      	ldr	r1, [pc, #232]	@ (8006bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8006ad4:	4838      	ldr	r0, [pc, #224]	@ (8006bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006ad6:	f008 f995 	bl	800ee04 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d105      	bne.n	8006af2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	7f9b      	ldrb	r3, [r3, #30]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d059      	beq.n	8006ba6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d04f      	beq.n	8006b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d006      	beq.n	8006b0e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	889b      	ldrh	r3, [r3, #4]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	623b      	str	r3, [r7, #32]
 8006b12:	e041      	b.n	8006b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8006b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8006b1e:	e012      	b.n	8006b46 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	88db      	ldrh	r3, [r3, #6]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	889b      	ldrh	r3, [r3, #4]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d002      	beq.n	8006b3c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	623b      	str	r3, [r7, #32]
            break;
 8006b3a:	e007      	b.n	8006b4c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8006b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e9      	bne.n	8006b20 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d022      	beq.n	8006b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8006b5a:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006b5c:	f240 12df 	movw	r2, #479	@ 0x1df
 8006b60:	4917      	ldr	r1, [pc, #92]	@ (8006bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8006b62:	4815      	ldr	r0, [pc, #84]	@ (8006bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006b64:	f008 f94e 	bl	800ee04 <iprintf>
          LWIP_ASSERT("sanity check",
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d106      	bne.n	8006b82 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8006b74:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006b76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006b7a:	4911      	ldr	r1, [pc, #68]	@ (8006bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8006b7c:	480e      	ldr	r0, [pc, #56]	@ (8006bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006b7e:	f008 f941 	bl	800ee04 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8006b8a:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006b8c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8006b90:	490c      	ldr	r1, [pc, #48]	@ (8006bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8006b92:	4809      	ldr	r0, [pc, #36]	@ (8006bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006b94:	f008 f936 	bl	800ee04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bf14      	ite	ne
 8006b9e:	2301      	movne	r3, #1
 8006ba0:	2300      	moveq	r3, #0
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	e000      	b.n	8006ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3730      	adds	r7, #48	@ 0x30
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	080105a4 	.word	0x080105a4
 8006bb4:	080106c0 	.word	0x080106c0
 8006bb8:	08010624 	.word	0x08010624
 8006bbc:	080106e0 	.word	0x080106e0
 8006bc0:	08010718 	.word	0x08010718
 8006bc4:	08010728 	.word	0x08010728

08006bc8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08e      	sub	sp, #56	@ 0x38
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b14      	cmp	r3, #20
 8006be6:	f040 8171 	bne.w	8006ecc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	88db      	ldrh	r3, [r3, #6]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe f817 	bl	8004c24 <lwip_htons>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8006c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe f80b 	bl	8004c24 <lwip_htons>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8006c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8006c22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	f0c0 8150 	bcc.w	8006ed0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8006c30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fe9b 	bl	8008978 <pbuf_clen>
 8006c42:	4603      	mov	r3, r0
 8006c44:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006c46:	4b8c      	ldr	r3, [pc, #560]	@ (8006e78 <ip4_reass+0x2b0>)
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	8c3b      	ldrh	r3, [r7, #32]
 8006c4e:	4413      	add	r3, r2
 8006c50:	2b0a      	cmp	r3, #10
 8006c52:	dd10      	ble.n	8006c76 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006c54:	8c3b      	ldrh	r3, [r7, #32]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c5a:	f7ff fd81 	bl	8006760 <ip_reass_remove_oldest_datagram>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8137 	beq.w	8006ed4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006c66:	4b84      	ldr	r3, [pc, #528]	@ (8006e78 <ip4_reass+0x2b0>)
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	8c3b      	ldrh	r3, [r7, #32]
 8006c6e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006c70:	2b0a      	cmp	r3, #10
 8006c72:	f300 812f 	bgt.w	8006ed4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006c76:	4b81      	ldr	r3, [pc, #516]	@ (8006e7c <ip4_reass+0x2b4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c7c:	e015      	b.n	8006caa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	695a      	ldr	r2, [r3, #20]
 8006c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d10c      	bne.n	8006ca4 <ip4_reass+0xdc>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d106      	bne.n	8006ca4 <ip4_reass+0xdc>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	899a      	ldrh	r2, [r3, #12]
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	889b      	ldrh	r3, [r3, #4]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d006      	beq.n	8006cb2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <ip4_reass+0xb6>
 8006cb0:	e000      	b.n	8006cb4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8006cb2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8006cba:	8c3b      	ldrh	r3, [r7, #32]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc0:	f7ff fdb0 	bl	8006824 <ip_reass_enqueue_new_datagram>
 8006cc4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d11c      	bne.n	8006d06 <ip4_reass+0x13e>
      goto nullreturn;
 8006ccc:	e105      	b.n	8006eda <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd0:	88db      	ldrh	r3, [r3, #6]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fd ffa5 	bl	8004c24 <lwip_htons>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d110      	bne.n	8006d06 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce6:	89db      	ldrh	r3, [r3, #14]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd ff9b 	bl	8004c24 <lwip_htons>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	2214      	movs	r2, #20
 8006cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d00:	4618      	mov	r0, r3
 8006d02:	f008 f996 	bl	800f032 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	88db      	ldrh	r3, [r3, #6]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bf0c      	ite	eq
 8006d14:	2301      	moveq	r3, #1
 8006d16:	2300      	movne	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00e      	beq.n	8006d40 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8006d22:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006d24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d26:	4413      	add	r3, r2
 8006d28:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006d2a:	8b7a      	ldrh	r2, [r7, #26]
 8006d2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	f0c0 80a0 	bcc.w	8006e74 <ip4_reass+0x2ac>
 8006d34:	8b7b      	ldrh	r3, [r7, #26]
 8006d36:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	f200 809a 	bhi.w	8006e74 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d46:	f7ff fdd5 	bl	80068f4 <ip_reass_chain_frag_into_datagram_and_validate>
 8006d4a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	f000 809b 	beq.w	8006e8c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006d56:	4b48      	ldr	r3, [pc, #288]	@ (8006e78 <ip4_reass+0x2b0>)
 8006d58:	881a      	ldrh	r2, [r3, #0]
 8006d5a:	8c3b      	ldrh	r3, [r7, #32]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	4b45      	ldr	r3, [pc, #276]	@ (8006e78 <ip4_reass+0x2b0>)
 8006d62:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00d      	beq.n	8006d86 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8006d6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006d6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d6e:	4413      	add	r3, r2
 8006d70:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	8a7a      	ldrh	r2, [r7, #18]
 8006d76:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	7f9b      	ldrb	r3, [r3, #30]
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d171      	bne.n	8006e70 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	8b9b      	ldrh	r3, [r3, #28]
 8006d90:	3314      	adds	r3, #20
 8006d92:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	3308      	adds	r3, #8
 8006daa:	2214      	movs	r2, #20
 8006dac:	4619      	mov	r1, r3
 8006dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006db0:	f008 f93f 	bl	800f032 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006db4:	8a3b      	ldrh	r3, [r7, #16]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fd ff34 	bl	8004c24 <lwip_htons>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	719a      	strb	r2, [r3, #6]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	729a      	strb	r2, [r3, #10]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8006dde:	e00d      	b.n	8006dfc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8006de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8006de6:	2114      	movs	r1, #20
 8006de8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006dea:	f001 fcb7 	bl	800875c <pbuf_remove_header>
      pbuf_cat(p, r);
 8006dee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fdfb 	bl	80089ec <pbuf_cat>
      r = iprh->next_pbuf;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1ee      	bne.n	8006de0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8006e02:	4b1e      	ldr	r3, [pc, #120]	@ (8006e7c <ip4_reass+0x2b4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d102      	bne.n	8006e12 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e10:	e010      	b.n	8006e34 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006e12:	4b1a      	ldr	r3, [pc, #104]	@ (8006e7c <ip4_reass+0x2b4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e18:	e007      	b.n	8006e2a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d006      	beq.n	8006e32 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f4      	bne.n	8006e1a <ip4_reass+0x252>
 8006e30:	e000      	b.n	8006e34 <ip4_reass+0x26c>
          break;
 8006e32:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006e34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e38:	f7ff fd2e 	bl	8006898 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fd9b 	bl	8008978 <pbuf_clen>
 8006e42:	4603      	mov	r3, r0
 8006e44:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006e46:	4b0c      	ldr	r3, [pc, #48]	@ (8006e78 <ip4_reass+0x2b0>)
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	8c3a      	ldrh	r2, [r7, #32]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d906      	bls.n	8006e5e <ip4_reass+0x296>
 8006e50:	4b0b      	ldr	r3, [pc, #44]	@ (8006e80 <ip4_reass+0x2b8>)
 8006e52:	f240 229b 	movw	r2, #667	@ 0x29b
 8006e56:	490b      	ldr	r1, [pc, #44]	@ (8006e84 <ip4_reass+0x2bc>)
 8006e58:	480b      	ldr	r0, [pc, #44]	@ (8006e88 <ip4_reass+0x2c0>)
 8006e5a:	f007 ffd3 	bl	800ee04 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8006e5e:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <ip4_reass+0x2b0>)
 8006e60:	881a      	ldrh	r2, [r3, #0]
 8006e62:	8c3b      	ldrh	r3, [r7, #32]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	4b03      	ldr	r3, [pc, #12]	@ (8006e78 <ip4_reass+0x2b0>)
 8006e6a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	e038      	b.n	8006ee2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e036      	b.n	8006ee2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8006e74:	bf00      	nop
 8006e76:	e00a      	b.n	8006e8e <ip4_reass+0x2c6>
 8006e78:	20004e6c 	.word	0x20004e6c
 8006e7c:	20004e68 	.word	0x20004e68
 8006e80:	080105a4 	.word	0x080105a4
 8006e84:	0801074c 	.word	0x0801074c
 8006e88:	08010624 	.word	0x08010624
    goto nullreturn_ipr;
 8006e8c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <ip4_reass+0x2da>
 8006e94:	4b15      	ldr	r3, [pc, #84]	@ (8006eec <ip4_reass+0x324>)
 8006e96:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8006e9a:	4915      	ldr	r1, [pc, #84]	@ (8006ef0 <ip4_reass+0x328>)
 8006e9c:	4815      	ldr	r0, [pc, #84]	@ (8006ef4 <ip4_reass+0x32c>)
 8006e9e:	f007 ffb1 	bl	800ee04 <iprintf>
  if (ipr->p == NULL) {
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d116      	bne.n	8006ed8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8006eaa:	4b13      	ldr	r3, [pc, #76]	@ (8006ef8 <ip4_reass+0x330>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d006      	beq.n	8006ec2 <ip4_reass+0x2fa>
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <ip4_reass+0x324>)
 8006eb6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8006eba:	4910      	ldr	r1, [pc, #64]	@ (8006efc <ip4_reass+0x334>)
 8006ebc:	480d      	ldr	r0, [pc, #52]	@ (8006ef4 <ip4_reass+0x32c>)
 8006ebe:	f007 ffa1 	bl	800ee04 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ec6:	f7ff fce7 	bl	8006898 <ip_reass_dequeue_datagram>
 8006eca:	e006      	b.n	8006eda <ip4_reass+0x312>
    goto nullreturn;
 8006ecc:	bf00      	nop
 8006ece:	e004      	b.n	8006eda <ip4_reass+0x312>
    goto nullreturn;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <ip4_reass+0x312>
      goto nullreturn;
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <ip4_reass+0x312>
  }

nullreturn:
 8006ed8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fcc4 	bl	8008868 <pbuf_free>
  return NULL;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3738      	adds	r7, #56	@ 0x38
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	080105a4 	.word	0x080105a4
 8006ef0:	08010768 	.word	0x08010768
 8006ef4:	08010624 	.word	0x08010624
 8006ef8:	20004e68 	.word	0x20004e68
 8006efc:	08010774 	.word	0x08010774

08006f00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8006f04:	2005      	movs	r0, #5
 8006f06:	f000 fdc9 	bl	8007a9c <memp_malloc>
 8006f0a:	4603      	mov	r3, r0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <ip_frag_free_pbuf_custom_ref+0x1c>
 8006f1e:	4b07      	ldr	r3, [pc, #28]	@ (8006f3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8006f20:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8006f24:	4906      	ldr	r1, [pc, #24]	@ (8006f40 <ip_frag_free_pbuf_custom_ref+0x30>)
 8006f26:	4807      	ldr	r0, [pc, #28]	@ (8006f44 <ip_frag_free_pbuf_custom_ref+0x34>)
 8006f28:	f007 ff6c 	bl	800ee04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	2005      	movs	r0, #5
 8006f30:	f000 fe24 	bl	8007b7c <memp_free>
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	080105a4 	.word	0x080105a4
 8006f40:	08010794 	.word	0x08010794
 8006f44:	08010624 	.word	0x08010624

08006f48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <ipfrag_free_pbuf_custom+0x20>
 8006f5a:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <ipfrag_free_pbuf_custom+0x58>)
 8006f5c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8006f60:	4910      	ldr	r1, [pc, #64]	@ (8006fa4 <ipfrag_free_pbuf_custom+0x5c>)
 8006f62:	4811      	ldr	r0, [pc, #68]	@ (8006fa8 <ipfrag_free_pbuf_custom+0x60>)
 8006f64:	f007 ff4e 	bl	800ee04 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d006      	beq.n	8006f7e <ipfrag_free_pbuf_custom+0x36>
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <ipfrag_free_pbuf_custom+0x58>)
 8006f72:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8006f76:	490d      	ldr	r1, [pc, #52]	@ (8006fac <ipfrag_free_pbuf_custom+0x64>)
 8006f78:	480b      	ldr	r0, [pc, #44]	@ (8006fa8 <ipfrag_free_pbuf_custom+0x60>)
 8006f7a:	f007 ff43 	bl	800ee04 <iprintf>
  if (pcr->original != NULL) {
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d004      	beq.n	8006f90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fc6c 	bl	8008868 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff ffbd 	bl	8006f10 <ip_frag_free_pbuf_custom_ref>
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	080105a4 	.word	0x080105a4
 8006fa4:	080107a0 	.word	0x080107a0
 8006fa8:	08010624 	.word	0x08010624
 8006fac:	080107ac 	.word	0x080107ac

08006fb0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b094      	sub	sp, #80	@ 0x50
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006fc6:	3b14      	subs	r3, #20
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da00      	bge.n	8006fce <ip4_frag+0x1e>
 8006fcc:	3307      	adds	r3, #7
 8006fce:	10db      	asrs	r3, r3, #3
 8006fd0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8006fd2:	2314      	movs	r3, #20
 8006fd4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b14      	cmp	r3, #20
 8006ff0:	d002      	beq.n	8006ff8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8006ff2:	f06f 0305 	mvn.w	r3, #5
 8006ff6:	e110      	b.n	800721a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	895b      	ldrh	r3, [r3, #10]
 8006ffc:	2b13      	cmp	r3, #19
 8006ffe:	d809      	bhi.n	8007014 <ip4_frag+0x64>
 8007000:	4b88      	ldr	r3, [pc, #544]	@ (8007224 <ip4_frag+0x274>)
 8007002:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8007006:	4988      	ldr	r1, [pc, #544]	@ (8007228 <ip4_frag+0x278>)
 8007008:	4888      	ldr	r0, [pc, #544]	@ (800722c <ip4_frag+0x27c>)
 800700a:	f007 fefb 	bl	800ee04 <iprintf>
 800700e:	f06f 0305 	mvn.w	r3, #5
 8007012:	e102      	b.n	800721a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	88db      	ldrh	r3, [r3, #6]
 8007018:	b29b      	uxth	r3, r3
 800701a:	4618      	mov	r0, r3
 800701c:	f7fd fe02 	bl	8004c24 <lwip_htons>
 8007020:	4603      	mov	r3, r0
 8007022:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8007024:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800702a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800702e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007034:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	891b      	ldrh	r3, [r3, #8]
 800703a:	3b14      	subs	r3, #20
 800703c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8007040:	e0e1      	b.n	8007206 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007042:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	b29b      	uxth	r3, r3
 8007048:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800704c:	4293      	cmp	r3, r2
 800704e:	bf28      	it	cs
 8007050:	4613      	movcs	r3, r2
 8007052:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007054:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8007058:	2114      	movs	r1, #20
 800705a:	200e      	movs	r0, #14
 800705c:	f001 f920 	bl	80082a0 <pbuf_alloc>
 8007060:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80d5 	beq.w	8007214 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	895b      	ldrh	r3, [r3, #10]
 800706e:	2b13      	cmp	r3, #19
 8007070:	d806      	bhi.n	8007080 <ip4_frag+0xd0>
 8007072:	4b6c      	ldr	r3, [pc, #432]	@ (8007224 <ip4_frag+0x274>)
 8007074:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8007078:	496d      	ldr	r1, [pc, #436]	@ (8007230 <ip4_frag+0x280>)
 800707a:	486c      	ldr	r0, [pc, #432]	@ (800722c <ip4_frag+0x27c>)
 800707c:	f007 fec2 	bl	800ee04 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2214      	movs	r2, #20
 8007086:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007088:	4618      	mov	r0, r3
 800708a:	f007 ffd2 	bl	800f032 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8007094:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007096:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800709a:	e064      	b.n	8007166 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	895a      	ldrh	r2, [r3, #10]
 80070a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	895b      	ldrh	r3, [r3, #10]
 80070aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d906      	bls.n	80070be <ip4_frag+0x10e>
 80070b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007224 <ip4_frag+0x274>)
 80070b2:	f240 322d 	movw	r2, #813	@ 0x32d
 80070b6:	495f      	ldr	r1, [pc, #380]	@ (8007234 <ip4_frag+0x284>)
 80070b8:	485c      	ldr	r0, [pc, #368]	@ (800722c <ip4_frag+0x27c>)
 80070ba:	f007 fea3 	bl	800ee04 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80070be:	8bfa      	ldrh	r2, [r7, #30]
 80070c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80070c4:	4293      	cmp	r3, r2
 80070c6:	bf28      	it	cs
 80070c8:	4613      	movcs	r3, r2
 80070ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80070ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d105      	bne.n	80070e2 <ip4_frag+0x132>
        poff = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]
        continue;
 80070e0:	e041      	b.n	8007166 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80070e2:	f7ff ff0d 	bl	8006f00 <ip_frag_alloc_pbuf_custom_ref>
 80070e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80070ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070f0:	f001 fbba 	bl	8008868 <pbuf_free>
        goto memerr;
 80070f4:	e08f      	b.n	8007216 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80070f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80070fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80070fe:	4413      	add	r3, r2
 8007100:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8007104:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007108:	9201      	str	r2, [sp, #4]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	2241      	movs	r2, #65	@ 0x41
 8007110:	2000      	movs	r0, #0
 8007112:	f001 f9ef 	bl	80084f4 <pbuf_alloced_custom>
 8007116:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800711e:	69b8      	ldr	r0, [r7, #24]
 8007120:	f7ff fef6 	bl	8006f10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8007124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007126:	f001 fb9f 	bl	8008868 <pbuf_free>
        goto memerr;
 800712a:	e074      	b.n	8007216 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f001 fc3b 	bl	80089a8 <pbuf_ref>
      pcr->original = p;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	4a3f      	ldr	r2, [pc, #252]	@ (8007238 <ip4_frag+0x288>)
 800713c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800713e:	6979      	ldr	r1, [r7, #20]
 8007140:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007142:	f001 fc53 	bl	80089ec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8007146:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800714a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8007154:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <ip4_frag+0x1b6>
        poff = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8007166:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800716a:	2b00      	cmp	r3, #0
 800716c:	d196      	bne.n	800709c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800716e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007170:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007174:	4413      	add	r3, r2
 8007176:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800717c:	f1a3 0213 	sub.w	r2, r3, #19
 8007180:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007184:	429a      	cmp	r2, r3
 8007186:	bfcc      	ite	gt
 8007188:	2301      	movgt	r3, #1
 800718a:	2300      	movle	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8007190:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007198:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <ip4_frag+0x1f6>
 80071a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80071a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80071a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80071ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80071ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fd fd37 	bl	8004c24 <lwip_htons>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80071be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071c0:	3314      	adds	r3, #20
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fd fd2d 	bl	8004c24 <lwip_htons>
 80071ca:	4603      	mov	r3, r0
 80071cc:	461a      	mov	r2, r3
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	2200      	movs	r2, #0
 80071d6:	729a      	strb	r2, [r3, #10]
 80071d8:	2200      	movs	r2, #0
 80071da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80071e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071ea:	f001 fb3d 	bl	8008868 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80071ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80071f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80071fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80071fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007200:	4413      	add	r3, r2
 8007202:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8007206:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800720a:	2b00      	cmp	r3, #0
 800720c:	f47f af19 	bne.w	8007042 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e002      	b.n	800721a <ip4_frag+0x26a>
      goto memerr;
 8007214:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8007216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800721a:	4618      	mov	r0, r3
 800721c:	3748      	adds	r7, #72	@ 0x48
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	080105a4 	.word	0x080105a4
 8007228:	080107b8 	.word	0x080107b8
 800722c:	08010624 	.word	0x08010624
 8007230:	080107d4 	.word	0x080107d4
 8007234:	080107f4 	.word	0x080107f4
 8007238:	08006f49 	.word	0x08006f49

0800723c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007246:	4b05      	ldr	r3, [pc, #20]	@ (800725c <ptr_to_mem+0x20>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	4413      	add	r3, r2
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20004e70 	.word	0x20004e70

08007260 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007268:	4b05      	ldr	r3, [pc, #20]	@ (8007280 <mem_to_ptr+0x20>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	b29b      	uxth	r3, r3
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20004e70 	.word	0x20004e70

08007284 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007284:	b590      	push	{r4, r7, lr}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800728c:	4b45      	ldr	r3, [pc, #276]	@ (80073a4 <plug_holes+0x120>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d206      	bcs.n	80072a4 <plug_holes+0x20>
 8007296:	4b44      	ldr	r3, [pc, #272]	@ (80073a8 <plug_holes+0x124>)
 8007298:	f240 12df 	movw	r2, #479	@ 0x1df
 800729c:	4943      	ldr	r1, [pc, #268]	@ (80073ac <plug_holes+0x128>)
 800729e:	4844      	ldr	r0, [pc, #272]	@ (80073b0 <plug_holes+0x12c>)
 80072a0:	f007 fdb0 	bl	800ee04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80072a4:	4b43      	ldr	r3, [pc, #268]	@ (80073b4 <plug_holes+0x130>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d306      	bcc.n	80072bc <plug_holes+0x38>
 80072ae:	4b3e      	ldr	r3, [pc, #248]	@ (80073a8 <plug_holes+0x124>)
 80072b0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80072b4:	4940      	ldr	r1, [pc, #256]	@ (80073b8 <plug_holes+0x134>)
 80072b6:	483e      	ldr	r0, [pc, #248]	@ (80073b0 <plug_holes+0x12c>)
 80072b8:	f007 fda4 	bl	800ee04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	791b      	ldrb	r3, [r3, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <plug_holes+0x4e>
 80072c4:	4b38      	ldr	r3, [pc, #224]	@ (80073a8 <plug_holes+0x124>)
 80072c6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80072ca:	493c      	ldr	r1, [pc, #240]	@ (80073bc <plug_holes+0x138>)
 80072cc:	4838      	ldr	r0, [pc, #224]	@ (80073b0 <plug_holes+0x12c>)
 80072ce:	f007 fd99 	bl	800ee04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80072da:	d906      	bls.n	80072ea <plug_holes+0x66>
 80072dc:	4b32      	ldr	r3, [pc, #200]	@ (80073a8 <plug_holes+0x124>)
 80072de:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80072e2:	4937      	ldr	r1, [pc, #220]	@ (80073c0 <plug_holes+0x13c>)
 80072e4:	4832      	ldr	r0, [pc, #200]	@ (80073b0 <plug_holes+0x12c>)
 80072e6:	f007 fd8d 	bl	800ee04 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ffa4 	bl	800723c <ptr_to_mem>
 80072f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d024      	beq.n	8007348 <plug_holes+0xc4>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	791b      	ldrb	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d120      	bne.n	8007348 <plug_holes+0xc4>
 8007306:	4b2b      	ldr	r3, [pc, #172]	@ (80073b4 <plug_holes+0x130>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	429a      	cmp	r2, r3
 800730e:	d01b      	beq.n	8007348 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007310:	4b2c      	ldr	r3, [pc, #176]	@ (80073c4 <plug_holes+0x140>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	429a      	cmp	r2, r3
 8007318:	d102      	bne.n	8007320 <plug_holes+0x9c>
      lfree = mem;
 800731a:	4a2a      	ldr	r2, [pc, #168]	@ (80073c4 <plug_holes+0x140>)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	881a      	ldrh	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007330:	d00a      	beq.n	8007348 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ff80 	bl	800723c <ptr_to_mem>
 800733c:	4604      	mov	r4, r0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff ff8e 	bl	8007260 <mem_to_ptr>
 8007344:	4603      	mov	r3, r0
 8007346:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	885b      	ldrh	r3, [r3, #2]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ff75 	bl	800723c <ptr_to_mem>
 8007352:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d01f      	beq.n	800739c <plug_holes+0x118>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	791b      	ldrb	r3, [r3, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11b      	bne.n	800739c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007364:	4b17      	ldr	r3, [pc, #92]	@ (80073c4 <plug_holes+0x140>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d102      	bne.n	8007374 <plug_holes+0xf0>
      lfree = pmem;
 800736e:	4a15      	ldr	r2, [pc, #84]	@ (80073c4 <plug_holes+0x140>)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	881a      	ldrh	r2, [r3, #0]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007384:	d00a      	beq.n	800739c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ff56 	bl	800723c <ptr_to_mem>
 8007390:	4604      	mov	r4, r0
 8007392:	68b8      	ldr	r0, [r7, #8]
 8007394:	f7ff ff64 	bl	8007260 <mem_to_ptr>
 8007398:	4603      	mov	r3, r0
 800739a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}
 80073a4:	20004e70 	.word	0x20004e70
 80073a8:	08010804 	.word	0x08010804
 80073ac:	0801086c 	.word	0x0801086c
 80073b0:	08010884 	.word	0x08010884
 80073b4:	20004e74 	.word	0x20004e74
 80073b8:	080108ac 	.word	0x080108ac
 80073bc:	080108c8 	.word	0x080108c8
 80073c0:	080108e4 	.word	0x080108e4
 80073c4:	20004e78 	.word	0x20004e78

080073c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80073ce:	4b16      	ldr	r3, [pc, #88]	@ (8007428 <mem_init+0x60>)
 80073d0:	4a16      	ldr	r2, [pc, #88]	@ (800742c <mem_init+0x64>)
 80073d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80073d4:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <mem_init+0x60>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80073e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80073ee:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80073f2:	f7ff ff23 	bl	800723c <ptr_to_mem>
 80073f6:	4603      	mov	r3, r0
 80073f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007430 <mem_init+0x68>)
 80073fa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80073fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007430 <mem_init+0x68>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2201      	movs	r2, #1
 8007402:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007404:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <mem_init+0x68>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800740c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800740e:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <mem_init+0x68>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007416:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007418:	4b03      	ldr	r3, [pc, #12]	@ (8007428 <mem_init+0x60>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a05      	ldr	r2, [pc, #20]	@ (8007434 <mem_init+0x6c>)
 800741e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20004e70 	.word	0x20004e70
 800742c:	20048000 	.word	0x20048000
 8007430:	20004e74 	.word	0x20004e74
 8007434:	20004e78 	.word	0x20004e78

08007438 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff ff0d 	bl	8007260 <mem_to_ptr>
 8007446:	4603      	mov	r3, r0
 8007448:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fef4 	bl	800723c <ptr_to_mem>
 8007454:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	885b      	ldrh	r3, [r3, #2]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff feee 	bl	800723c <ptr_to_mem>
 8007460:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800746a:	d818      	bhi.n	800749e <mem_link_valid+0x66>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	885b      	ldrh	r3, [r3, #2]
 8007470:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007474:	d813      	bhi.n	800749e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800747a:	8afa      	ldrh	r2, [r7, #22]
 800747c:	429a      	cmp	r2, r3
 800747e:	d004      	beq.n	800748a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	8afa      	ldrh	r2, [r7, #22]
 8007486:	429a      	cmp	r2, r3
 8007488:	d109      	bne.n	800749e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800748a:	4b08      	ldr	r3, [pc, #32]	@ (80074ac <mem_link_valid+0x74>)
 800748c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	429a      	cmp	r2, r3
 8007492:	d006      	beq.n	80074a2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	885b      	ldrh	r3, [r3, #2]
 8007498:	8afa      	ldrh	r2, [r7, #22]
 800749a:	429a      	cmp	r2, r3
 800749c:	d001      	beq.n	80074a2 <mem_link_valid+0x6a>
    return 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	e000      	b.n	80074a4 <mem_link_valid+0x6c>
  }
  return 1;
 80074a2:	2301      	movs	r3, #1
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20004e74 	.word	0x20004e74

080074b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d04c      	beq.n	8007558 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80074c8:	4b25      	ldr	r3, [pc, #148]	@ (8007560 <mem_free+0xb0>)
 80074ca:	f240 2273 	movw	r2, #627	@ 0x273
 80074ce:	4925      	ldr	r1, [pc, #148]	@ (8007564 <mem_free+0xb4>)
 80074d0:	4825      	ldr	r0, [pc, #148]	@ (8007568 <mem_free+0xb8>)
 80074d2:	f007 fc97 	bl	800ee04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80074d6:	e040      	b.n	800755a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3b08      	subs	r3, #8
 80074dc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80074de:	4b23      	ldr	r3, [pc, #140]	@ (800756c <mem_free+0xbc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d306      	bcc.n	80074f6 <mem_free+0x46>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f103 020c 	add.w	r2, r3, #12
 80074ee:	4b20      	ldr	r3, [pc, #128]	@ (8007570 <mem_free+0xc0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d907      	bls.n	8007506 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80074f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007560 <mem_free+0xb0>)
 80074f8:	f240 227f 	movw	r2, #639	@ 0x27f
 80074fc:	491d      	ldr	r1, [pc, #116]	@ (8007574 <mem_free+0xc4>)
 80074fe:	481a      	ldr	r0, [pc, #104]	@ (8007568 <mem_free+0xb8>)
 8007500:	f007 fc80 	bl	800ee04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007504:	e029      	b.n	800755a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	791b      	ldrb	r3, [r3, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d107      	bne.n	800751e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800750e:	4b14      	ldr	r3, [pc, #80]	@ (8007560 <mem_free+0xb0>)
 8007510:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007514:	4918      	ldr	r1, [pc, #96]	@ (8007578 <mem_free+0xc8>)
 8007516:	4814      	ldr	r0, [pc, #80]	@ (8007568 <mem_free+0xb8>)
 8007518:	f007 fc74 	bl	800ee04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800751c:	e01d      	b.n	800755a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff ff8a 	bl	8007438 <mem_link_valid>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d107      	bne.n	800753a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800752a:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <mem_free+0xb0>)
 800752c:	f240 2295 	movw	r2, #661	@ 0x295
 8007530:	4912      	ldr	r1, [pc, #72]	@ (800757c <mem_free+0xcc>)
 8007532:	480d      	ldr	r0, [pc, #52]	@ (8007568 <mem_free+0xb8>)
 8007534:	f007 fc66 	bl	800ee04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007538:	e00f      	b.n	800755a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007540:	4b0f      	ldr	r3, [pc, #60]	@ (8007580 <mem_free+0xd0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	429a      	cmp	r2, r3
 8007548:	d202      	bcs.n	8007550 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800754a:	4a0d      	ldr	r2, [pc, #52]	@ (8007580 <mem_free+0xd0>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fe97 	bl	8007284 <plug_holes>
 8007556:	e000      	b.n	800755a <mem_free+0xaa>
    return;
 8007558:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	08010804 	.word	0x08010804
 8007564:	08010910 	.word	0x08010910
 8007568:	08010884 	.word	0x08010884
 800756c:	20004e70 	.word	0x20004e70
 8007570:	20004e74 	.word	0x20004e74
 8007574:	08010934 	.word	0x08010934
 8007578:	08010950 	.word	0x08010950
 800757c:	08010978 	.word	0x08010978
 8007580:	20004e78 	.word	0x20004e78

08007584 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007590:	887b      	ldrh	r3, [r7, #2]
 8007592:	3303      	adds	r3, #3
 8007594:	b29b      	uxth	r3, r3
 8007596:	f023 0303 	bic.w	r3, r3, #3
 800759a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800759c:	8bfb      	ldrh	r3, [r7, #30]
 800759e:	2b0b      	cmp	r3, #11
 80075a0:	d801      	bhi.n	80075a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80075a2:	230c      	movs	r3, #12
 80075a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80075a6:	8bfb      	ldrh	r3, [r7, #30]
 80075a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80075ac:	d803      	bhi.n	80075b6 <mem_trim+0x32>
 80075ae:	8bfa      	ldrh	r2, [r7, #30]
 80075b0:	887b      	ldrh	r3, [r7, #2]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d201      	bcs.n	80075ba <mem_trim+0x36>
    return NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e0cc      	b.n	8007754 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80075ba:	4b68      	ldr	r3, [pc, #416]	@ (800775c <mem_trim+0x1d8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d304      	bcc.n	80075ce <mem_trim+0x4a>
 80075c4:	4b66      	ldr	r3, [pc, #408]	@ (8007760 <mem_trim+0x1dc>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d306      	bcc.n	80075dc <mem_trim+0x58>
 80075ce:	4b65      	ldr	r3, [pc, #404]	@ (8007764 <mem_trim+0x1e0>)
 80075d0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80075d4:	4964      	ldr	r1, [pc, #400]	@ (8007768 <mem_trim+0x1e4>)
 80075d6:	4865      	ldr	r0, [pc, #404]	@ (800776c <mem_trim+0x1e8>)
 80075d8:	f007 fc14 	bl	800ee04 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80075dc:	4b5f      	ldr	r3, [pc, #380]	@ (800775c <mem_trim+0x1d8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d304      	bcc.n	80075f0 <mem_trim+0x6c>
 80075e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007760 <mem_trim+0x1dc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d301      	bcc.n	80075f4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	e0af      	b.n	8007754 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3b08      	subs	r3, #8
 80075f8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80075fa:	69b8      	ldr	r0, [r7, #24]
 80075fc:	f7ff fe30 	bl	8007260 <mem_to_ptr>
 8007600:	4603      	mov	r3, r0
 8007602:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	881a      	ldrh	r2, [r3, #0]
 8007608:	8afb      	ldrh	r3, [r7, #22]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b08      	subs	r3, #8
 8007610:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007612:	8bfa      	ldrh	r2, [r7, #30]
 8007614:	8abb      	ldrh	r3, [r7, #20]
 8007616:	429a      	cmp	r2, r3
 8007618:	d906      	bls.n	8007628 <mem_trim+0xa4>
 800761a:	4b52      	ldr	r3, [pc, #328]	@ (8007764 <mem_trim+0x1e0>)
 800761c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007620:	4953      	ldr	r1, [pc, #332]	@ (8007770 <mem_trim+0x1ec>)
 8007622:	4852      	ldr	r0, [pc, #328]	@ (800776c <mem_trim+0x1e8>)
 8007624:	f007 fbee 	bl	800ee04 <iprintf>
  if (newsize > size) {
 8007628:	8bfa      	ldrh	r2, [r7, #30]
 800762a:	8abb      	ldrh	r3, [r7, #20]
 800762c:	429a      	cmp	r2, r3
 800762e:	d901      	bls.n	8007634 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	e08f      	b.n	8007754 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007634:	8bfa      	ldrh	r2, [r7, #30]
 8007636:	8abb      	ldrh	r3, [r7, #20]
 8007638:	429a      	cmp	r2, r3
 800763a:	d101      	bne.n	8007640 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	e089      	b.n	8007754 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fdf9 	bl	800723c <ptr_to_mem>
 800764a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	791b      	ldrb	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d13f      	bne.n	80076d4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800765c:	d106      	bne.n	800766c <mem_trim+0xe8>
 800765e:	4b41      	ldr	r3, [pc, #260]	@ (8007764 <mem_trim+0x1e0>)
 8007660:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007664:	4943      	ldr	r1, [pc, #268]	@ (8007774 <mem_trim+0x1f0>)
 8007666:	4841      	ldr	r0, [pc, #260]	@ (800776c <mem_trim+0x1e8>)
 8007668:	f007 fbcc 	bl	800ee04 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007672:	8afa      	ldrh	r2, [r7, #22]
 8007674:	8bfb      	ldrh	r3, [r7, #30]
 8007676:	4413      	add	r3, r2
 8007678:	b29b      	uxth	r3, r3
 800767a:	3308      	adds	r3, #8
 800767c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800767e:	4b3e      	ldr	r3, [pc, #248]	@ (8007778 <mem_trim+0x1f4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	429a      	cmp	r2, r3
 8007686:	d106      	bne.n	8007696 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fdd6 	bl	800723c <ptr_to_mem>
 8007690:	4603      	mov	r3, r0
 8007692:	4a39      	ldr	r2, [pc, #228]	@ (8007778 <mem_trim+0x1f4>)
 8007694:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007696:	89fb      	ldrh	r3, [r7, #14]
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fdcf 	bl	800723c <ptr_to_mem>
 800769e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2200      	movs	r2, #0
 80076a4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	89ba      	ldrh	r2, [r7, #12]
 80076aa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	8afa      	ldrh	r2, [r7, #22]
 80076b0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	89fa      	ldrh	r2, [r7, #14]
 80076b6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80076c0:	d047      	beq.n	8007752 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fdb8 	bl	800723c <ptr_to_mem>
 80076cc:	4602      	mov	r2, r0
 80076ce:	89fb      	ldrh	r3, [r7, #14]
 80076d0:	8053      	strh	r3, [r2, #2]
 80076d2:	e03e      	b.n	8007752 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80076d4:	8bfb      	ldrh	r3, [r7, #30]
 80076d6:	f103 0214 	add.w	r2, r3, #20
 80076da:	8abb      	ldrh	r3, [r7, #20]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d838      	bhi.n	8007752 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80076e0:	8afa      	ldrh	r2, [r7, #22]
 80076e2:	8bfb      	ldrh	r3, [r7, #30]
 80076e4:	4413      	add	r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3308      	adds	r3, #8
 80076ea:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80076f4:	d106      	bne.n	8007704 <mem_trim+0x180>
 80076f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007764 <mem_trim+0x1e0>)
 80076f8:	f240 3216 	movw	r2, #790	@ 0x316
 80076fc:	491d      	ldr	r1, [pc, #116]	@ (8007774 <mem_trim+0x1f0>)
 80076fe:	481b      	ldr	r0, [pc, #108]	@ (800776c <mem_trim+0x1e8>)
 8007700:	f007 fb80 	bl	800ee04 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007704:	89fb      	ldrh	r3, [r7, #14]
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fd98 	bl	800723c <ptr_to_mem>
 800770c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800770e:	4b1a      	ldr	r3, [pc, #104]	@ (8007778 <mem_trim+0x1f4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	429a      	cmp	r2, r3
 8007716:	d202      	bcs.n	800771e <mem_trim+0x19a>
      lfree = mem2;
 8007718:	4a17      	ldr	r2, [pc, #92]	@ (8007778 <mem_trim+0x1f4>)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2200      	movs	r2, #0
 8007722:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	881a      	ldrh	r2, [r3, #0]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	8afa      	ldrh	r2, [r7, #22]
 8007730:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	89fa      	ldrh	r2, [r7, #14]
 8007736:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007740:	d007      	beq.n	8007752 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fd78 	bl	800723c <ptr_to_mem>
 800774c:	4602      	mov	r2, r0
 800774e:	89fb      	ldrh	r3, [r7, #14]
 8007750:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007752:	687b      	ldr	r3, [r7, #4]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20004e70 	.word	0x20004e70
 8007760:	20004e74 	.word	0x20004e74
 8007764:	08010804 	.word	0x08010804
 8007768:	080109ac 	.word	0x080109ac
 800776c:	08010884 	.word	0x08010884
 8007770:	080109c4 	.word	0x080109c4
 8007774:	080109e4 	.word	0x080109e4
 8007778:	20004e78 	.word	0x20004e78

0800777c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <mem_malloc+0x14>
    return NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	e0d9      	b.n	8007944 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	3303      	adds	r3, #3
 8007794:	b29b      	uxth	r3, r3
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800779c:	8bbb      	ldrh	r3, [r7, #28]
 800779e:	2b0b      	cmp	r3, #11
 80077a0:	d801      	bhi.n	80077a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80077a2:	230c      	movs	r3, #12
 80077a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80077a6:	8bbb      	ldrh	r3, [r7, #28]
 80077a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80077ac:	d803      	bhi.n	80077b6 <mem_malloc+0x3a>
 80077ae:	8bba      	ldrh	r2, [r7, #28]
 80077b0:	88fb      	ldrh	r3, [r7, #6]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d201      	bcs.n	80077ba <mem_malloc+0x3e>
    return NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e0c4      	b.n	8007944 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80077ba:	4b64      	ldr	r3, [pc, #400]	@ (800794c <mem_malloc+0x1d0>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fd4e 	bl	8007260 <mem_to_ptr>
 80077c4:	4603      	mov	r3, r0
 80077c6:	83fb      	strh	r3, [r7, #30]
 80077c8:	e0b4      	b.n	8007934 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80077ca:	8bfb      	ldrh	r3, [r7, #30]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff fd35 	bl	800723c <ptr_to_mem>
 80077d2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	791b      	ldrb	r3, [r3, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 80a4 	bne.w	8007926 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	8bfb      	ldrh	r3, [r7, #30]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	f1a3 0208 	sub.w	r2, r3, #8
 80077ec:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80077ee:	429a      	cmp	r2, r3
 80077f0:	f0c0 8099 	bcc.w	8007926 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	8bfb      	ldrh	r3, [r7, #30]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f1a3 0208 	sub.w	r2, r3, #8
 8007802:	8bbb      	ldrh	r3, [r7, #28]
 8007804:	3314      	adds	r3, #20
 8007806:	429a      	cmp	r2, r3
 8007808:	d333      	bcc.n	8007872 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800780a:	8bfa      	ldrh	r2, [r7, #30]
 800780c:	8bbb      	ldrh	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	b29b      	uxth	r3, r3
 8007812:	3308      	adds	r3, #8
 8007814:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007816:	8a7b      	ldrh	r3, [r7, #18]
 8007818:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800781c:	d106      	bne.n	800782c <mem_malloc+0xb0>
 800781e:	4b4c      	ldr	r3, [pc, #304]	@ (8007950 <mem_malloc+0x1d4>)
 8007820:	f240 3287 	movw	r2, #903	@ 0x387
 8007824:	494b      	ldr	r1, [pc, #300]	@ (8007954 <mem_malloc+0x1d8>)
 8007826:	484c      	ldr	r0, [pc, #304]	@ (8007958 <mem_malloc+0x1dc>)
 8007828:	f007 faec 	bl	800ee04 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800782c:	8a7b      	ldrh	r3, [r7, #18]
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff fd04 	bl	800723c <ptr_to_mem>
 8007834:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	881a      	ldrh	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8bfa      	ldrh	r2, [r7, #30]
 8007848:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	8a7a      	ldrh	r2, [r7, #18]
 800784e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2201      	movs	r2, #1
 8007854:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800785e:	d00b      	beq.n	8007878 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fce9 	bl	800723c <ptr_to_mem>
 800786a:	4602      	mov	r2, r0
 800786c:	8a7b      	ldrh	r3, [r7, #18]
 800786e:	8053      	strh	r3, [r2, #2]
 8007870:	e002      	b.n	8007878 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2201      	movs	r2, #1
 8007876:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007878:	4b34      	ldr	r3, [pc, #208]	@ (800794c <mem_malloc+0x1d0>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	429a      	cmp	r2, r3
 8007880:	d127      	bne.n	80078d2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007882:	4b32      	ldr	r3, [pc, #200]	@ (800794c <mem_malloc+0x1d0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007888:	e005      	b.n	8007896 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fcd4 	bl	800723c <ptr_to_mem>
 8007894:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	791b      	ldrb	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <mem_malloc+0x12c>
 800789e:	4b2f      	ldr	r3, [pc, #188]	@ (800795c <mem_malloc+0x1e0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d1f0      	bne.n	800788a <mem_malloc+0x10e>
          }
          lfree = cur;
 80078a8:	4a28      	ldr	r2, [pc, #160]	@ (800794c <mem_malloc+0x1d0>)
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80078ae:	4b27      	ldr	r3, [pc, #156]	@ (800794c <mem_malloc+0x1d0>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b2a      	ldr	r3, [pc, #168]	@ (800795c <mem_malloc+0x1e0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d00b      	beq.n	80078d2 <mem_malloc+0x156>
 80078ba:	4b24      	ldr	r3, [pc, #144]	@ (800794c <mem_malloc+0x1d0>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	791b      	ldrb	r3, [r3, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <mem_malloc+0x156>
 80078c4:	4b22      	ldr	r3, [pc, #136]	@ (8007950 <mem_malloc+0x1d4>)
 80078c6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80078ca:	4925      	ldr	r1, [pc, #148]	@ (8007960 <mem_malloc+0x1e4>)
 80078cc:	4822      	ldr	r0, [pc, #136]	@ (8007958 <mem_malloc+0x1dc>)
 80078ce:	f007 fa99 	bl	800ee04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80078d2:	8bba      	ldrh	r2, [r7, #28]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	4413      	add	r3, r2
 80078d8:	3308      	adds	r3, #8
 80078da:	4a20      	ldr	r2, [pc, #128]	@ (800795c <mem_malloc+0x1e0>)
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	4293      	cmp	r3, r2
 80078e0:	d906      	bls.n	80078f0 <mem_malloc+0x174>
 80078e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <mem_malloc+0x1d4>)
 80078e4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80078e8:	491e      	ldr	r1, [pc, #120]	@ (8007964 <mem_malloc+0x1e8>)
 80078ea:	481b      	ldr	r0, [pc, #108]	@ (8007958 <mem_malloc+0x1dc>)
 80078ec:	f007 fa8a 	bl	800ee04 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d006      	beq.n	8007908 <mem_malloc+0x18c>
 80078fa:	4b15      	ldr	r3, [pc, #84]	@ (8007950 <mem_malloc+0x1d4>)
 80078fc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007900:	4919      	ldr	r1, [pc, #100]	@ (8007968 <mem_malloc+0x1ec>)
 8007902:	4815      	ldr	r0, [pc, #84]	@ (8007958 <mem_malloc+0x1dc>)
 8007904:	f007 fa7e 	bl	800ee04 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d006      	beq.n	8007920 <mem_malloc+0x1a4>
 8007912:	4b0f      	ldr	r3, [pc, #60]	@ (8007950 <mem_malloc+0x1d4>)
 8007914:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007918:	4914      	ldr	r1, [pc, #80]	@ (800796c <mem_malloc+0x1f0>)
 800791a:	480f      	ldr	r0, [pc, #60]	@ (8007958 <mem_malloc+0x1dc>)
 800791c:	f007 fa72 	bl	800ee04 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	3308      	adds	r3, #8
 8007924:	e00e      	b.n	8007944 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007926:	8bfb      	ldrh	r3, [r7, #30]
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff fc87 	bl	800723c <ptr_to_mem>
 800792e:	4603      	mov	r3, r0
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007934:	8bfa      	ldrh	r2, [r7, #30]
 8007936:	8bbb      	ldrh	r3, [r7, #28]
 8007938:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800793c:	429a      	cmp	r2, r3
 800793e:	f4ff af44 	bcc.w	80077ca <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20004e78 	.word	0x20004e78
 8007950:	08010804 	.word	0x08010804
 8007954:	080109e4 	.word	0x080109e4
 8007958:	08010884 	.word	0x08010884
 800795c:	20004e74 	.word	0x20004e74
 8007960:	080109f8 	.word	0x080109f8
 8007964:	08010a14 	.word	0x08010a14
 8007968:	08010a44 	.word	0x08010a44
 800796c:	08010a74 	.word	0x08010a74

08007970 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	3303      	adds	r3, #3
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e011      	b.n	80079b6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4413      	add	r3, r2
 80079ae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	885b      	ldrh	r3, [r3, #2]
 80079ba:	461a      	mov	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4293      	cmp	r3, r2
 80079c0:	dbe7      	blt.n	8007992 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80079d6:	2300      	movs	r3, #0
 80079d8:	80fb      	strh	r3, [r7, #6]
 80079da:	e009      	b.n	80079f0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	4a08      	ldr	r2, [pc, #32]	@ (8007a00 <memp_init+0x30>)
 80079e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff ffc3 	bl	8007970 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	3301      	adds	r3, #1
 80079ee:	80fb      	strh	r3, [r7, #6]
 80079f0:	88fb      	ldrh	r3, [r7, #6]
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d9f2      	bls.n	80079dc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	08012d74 	.word	0x08012d74

08007a04 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d012      	beq.n	8007a40 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d006      	beq.n	8007a3c <do_memp_malloc_pool+0x38>
 8007a2e:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <do_memp_malloc_pool+0x48>)
 8007a30:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007a34:	4906      	ldr	r1, [pc, #24]	@ (8007a50 <do_memp_malloc_pool+0x4c>)
 8007a36:	4807      	ldr	r0, [pc, #28]	@ (8007a54 <do_memp_malloc_pool+0x50>)
 8007a38:	f007 f9e4 	bl	800ee04 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	e000      	b.n	8007a42 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	08010a98 	.word	0x08010a98
 8007a50:	08010b04 	.word	0x08010b04
 8007a54:	08010b28 	.word	0x08010b28

08007a58 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <memp_malloc_pool+0x1c>
 8007a66:	4b0a      	ldr	r3, [pc, #40]	@ (8007a90 <memp_malloc_pool+0x38>)
 8007a68:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007a6c:	4909      	ldr	r1, [pc, #36]	@ (8007a94 <memp_malloc_pool+0x3c>)
 8007a6e:	480a      	ldr	r0, [pc, #40]	@ (8007a98 <memp_malloc_pool+0x40>)
 8007a70:	f007 f9c8 	bl	800ee04 <iprintf>
  if (desc == NULL) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <memp_malloc_pool+0x26>
    return NULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e003      	b.n	8007a86 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff ffc0 	bl	8007a04 <do_memp_malloc_pool>
 8007a84:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	08010a98 	.word	0x08010a98
 8007a94:	08010b50 	.word	0x08010b50
 8007a98:	08010b28 	.word	0x08010b28

08007a9c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d908      	bls.n	8007abe <memp_malloc+0x22>
 8007aac:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad8 <memp_malloc+0x3c>)
 8007aae:	f240 1257 	movw	r2, #343	@ 0x157
 8007ab2:	490a      	ldr	r1, [pc, #40]	@ (8007adc <memp_malloc+0x40>)
 8007ab4:	480a      	ldr	r0, [pc, #40]	@ (8007ae0 <memp_malloc+0x44>)
 8007ab6:	f007 f9a5 	bl	800ee04 <iprintf>
 8007aba:	2300      	movs	r3, #0
 8007abc:	e008      	b.n	8007ad0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	4a08      	ldr	r2, [pc, #32]	@ (8007ae4 <memp_malloc+0x48>)
 8007ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff ff9c 	bl	8007a04 <do_memp_malloc_pool>
 8007acc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007ace:	68fb      	ldr	r3, [r7, #12]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	08010a98 	.word	0x08010a98
 8007adc:	08010b64 	.word	0x08010b64
 8007ae0:	08010b28 	.word	0x08010b28
 8007ae4:	08012d74 	.word	0x08012d74

08007ae8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d006      	beq.n	8007b0a <do_memp_free_pool+0x22>
 8007afc:	4b0a      	ldr	r3, [pc, #40]	@ (8007b28 <do_memp_free_pool+0x40>)
 8007afe:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007b02:	490a      	ldr	r1, [pc, #40]	@ (8007b2c <do_memp_free_pool+0x44>)
 8007b04:	480a      	ldr	r0, [pc, #40]	@ (8007b30 <do_memp_free_pool+0x48>)
 8007b06:	f007 f97d 	bl	800ee04 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007b20:	bf00      	nop
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	08010a98 	.word	0x08010a98
 8007b2c:	08010b84 	.word	0x08010b84
 8007b30:	08010b28 	.word	0x08010b28

08007b34 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <memp_free_pool+0x1e>
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <memp_free_pool+0x3c>)
 8007b46:	f240 1295 	movw	r2, #405	@ 0x195
 8007b4a:	490a      	ldr	r1, [pc, #40]	@ (8007b74 <memp_free_pool+0x40>)
 8007b4c:	480a      	ldr	r0, [pc, #40]	@ (8007b78 <memp_free_pool+0x44>)
 8007b4e:	f007 f959 	bl	800ee04 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <memp_free_pool+0x34>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ffc1 	bl	8007ae8 <do_memp_free_pool>
 8007b66:	e000      	b.n	8007b6a <memp_free_pool+0x36>
    return;
 8007b68:	bf00      	nop
}
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	08010a98 	.word	0x08010a98
 8007b74:	08010b50 	.word	0x08010b50
 8007b78:	08010b28 	.word	0x08010b28

08007b7c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d907      	bls.n	8007b9e <memp_free+0x22>
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc0 <memp_free+0x44>)
 8007b90:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007b94:	490b      	ldr	r1, [pc, #44]	@ (8007bc4 <memp_free+0x48>)
 8007b96:	480c      	ldr	r0, [pc, #48]	@ (8007bc8 <memp_free+0x4c>)
 8007b98:	f007 f934 	bl	800ee04 <iprintf>
 8007b9c:	e00c      	b.n	8007bb8 <memp_free+0x3c>

  if (mem == NULL) {
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	4a09      	ldr	r2, [pc, #36]	@ (8007bcc <memp_free+0x50>)
 8007ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff ff9a 	bl	8007ae8 <do_memp_free_pool>
 8007bb4:	e000      	b.n	8007bb8 <memp_free+0x3c>
    return;
 8007bb6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08010a98 	.word	0x08010a98
 8007bc4:	08010ba4 	.word	0x08010ba4
 8007bc8:	08010b28 	.word	0x08010b28
 8007bcc:	08012d74 	.word	0x08012d74

08007bd0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007bd4:	bf00      	nop
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d108      	bne.n	8007c06 <netif_add+0x26>
 8007bf4:	4b57      	ldr	r3, [pc, #348]	@ (8007d54 <netif_add+0x174>)
 8007bf6:	f240 1227 	movw	r2, #295	@ 0x127
 8007bfa:	4957      	ldr	r1, [pc, #348]	@ (8007d58 <netif_add+0x178>)
 8007bfc:	4857      	ldr	r0, [pc, #348]	@ (8007d5c <netif_add+0x17c>)
 8007bfe:	f007 f901 	bl	800ee04 <iprintf>
 8007c02:	2300      	movs	r3, #0
 8007c04:	e0a2      	b.n	8007d4c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d108      	bne.n	8007c1e <netif_add+0x3e>
 8007c0c:	4b51      	ldr	r3, [pc, #324]	@ (8007d54 <netif_add+0x174>)
 8007c0e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007c12:	4953      	ldr	r1, [pc, #332]	@ (8007d60 <netif_add+0x180>)
 8007c14:	4851      	ldr	r0, [pc, #324]	@ (8007d5c <netif_add+0x17c>)
 8007c16:	f007 f8f5 	bl	800ee04 <iprintf>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e096      	b.n	8007d4c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007c24:	4b4f      	ldr	r3, [pc, #316]	@ (8007d64 <netif_add+0x184>)
 8007c26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8007d64 <netif_add+0x184>)
 8007c30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007c38:	4b4a      	ldr	r3, [pc, #296]	@ (8007d64 <netif_add+0x184>)
 8007c3a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4a45      	ldr	r2, [pc, #276]	@ (8007d68 <netif_add+0x188>)
 8007c52:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a3a      	ldr	r2, [r7, #32]
 8007c6c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8007d6c <netif_add+0x18c>)
 8007c70:	781a      	ldrb	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c7c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f913 	bl	8007eb0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	4798      	blx	r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <netif_add+0xba>
    return NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e058      	b.n	8007d4c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ca0:	2bff      	cmp	r3, #255	@ 0xff
 8007ca2:	d103      	bne.n	8007cac <netif_add+0xcc>
        netif->num = 0;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8007d70 <netif_add+0x190>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	e02b      	b.n	8007d10 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d106      	bne.n	8007cce <netif_add+0xee>
 8007cc0:	4b24      	ldr	r3, [pc, #144]	@ (8007d54 <netif_add+0x174>)
 8007cc2:	f240 128b 	movw	r2, #395	@ 0x18b
 8007cc6:	492b      	ldr	r1, [pc, #172]	@ (8007d74 <netif_add+0x194>)
 8007cc8:	4824      	ldr	r0, [pc, #144]	@ (8007d5c <netif_add+0x17c>)
 8007cca:	f007 f89b 	bl	800ee04 <iprintf>
        num_netifs++;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2bff      	cmp	r3, #255	@ 0xff
 8007cd8:	dd06      	ble.n	8007ce8 <netif_add+0x108>
 8007cda:	4b1e      	ldr	r3, [pc, #120]	@ (8007d54 <netif_add+0x174>)
 8007cdc:	f240 128d 	movw	r2, #397	@ 0x18d
 8007ce0:	4925      	ldr	r1, [pc, #148]	@ (8007d78 <netif_add+0x198>)
 8007ce2:	481e      	ldr	r0, [pc, #120]	@ (8007d5c <netif_add+0x17c>)
 8007ce4:	f007 f88e 	bl	800ee04 <iprintf>
        if (netif2->num == netif->num) {
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d108      	bne.n	8007d0a <netif_add+0x12a>
          netif->num++;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cfe:	3301      	adds	r3, #1
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007d08:	e005      	b.n	8007d16 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1d0      	bne.n	8007cb8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1be      	bne.n	8007c9a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d22:	2bfe      	cmp	r3, #254	@ 0xfe
 8007d24:	d103      	bne.n	8007d2e <netif_add+0x14e>
    netif_num = 0;
 8007d26:	4b11      	ldr	r3, [pc, #68]	@ (8007d6c <netif_add+0x18c>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
 8007d2c:	e006      	b.n	8007d3c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d34:	3301      	adds	r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	4b0c      	ldr	r3, [pc, #48]	@ (8007d6c <netif_add+0x18c>)
 8007d3a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <netif_add+0x190>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007d44:	4a0a      	ldr	r2, [pc, #40]	@ (8007d70 <netif_add+0x190>)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	08010bc0 	.word	0x08010bc0
 8007d58:	08010c8c 	.word	0x08010c8c
 8007d5c:	08010c48 	.word	0x08010c48
 8007d60:	08010ca8 	.word	0x08010ca8
 8007d64:	08012d04 	.word	0x08012d04
 8007d68:	0800818b 	.word	0x0800818b
 8007d6c:	20007d70 	.word	0x20007d70
 8007d70:	20007d68 	.word	0x20007d68
 8007d74:	08010ccc 	.word	0x08010ccc
 8007d78:	08010ce0 	.word	0x08010ce0

08007d7c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f002 fb55 	bl	800a438 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f006 fec1 	bl	800eb18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d106      	bne.n	8007dc0 <netif_do_set_ipaddr+0x20>
 8007db2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <netif_do_set_ipaddr+0x88>)
 8007db4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007db8:	491c      	ldr	r1, [pc, #112]	@ (8007e2c <netif_do_set_ipaddr+0x8c>)
 8007dba:	481d      	ldr	r0, [pc, #116]	@ (8007e30 <netif_do_set_ipaddr+0x90>)
 8007dbc:	f007 f822 	bl	800ee04 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <netif_do_set_ipaddr+0x34>
 8007dc6:	4b18      	ldr	r3, [pc, #96]	@ (8007e28 <netif_do_set_ipaddr+0x88>)
 8007dc8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007dcc:	4917      	ldr	r1, [pc, #92]	@ (8007e2c <netif_do_set_ipaddr+0x8c>)
 8007dce:	4818      	ldr	r0, [pc, #96]	@ (8007e30 <netif_do_set_ipaddr+0x90>)
 8007dd0:	f007 f818 	bl	800ee04 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d01c      	beq.n	8007e1c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3304      	adds	r3, #4
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007df2:	f107 0314 	add.w	r3, r7, #20
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff ffbf 	bl	8007d7c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <netif_do_set_ipaddr+0x6a>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	e000      	b.n	8007e0c <netif_do_set_ipaddr+0x6c>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007e10:	2101      	movs	r1, #1
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f8d2 	bl	8007fbc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e000      	b.n	8007e1e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	08010bc0 	.word	0x08010bc0
 8007e2c:	08010d10 	.word	0x08010d10
 8007e30:	08010c48 	.word	0x08010c48

08007e34 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3308      	adds	r3, #8
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d00a      	beq.n	8007e64 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <netif_do_set_netmask+0x26>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	e000      	b.n	8007e5c <netif_do_set_netmask+0x28>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	330c      	adds	r3, #12
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d00a      	beq.n	8007ea2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <netif_do_set_gw+0x26>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	e000      	b.n	8007e9a <netif_do_set_gw+0x28>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8007f40 <netif_set_addr+0x90>)
 8007ece:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8007f40 <netif_set_addr+0x90>)
 8007ed8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007ee0:	4b17      	ldr	r3, [pc, #92]	@ (8007f40 <netif_set_addr+0x90>)
 8007ee2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <netif_set_addr+0x42>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <netif_set_addr+0x46>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <netif_set_addr+0x48>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d006      	beq.n	8007f0e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f00:	f107 0310 	add.w	r3, r7, #16
 8007f04:	461a      	mov	r2, r3
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff ff49 	bl	8007da0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff ff8e 	bl	8007e34 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff ffa8 	bl	8007e72 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f28:	f107 0310 	add.w	r3, r7, #16
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff ff35 	bl	8007da0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007f36:	bf00      	nop
 8007f38:	3720      	adds	r7, #32
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	08012d04 	.word	0x08012d04

08007f44 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007f4c:	4a04      	ldr	r2, [pc, #16]	@ (8007f60 <netif_set_default+0x1c>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20007d6c 	.word	0x20007d6c

08007f64 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d107      	bne.n	8007f82 <netif_set_up+0x1e>
 8007f72:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb0 <netif_set_up+0x4c>)
 8007f74:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007f78:	490e      	ldr	r1, [pc, #56]	@ (8007fb4 <netif_set_up+0x50>)
 8007f7a:	480f      	ldr	r0, [pc, #60]	@ (8007fb8 <netif_set_up+0x54>)
 8007f7c:	f006 ff42 	bl	800ee04 <iprintf>
 8007f80:	e013      	b.n	8007faa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10c      	bne.n	8007faa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007fa2:	2103      	movs	r1, #3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f809 	bl	8007fbc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	08010bc0 	.word	0x08010bc0
 8007fb4:	08010d80 	.word	0x08010d80
 8007fb8:	08010c48 	.word	0x08010c48

08007fbc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <netif_issue_reports+0x20>
 8007fce:	4b18      	ldr	r3, [pc, #96]	@ (8008030 <netif_issue_reports+0x74>)
 8007fd0:	f240 326d 	movw	r2, #877	@ 0x36d
 8007fd4:	4917      	ldr	r1, [pc, #92]	@ (8008034 <netif_issue_reports+0x78>)
 8007fd6:	4818      	ldr	r0, [pc, #96]	@ (8008038 <netif_issue_reports+0x7c>)
 8007fd8:	f006 ff14 	bl	800ee04 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01e      	beq.n	8008028 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ff0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d017      	beq.n	8008028 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d013      	beq.n	800802a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3304      	adds	r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00e      	beq.n	800802a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fd fd69 	bl	8005af8 <etharp_request>
 8008026:	e000      	b.n	800802a <netif_issue_reports+0x6e>
    return;
 8008028:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	08010bc0 	.word	0x08010bc0
 8008034:	08010d9c 	.word	0x08010d9c
 8008038:	08010c48 	.word	0x08010c48

0800803c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d107      	bne.n	800805a <netif_set_down+0x1e>
 800804a:	4b12      	ldr	r3, [pc, #72]	@ (8008094 <netif_set_down+0x58>)
 800804c:	f240 329b 	movw	r2, #923	@ 0x39b
 8008050:	4911      	ldr	r1, [pc, #68]	@ (8008098 <netif_set_down+0x5c>)
 8008052:	4812      	ldr	r0, [pc, #72]	@ (800809c <netif_set_down+0x60>)
 8008054:	f006 fed6 	bl	800ee04 <iprintf>
 8008058:	e019      	b.n	800808e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d012      	beq.n	800808e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800806e:	f023 0301 	bic.w	r3, r3, #1
 8008072:	b2da      	uxtb	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fd f8f3 	bl	8005274 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	08010bc0 	.word	0x08010bc0
 8008098:	08010dc0 	.word	0x08010dc0
 800809c:	08010c48 	.word	0x08010c48

080080a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d107      	bne.n	80080be <netif_set_link_up+0x1e>
 80080ae:	4b13      	ldr	r3, [pc, #76]	@ (80080fc <netif_set_link_up+0x5c>)
 80080b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80080b4:	4912      	ldr	r1, [pc, #72]	@ (8008100 <netif_set_link_up+0x60>)
 80080b6:	4813      	ldr	r0, [pc, #76]	@ (8008104 <netif_set_link_up+0x64>)
 80080b8:	f006 fea4 	bl	800ee04 <iprintf>
 80080bc:	e01b      	b.n	80080f6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d114      	bne.n	80080f6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80080d2:	f043 0304 	orr.w	r3, r3, #4
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80080de:	2103      	movs	r1, #3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff ff6b 	bl	8007fbc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <netif_set_link_up+0x56>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	08010bc0 	.word	0x08010bc0
 8008100:	08010de0 	.word	0x08010de0
 8008104:	08010c48 	.word	0x08010c48

08008108 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d107      	bne.n	8008126 <netif_set_link_down+0x1e>
 8008116:	4b11      	ldr	r3, [pc, #68]	@ (800815c <netif_set_link_down+0x54>)
 8008118:	f240 4206 	movw	r2, #1030	@ 0x406
 800811c:	4910      	ldr	r1, [pc, #64]	@ (8008160 <netif_set_link_down+0x58>)
 800811e:	4811      	ldr	r0, [pc, #68]	@ (8008164 <netif_set_link_down+0x5c>)
 8008120:	f006 fe70 	bl	800ee04 <iprintf>
 8008124:	e017      	b.n	8008156 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d010      	beq.n	8008156 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800813a:	f023 0304 	bic.w	r3, r3, #4
 800813e:	b2da      	uxtb	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <netif_set_link_down+0x4e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	08010bc0 	.word	0x08010bc0
 8008160:	08010e04 	.word	0x08010e04
 8008164:	08010c48 	.word	0x08010c48

08008168 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	61da      	str	r2, [r3, #28]
  }
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008196:	f06f 030b 	mvn.w	r3, #11
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
	...

080081a8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d013      	beq.n	80081e0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80081b8:	4b0d      	ldr	r3, [pc, #52]	@ (80081f0 <netif_get_by_index+0x48>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	e00c      	b.n	80081da <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081c6:	3301      	adds	r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	79fa      	ldrb	r2, [r7, #7]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d101      	bne.n	80081d4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	e006      	b.n	80081e2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1ef      	bne.n	80081c0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20007d68 	.word	0x20007d68

080081f4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80081fa:	4b0c      	ldr	r3, [pc, #48]	@ (800822c <pbuf_free_ooseq+0x38>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008200:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <pbuf_free_ooseq+0x3c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	e00a      	b.n	800821e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 f94f 	bl	800a4b4 <tcp_free_ooseq>
      return;
 8008216:	e005      	b.n	8008224 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	607b      	str	r3, [r7, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f1      	bne.n	8008208 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20007d71 	.word	0x20007d71
 8008230:	20007d80 	.word	0x20007d80

08008234 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008238:	4b03      	ldr	r3, [pc, #12]	@ (8008248 <pbuf_pool_is_empty+0x14>)
 800823a:	2201      	movs	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800823e:	bf00      	nop
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	20007d71 	.word	0x20007d71

0800824c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4611      	mov	r1, r2
 8008258:	461a      	mov	r2, r3
 800825a:	460b      	mov	r3, r1
 800825c:	80fb      	strh	r3, [r7, #6]
 800825e:	4613      	mov	r3, r2
 8008260:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	88fa      	ldrh	r2, [r7, #6]
 8008272:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	88ba      	ldrh	r2, [r7, #4]
 8008278:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800827a:	8b3b      	ldrh	r3, [r7, #24]
 800827c:	b2da      	uxtb	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	7f3a      	ldrb	r2, [r7, #28]
 8008286:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	73da      	strb	r2, [r3, #15]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08c      	sub	sp, #48	@ 0x30
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
 80082aa:	460b      	mov	r3, r1
 80082ac:	80bb      	strh	r3, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80082b6:	887b      	ldrh	r3, [r7, #2]
 80082b8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80082bc:	d07f      	beq.n	80083be <pbuf_alloc+0x11e>
 80082be:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80082c2:	f300 80c8 	bgt.w	8008456 <pbuf_alloc+0x1b6>
 80082c6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80082ca:	d010      	beq.n	80082ee <pbuf_alloc+0x4e>
 80082cc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80082d0:	f300 80c1 	bgt.w	8008456 <pbuf_alloc+0x1b6>
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d002      	beq.n	80082de <pbuf_alloc+0x3e>
 80082d8:	2b41      	cmp	r3, #65	@ 0x41
 80082da:	f040 80bc 	bne.w	8008456 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80082de:	887a      	ldrh	r2, [r7, #2]
 80082e0:	88bb      	ldrh	r3, [r7, #4]
 80082e2:	4619      	mov	r1, r3
 80082e4:	2000      	movs	r0, #0
 80082e6:	f000 f8d1 	bl	800848c <pbuf_alloc_reference>
 80082ea:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80082ec:	e0bd      	b.n	800846a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80082f6:	88bb      	ldrh	r3, [r7, #4]
 80082f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80082fa:	2008      	movs	r0, #8
 80082fc:	f7ff fbce 	bl	8007a9c <memp_malloc>
 8008300:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d109      	bne.n	800831c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008308:	f7ff ff94 	bl	8008234 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008314:	f000 faa8 	bl	8008868 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	e0a7      	b.n	800846c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800831c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800831e:	3303      	adds	r3, #3
 8008320:	b29b      	uxth	r3, r3
 8008322:	f023 0303 	bic.w	r3, r3, #3
 8008326:	b29b      	uxth	r3, r3
 8008328:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800832c:	b29b      	uxth	r3, r3
 800832e:	8b7a      	ldrh	r2, [r7, #26]
 8008330:	4293      	cmp	r3, r2
 8008332:	bf28      	it	cs
 8008334:	4613      	movcs	r3, r2
 8008336:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008338:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800833a:	3310      	adds	r3, #16
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4413      	add	r3, r2
 8008340:	3303      	adds	r3, #3
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	4618      	mov	r0, r3
 8008348:	89f9      	ldrh	r1, [r7, #14]
 800834a:	8b7a      	ldrh	r2, [r7, #26]
 800834c:	2300      	movs	r3, #0
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	887b      	ldrh	r3, [r7, #2]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	460b      	mov	r3, r1
 8008356:	4601      	mov	r1, r0
 8008358:	6938      	ldr	r0, [r7, #16]
 800835a:	f7ff ff77 	bl	800824c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d006      	beq.n	8008378 <pbuf_alloc+0xd8>
 800836a:	4b42      	ldr	r3, [pc, #264]	@ (8008474 <pbuf_alloc+0x1d4>)
 800836c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008370:	4941      	ldr	r1, [pc, #260]	@ (8008478 <pbuf_alloc+0x1d8>)
 8008372:	4842      	ldr	r0, [pc, #264]	@ (800847c <pbuf_alloc+0x1dc>)
 8008374:	f006 fd46 	bl	800ee04 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008378:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800837a:	3303      	adds	r3, #3
 800837c:	f023 0303 	bic.w	r3, r3, #3
 8008380:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8008384:	d106      	bne.n	8008394 <pbuf_alloc+0xf4>
 8008386:	4b3b      	ldr	r3, [pc, #236]	@ (8008474 <pbuf_alloc+0x1d4>)
 8008388:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800838c:	493c      	ldr	r1, [pc, #240]	@ (8008480 <pbuf_alloc+0x1e0>)
 800838e:	483b      	ldr	r0, [pc, #236]	@ (800847c <pbuf_alloc+0x1dc>)
 8008390:	f006 fd38 	bl	800ee04 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
 800839e:	e002      	b.n	80083a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80083aa:	8b7a      	ldrh	r2, [r7, #26]
 80083ac:	89fb      	ldrh	r3, [r7, #14]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80083b6:	8b7b      	ldrh	r3, [r7, #26]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d19e      	bne.n	80082fa <pbuf_alloc+0x5a>
      break;
 80083bc:	e055      	b.n	800846a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80083be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80083c0:	3303      	adds	r3, #3
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f023 0303 	bic.w	r3, r3, #3
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	88bb      	ldrh	r3, [r7, #4]
 80083cc:	3303      	adds	r3, #3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	4413      	add	r3, r2
 80083d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80083da:	8b3b      	ldrh	r3, [r7, #24]
 80083dc:	3310      	adds	r3, #16
 80083de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80083e0:	8b3a      	ldrh	r2, [r7, #24]
 80083e2:	88bb      	ldrh	r3, [r7, #4]
 80083e4:	3303      	adds	r3, #3
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d306      	bcc.n	80083fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80083ee:	8afa      	ldrh	r2, [r7, #22]
 80083f0:	88bb      	ldrh	r3, [r7, #4]
 80083f2:	3303      	adds	r3, #3
 80083f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d201      	bcs.n	8008400 <pbuf_alloc+0x160>
        return NULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e035      	b.n	800846c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008400:	8afb      	ldrh	r3, [r7, #22]
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff f9ba 	bl	800777c <mem_malloc>
 8008408:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <pbuf_alloc+0x174>
        return NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	e02b      	b.n	800846c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008414:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008416:	3310      	adds	r3, #16
 8008418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841a:	4413      	add	r3, r2
 800841c:	3303      	adds	r3, #3
 800841e:	f023 0303 	bic.w	r3, r3, #3
 8008422:	4618      	mov	r0, r3
 8008424:	88b9      	ldrh	r1, [r7, #4]
 8008426:	88ba      	ldrh	r2, [r7, #4]
 8008428:	2300      	movs	r3, #0
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	887b      	ldrh	r3, [r7, #2]
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	460b      	mov	r3, r1
 8008432:	4601      	mov	r1, r0
 8008434:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008436:	f7ff ff09 	bl	800824c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d010      	beq.n	8008468 <pbuf_alloc+0x1c8>
 8008446:	4b0b      	ldr	r3, [pc, #44]	@ (8008474 <pbuf_alloc+0x1d4>)
 8008448:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800844c:	490d      	ldr	r1, [pc, #52]	@ (8008484 <pbuf_alloc+0x1e4>)
 800844e:	480b      	ldr	r0, [pc, #44]	@ (800847c <pbuf_alloc+0x1dc>)
 8008450:	f006 fcd8 	bl	800ee04 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008454:	e008      	b.n	8008468 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008456:	4b07      	ldr	r3, [pc, #28]	@ (8008474 <pbuf_alloc+0x1d4>)
 8008458:	f240 1227 	movw	r2, #295	@ 0x127
 800845c:	490a      	ldr	r1, [pc, #40]	@ (8008488 <pbuf_alloc+0x1e8>)
 800845e:	4807      	ldr	r0, [pc, #28]	@ (800847c <pbuf_alloc+0x1dc>)
 8008460:	f006 fcd0 	bl	800ee04 <iprintf>
      return NULL;
 8008464:	2300      	movs	r3, #0
 8008466:	e001      	b.n	800846c <pbuf_alloc+0x1cc>
      break;
 8008468:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800846c:	4618      	mov	r0, r3
 800846e:	3728      	adds	r7, #40	@ 0x28
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	08010e28 	.word	0x08010e28
 8008478:	08010e94 	.word	0x08010e94
 800847c:	08010ec4 	.word	0x08010ec4
 8008480:	08010eec 	.word	0x08010eec
 8008484:	08010f20 	.word	0x08010f20
 8008488:	08010f4c 	.word	0x08010f4c

0800848c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af02      	add	r7, sp, #8
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	807b      	strh	r3, [r7, #2]
 8008498:	4613      	mov	r3, r2
 800849a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800849c:	883b      	ldrh	r3, [r7, #0]
 800849e:	2b41      	cmp	r3, #65	@ 0x41
 80084a0:	d009      	beq.n	80084b6 <pbuf_alloc_reference+0x2a>
 80084a2:	883b      	ldrh	r3, [r7, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d006      	beq.n	80084b6 <pbuf_alloc_reference+0x2a>
 80084a8:	4b0f      	ldr	r3, [pc, #60]	@ (80084e8 <pbuf_alloc_reference+0x5c>)
 80084aa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80084ae:	490f      	ldr	r1, [pc, #60]	@ (80084ec <pbuf_alloc_reference+0x60>)
 80084b0:	480f      	ldr	r0, [pc, #60]	@ (80084f0 <pbuf_alloc_reference+0x64>)
 80084b2:	f006 fca7 	bl	800ee04 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80084b6:	2007      	movs	r0, #7
 80084b8:	f7ff faf0 	bl	8007a9c <memp_malloc>
 80084bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	e00b      	b.n	80084e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80084c8:	8879      	ldrh	r1, [r7, #2]
 80084ca:	887a      	ldrh	r2, [r7, #2]
 80084cc:	2300      	movs	r3, #0
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	883b      	ldrh	r3, [r7, #0]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	460b      	mov	r3, r1
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff feb7 	bl	800824c <pbuf_init_alloced_pbuf>
  return p;
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	08010e28 	.word	0x08010e28
 80084ec:	08010f68 	.word	0x08010f68
 80084f0:	08010ec4 	.word	0x08010ec4

080084f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
 8008500:	460b      	mov	r3, r1
 8008502:	81bb      	strh	r3, [r7, #12]
 8008504:	4613      	mov	r3, r2
 8008506:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800850c:	8a7b      	ldrh	r3, [r7, #18]
 800850e:	3303      	adds	r3, #3
 8008510:	f023 0203 	bic.w	r2, r3, #3
 8008514:	89bb      	ldrh	r3, [r7, #12]
 8008516:	441a      	add	r2, r3
 8008518:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800851a:	429a      	cmp	r2, r3
 800851c:	d901      	bls.n	8008522 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	e018      	b.n	8008554 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008528:	8a7b      	ldrh	r3, [r7, #18]
 800852a:	3303      	adds	r3, #3
 800852c:	f023 0303 	bic.w	r3, r3, #3
 8008530:	6a3a      	ldr	r2, [r7, #32]
 8008532:	4413      	add	r3, r2
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	e001      	b.n	800853c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	89b9      	ldrh	r1, [r7, #12]
 8008540:	89ba      	ldrh	r2, [r7, #12]
 8008542:	2302      	movs	r3, #2
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	897b      	ldrh	r3, [r7, #10]
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	460b      	mov	r3, r1
 800854c:	6979      	ldr	r1, [r7, #20]
 800854e:	f7ff fe7d 	bl	800824c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008552:	687b      	ldr	r3, [r7, #4]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <pbuf_realloc+0x20>
 800856e:	4b3a      	ldr	r3, [pc, #232]	@ (8008658 <pbuf_realloc+0xfc>)
 8008570:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008574:	4939      	ldr	r1, [pc, #228]	@ (800865c <pbuf_realloc+0x100>)
 8008576:	483a      	ldr	r0, [pc, #232]	@ (8008660 <pbuf_realloc+0x104>)
 8008578:	f006 fc44 	bl	800ee04 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	891b      	ldrh	r3, [r3, #8]
 8008580:	887a      	ldrh	r2, [r7, #2]
 8008582:	429a      	cmp	r2, r3
 8008584:	d263      	bcs.n	800864e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	891a      	ldrh	r2, [r3, #8]
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008590:	887b      	ldrh	r3, [r7, #2]
 8008592:	817b      	strh	r3, [r7, #10]
  q = p;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008598:	e018      	b.n	80085cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	895b      	ldrh	r3, [r3, #10]
 800859e:	897a      	ldrh	r2, [r7, #10]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	891a      	ldrh	r2, [r3, #8]
 80085a8:	893b      	ldrh	r3, [r7, #8]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <pbuf_realloc+0x70>
 80085be:	4b26      	ldr	r3, [pc, #152]	@ (8008658 <pbuf_realloc+0xfc>)
 80085c0:	f240 12af 	movw	r2, #431	@ 0x1af
 80085c4:	4927      	ldr	r1, [pc, #156]	@ (8008664 <pbuf_realloc+0x108>)
 80085c6:	4826      	ldr	r0, [pc, #152]	@ (8008660 <pbuf_realloc+0x104>)
 80085c8:	f006 fc1c 	bl	800ee04 <iprintf>
  while (rem_len > q->len) {
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	895b      	ldrh	r3, [r3, #10]
 80085d0:	897a      	ldrh	r2, [r7, #10]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d8e1      	bhi.n	800859a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	7b1b      	ldrb	r3, [r3, #12]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d121      	bne.n	8008626 <pbuf_realloc+0xca>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	895b      	ldrh	r3, [r3, #10]
 80085e6:	897a      	ldrh	r2, [r7, #10]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d01c      	beq.n	8008626 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	7b5b      	ldrb	r3, [r3, #13]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d116      	bne.n	8008626 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	b29a      	uxth	r2, r3
 8008602:	897b      	ldrh	r3, [r7, #10]
 8008604:	4413      	add	r3, r2
 8008606:	b29b      	uxth	r3, r3
 8008608:	4619      	mov	r1, r3
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7fe ffba 	bl	8007584 <mem_trim>
 8008610:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <pbuf_realloc+0xca>
 8008618:	4b0f      	ldr	r3, [pc, #60]	@ (8008658 <pbuf_realloc+0xfc>)
 800861a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800861e:	4912      	ldr	r1, [pc, #72]	@ (8008668 <pbuf_realloc+0x10c>)
 8008620:	480f      	ldr	r0, [pc, #60]	@ (8008660 <pbuf_realloc+0x104>)
 8008622:	f006 fbef 	bl	800ee04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	897a      	ldrh	r2, [r7, #10]
 800862a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	895a      	ldrh	r2, [r3, #10]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d004      	beq.n	8008646 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f911 	bl	8008868 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	e000      	b.n	8008650 <pbuf_realloc+0xf4>
    return;
 800864e:	bf00      	nop

}
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	08010e28 	.word	0x08010e28
 800865c:	08010f7c 	.word	0x08010f7c
 8008660:	08010ec4 	.word	0x08010ec4
 8008664:	08010f94 	.word	0x08010f94
 8008668:	08010fac 	.word	0x08010fac

0800866c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <pbuf_add_header_impl+0x22>
 8008680:	4b2b      	ldr	r3, [pc, #172]	@ (8008730 <pbuf_add_header_impl+0xc4>)
 8008682:	f240 12df 	movw	r2, #479	@ 0x1df
 8008686:	492b      	ldr	r1, [pc, #172]	@ (8008734 <pbuf_add_header_impl+0xc8>)
 8008688:	482b      	ldr	r0, [pc, #172]	@ (8008738 <pbuf_add_header_impl+0xcc>)
 800868a:	f006 fbbb 	bl	800ee04 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <pbuf_add_header_impl+0x30>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800869a:	d301      	bcc.n	80086a0 <pbuf_add_header_impl+0x34>
    return 1;
 800869c:	2301      	movs	r3, #1
 800869e:	e043      	b.n	8008728 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <pbuf_add_header_impl+0x3e>
    return 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e03e      	b.n	8008728 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	891a      	ldrh	r2, [r3, #8]
 80086b2:	8a7b      	ldrh	r3, [r7, #18]
 80086b4:	4413      	add	r3, r2
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	8a7a      	ldrh	r2, [r7, #18]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d901      	bls.n	80086c2 <pbuf_add_header_impl+0x56>
    return 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	e032      	b.n	8008728 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	7b1b      	ldrb	r3, [r3, #12]
 80086c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80086c8:	8a3b      	ldrh	r3, [r7, #16]
 80086ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00c      	beq.n	80086ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	425b      	negs	r3, r3
 80086da:	4413      	add	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3310      	adds	r3, #16
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d20d      	bcs.n	8008704 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e01d      	b.n	8008728 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d006      	beq.n	8008700 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	425b      	negs	r3, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	e001      	b.n	8008704 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008700:	2301      	movs	r3, #1
 8008702:	e011      	b.n	8008728 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	895a      	ldrh	r2, [r3, #10]
 800870e:	8a7b      	ldrh	r3, [r7, #18]
 8008710:	4413      	add	r3, r2
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	891a      	ldrh	r2, [r3, #8]
 800871c:	8a7b      	ldrh	r3, [r7, #18]
 800871e:	4413      	add	r3, r2
 8008720:	b29a      	uxth	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	811a      	strh	r2, [r3, #8]


  return 0;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	08010e28 	.word	0x08010e28
 8008734:	08010fc8 	.word	0x08010fc8
 8008738:	08010ec4 	.word	0x08010ec4

0800873c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008746:	2200      	movs	r2, #0
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff ff8e 	bl	800866c <pbuf_add_header_impl>
 8008750:	4603      	mov	r3, r0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d106      	bne.n	800877a <pbuf_remove_header+0x1e>
 800876c:	4b20      	ldr	r3, [pc, #128]	@ (80087f0 <pbuf_remove_header+0x94>)
 800876e:	f240 224b 	movw	r2, #587	@ 0x24b
 8008772:	4920      	ldr	r1, [pc, #128]	@ (80087f4 <pbuf_remove_header+0x98>)
 8008774:	4820      	ldr	r0, [pc, #128]	@ (80087f8 <pbuf_remove_header+0x9c>)
 8008776:	f006 fb45 	bl	800ee04 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <pbuf_remove_header+0x2c>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008786:	d301      	bcc.n	800878c <pbuf_remove_header+0x30>
    return 1;
 8008788:	2301      	movs	r3, #1
 800878a:	e02c      	b.n	80087e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <pbuf_remove_header+0x3a>
    return 0;
 8008792:	2300      	movs	r3, #0
 8008794:	e027      	b.n	80087e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	895b      	ldrh	r3, [r3, #10]
 800879e:	89fa      	ldrh	r2, [r7, #14]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d908      	bls.n	80087b6 <pbuf_remove_header+0x5a>
 80087a4:	4b12      	ldr	r3, [pc, #72]	@ (80087f0 <pbuf_remove_header+0x94>)
 80087a6:	f240 2255 	movw	r2, #597	@ 0x255
 80087aa:	4914      	ldr	r1, [pc, #80]	@ (80087fc <pbuf_remove_header+0xa0>)
 80087ac:	4812      	ldr	r0, [pc, #72]	@ (80087f8 <pbuf_remove_header+0x9c>)
 80087ae:	f006 fb29 	bl	800ee04 <iprintf>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e017      	b.n	80087e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	441a      	add	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	895a      	ldrh	r2, [r3, #10]
 80087cc:	89fb      	ldrh	r3, [r7, #14]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	891a      	ldrh	r2, [r3, #8]
 80087da:	89fb      	ldrh	r3, [r7, #14]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	b29a      	uxth	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	08010e28 	.word	0x08010e28
 80087f4:	08010fc8 	.word	0x08010fc8
 80087f8:	08010ec4 	.word	0x08010ec4
 80087fc:	08010fd4 	.word	0x08010fd4

08008800 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
 800880c:	4613      	mov	r3, r2
 800880e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008810:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008814:	2b00      	cmp	r3, #0
 8008816:	da08      	bge.n	800882a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008818:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800881c:	425b      	negs	r3, r3
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ff9b 	bl	800875c <pbuf_remove_header>
 8008826:	4603      	mov	r3, r0
 8008828:	e007      	b.n	800883a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800882a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800882e:	787a      	ldrb	r2, [r7, #1]
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff ff1a 	bl	800866c <pbuf_add_header_impl>
 8008838:	4603      	mov	r3, r0
  }
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800884e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008852:	2201      	movs	r2, #1
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff ffd2 	bl	8008800 <pbuf_header_impl>
 800885c:	4603      	mov	r3, r0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10b      	bne.n	800888e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d106      	bne.n	800888a <pbuf_free+0x22>
 800887c:	4b38      	ldr	r3, [pc, #224]	@ (8008960 <pbuf_free+0xf8>)
 800887e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008882:	4938      	ldr	r1, [pc, #224]	@ (8008964 <pbuf_free+0xfc>)
 8008884:	4838      	ldr	r0, [pc, #224]	@ (8008968 <pbuf_free+0x100>)
 8008886:	f006 fabd 	bl	800ee04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800888a:	2300      	movs	r3, #0
 800888c:	e063      	b.n	8008956 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008892:	e05c      	b.n	800894e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7b9b      	ldrb	r3, [r3, #14]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d106      	bne.n	80088aa <pbuf_free+0x42>
 800889c:	4b30      	ldr	r3, [pc, #192]	@ (8008960 <pbuf_free+0xf8>)
 800889e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80088a2:	4932      	ldr	r1, [pc, #200]	@ (800896c <pbuf_free+0x104>)
 80088a4:	4830      	ldr	r0, [pc, #192]	@ (8008968 <pbuf_free+0x100>)
 80088a6:	f006 faad 	bl	800ee04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	7b9b      	ldrb	r3, [r3, #14]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	739a      	strb	r2, [r3, #14]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7b9b      	ldrb	r3, [r3, #14]
 80088ba:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80088bc:	7dbb      	ldrb	r3, [r7, #22]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d143      	bne.n	800894a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7b1b      	ldrb	r3, [r3, #12]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7b5b      	ldrb	r3, [r3, #13]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d011      	beq.n	8008902 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <pbuf_free+0x90>
 80088ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008960 <pbuf_free+0xf8>)
 80088ec:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80088f0:	491f      	ldr	r1, [pc, #124]	@ (8008970 <pbuf_free+0x108>)
 80088f2:	481d      	ldr	r0, [pc, #116]	@ (8008968 <pbuf_free+0x100>)
 80088f4:	f006 fa86 	bl	800ee04 <iprintf>
        pc->custom_free_function(p);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	4798      	blx	r3
 8008900:	e01d      	b.n	800893e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d104      	bne.n	8008912 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	2008      	movs	r0, #8
 800890c:	f7ff f936 	bl	8007b7c <memp_free>
 8008910:	e015      	b.n	800893e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d104      	bne.n	8008922 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	2007      	movs	r0, #7
 800891c:	f7ff f92e 	bl	8007b7c <memp_free>
 8008920:	e00d      	b.n	800893e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d103      	bne.n	8008930 <pbuf_free+0xc8>
          mem_free(p);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fe fdc1 	bl	80074b0 <mem_free>
 800892e:	e006      	b.n	800893e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008930:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <pbuf_free+0xf8>)
 8008932:	f240 320f 	movw	r2, #783	@ 0x30f
 8008936:	490f      	ldr	r1, [pc, #60]	@ (8008974 <pbuf_free+0x10c>)
 8008938:	480b      	ldr	r0, [pc, #44]	@ (8008968 <pbuf_free+0x100>)
 800893a:	f006 fa63 	bl	800ee04 <iprintf>
        }
      }
      count++;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	3301      	adds	r3, #1
 8008942:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	e001      	b.n	800894e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800894a:	2300      	movs	r3, #0
 800894c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d19f      	bne.n	8008894 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008954:	7dfb      	ldrb	r3, [r7, #23]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	08010e28 	.word	0x08010e28
 8008964:	08010fc8 	.word	0x08010fc8
 8008968:	08010ec4 	.word	0x08010ec4
 800896c:	08010ff4 	.word	0x08010ff4
 8008970:	0801100c 	.word	0x0801100c
 8008974:	08011030 	.word	0x08011030

08008978 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008984:	e005      	b.n	8008992 <pbuf_clen+0x1a>
    ++len;
 8008986:	89fb      	ldrh	r3, [r7, #14]
 8008988:	3301      	adds	r3, #1
 800898a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1f6      	bne.n	8008986 <pbuf_clen+0xe>
  }
  return len;
 8008998:	89fb      	ldrh	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d010      	beq.n	80089d8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	7b9b      	ldrb	r3, [r3, #14]
 80089ba:	3301      	adds	r3, #1
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7b9b      	ldrb	r3, [r3, #14]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <pbuf_ref+0x30>
 80089ca:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <pbuf_ref+0x38>)
 80089cc:	f240 3242 	movw	r2, #834	@ 0x342
 80089d0:	4904      	ldr	r1, [pc, #16]	@ (80089e4 <pbuf_ref+0x3c>)
 80089d2:	4805      	ldr	r0, [pc, #20]	@ (80089e8 <pbuf_ref+0x40>)
 80089d4:	f006 fa16 	bl	800ee04 <iprintf>
  }
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	08010e28 	.word	0x08010e28
 80089e4:	08011044 	.word	0x08011044
 80089e8:	08010ec4 	.word	0x08010ec4

080089ec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <pbuf_cat+0x16>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d107      	bne.n	8008a12 <pbuf_cat+0x26>
 8008a02:	4b20      	ldr	r3, [pc, #128]	@ (8008a84 <pbuf_cat+0x98>)
 8008a04:	f240 3259 	movw	r2, #857	@ 0x359
 8008a08:	491f      	ldr	r1, [pc, #124]	@ (8008a88 <pbuf_cat+0x9c>)
 8008a0a:	4820      	ldr	r0, [pc, #128]	@ (8008a8c <pbuf_cat+0xa0>)
 8008a0c:	f006 f9fa 	bl	800ee04 <iprintf>
 8008a10:	e034      	b.n	8008a7c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e00a      	b.n	8008a2e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	891a      	ldrh	r2, [r3, #8]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	891b      	ldrh	r3, [r3, #8]
 8008a20:	4413      	add	r3, r2
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1f0      	bne.n	8008a18 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	891a      	ldrh	r2, [r3, #8]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	895b      	ldrh	r3, [r3, #10]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d006      	beq.n	8008a50 <pbuf_cat+0x64>
 8008a42:	4b10      	ldr	r3, [pc, #64]	@ (8008a84 <pbuf_cat+0x98>)
 8008a44:	f240 3262 	movw	r2, #866	@ 0x362
 8008a48:	4911      	ldr	r1, [pc, #68]	@ (8008a90 <pbuf_cat+0xa4>)
 8008a4a:	4810      	ldr	r0, [pc, #64]	@ (8008a8c <pbuf_cat+0xa0>)
 8008a4c:	f006 f9da 	bl	800ee04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d006      	beq.n	8008a66 <pbuf_cat+0x7a>
 8008a58:	4b0a      	ldr	r3, [pc, #40]	@ (8008a84 <pbuf_cat+0x98>)
 8008a5a:	f240 3263 	movw	r2, #867	@ 0x363
 8008a5e:	490d      	ldr	r1, [pc, #52]	@ (8008a94 <pbuf_cat+0xa8>)
 8008a60:	480a      	ldr	r0, [pc, #40]	@ (8008a8c <pbuf_cat+0xa0>)
 8008a62:	f006 f9cf 	bl	800ee04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	891a      	ldrh	r2, [r3, #8]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	891b      	ldrh	r3, [r3, #8]
 8008a6e:	4413      	add	r3, r2
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	08010e28 	.word	0x08010e28
 8008a88:	08011058 	.word	0x08011058
 8008a8c:	08010ec4 	.word	0x08010ec4
 8008a90:	08011090 	.word	0x08011090
 8008a94:	080110c0 	.word	0x080110c0

08008a98 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ffa1 	bl	80089ec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008aaa:	6838      	ldr	r0, [r7, #0]
 8008aac:	f7ff ff7c 	bl	80089a8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d008      	beq.n	8008ae2 <pbuf_copy+0x2a>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d005      	beq.n	8008ae2 <pbuf_copy+0x2a>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	891a      	ldrh	r2, [r3, #8]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	891b      	ldrh	r3, [r3, #8]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d209      	bcs.n	8008af6 <pbuf_copy+0x3e>
 8008ae2:	4b57      	ldr	r3, [pc, #348]	@ (8008c40 <pbuf_copy+0x188>)
 8008ae4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008ae8:	4956      	ldr	r1, [pc, #344]	@ (8008c44 <pbuf_copy+0x18c>)
 8008aea:	4857      	ldr	r0, [pc, #348]	@ (8008c48 <pbuf_copy+0x190>)
 8008aec:	f006 f98a 	bl	800ee04 <iprintf>
 8008af0:	f06f 030f 	mvn.w	r3, #15
 8008af4:	e09f      	b.n	8008c36 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	895b      	ldrh	r3, [r3, #10]
 8008afa:	461a      	mov	r2, r3
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	895b      	ldrh	r3, [r3, #10]
 8008b04:	4619      	mov	r1, r3
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	1acb      	subs	r3, r1, r3
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d306      	bcc.n	8008b1c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	895b      	ldrh	r3, [r3, #10]
 8008b12:	461a      	mov	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e005      	b.n	8008b28 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	895b      	ldrh	r3, [r3, #10]
 8008b20:	461a      	mov	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	18d0      	adds	r0, r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	4413      	add	r3, r2
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	f006 fa79 	bl	800f032 <memcpy>
    offset_to += len;
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	895b      	ldrh	r3, [r3, #10]
 8008b54:	461a      	mov	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d906      	bls.n	8008b6a <pbuf_copy+0xb2>
 8008b5c:	4b38      	ldr	r3, [pc, #224]	@ (8008c40 <pbuf_copy+0x188>)
 8008b5e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008b62:	493a      	ldr	r1, [pc, #232]	@ (8008c4c <pbuf_copy+0x194>)
 8008b64:	4838      	ldr	r0, [pc, #224]	@ (8008c48 <pbuf_copy+0x190>)
 8008b66:	f006 f94d 	bl	800ee04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	895b      	ldrh	r3, [r3, #10]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d906      	bls.n	8008b84 <pbuf_copy+0xcc>
 8008b76:	4b32      	ldr	r3, [pc, #200]	@ (8008c40 <pbuf_copy+0x188>)
 8008b78:	f240 32da 	movw	r2, #986	@ 0x3da
 8008b7c:	4934      	ldr	r1, [pc, #208]	@ (8008c50 <pbuf_copy+0x198>)
 8008b7e:	4832      	ldr	r0, [pc, #200]	@ (8008c48 <pbuf_copy+0x190>)
 8008b80:	f006 f940 	bl	800ee04 <iprintf>
    if (offset_from >= p_from->len) {
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	895b      	ldrh	r3, [r3, #10]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d304      	bcc.n	8008b9a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	895b      	ldrh	r3, [r3, #10]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d114      	bne.n	8008bd0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10c      	bne.n	8008bd0 <pbuf_copy+0x118>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d009      	beq.n	8008bd0 <pbuf_copy+0x118>
 8008bbc:	4b20      	ldr	r3, [pc, #128]	@ (8008c40 <pbuf_copy+0x188>)
 8008bbe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008bc2:	4924      	ldr	r1, [pc, #144]	@ (8008c54 <pbuf_copy+0x19c>)
 8008bc4:	4820      	ldr	r0, [pc, #128]	@ (8008c48 <pbuf_copy+0x190>)
 8008bc6:	f006 f91d 	bl	800ee04 <iprintf>
 8008bca:	f06f 030f 	mvn.w	r3, #15
 8008bce:	e032      	b.n	8008c36 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d013      	beq.n	8008bfe <pbuf_copy+0x146>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	895a      	ldrh	r2, [r3, #10]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	891b      	ldrh	r3, [r3, #8]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d10d      	bne.n	8008bfe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <pbuf_copy+0x146>
 8008bea:	4b15      	ldr	r3, [pc, #84]	@ (8008c40 <pbuf_copy+0x188>)
 8008bec:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008bf0:	4919      	ldr	r1, [pc, #100]	@ (8008c58 <pbuf_copy+0x1a0>)
 8008bf2:	4815      	ldr	r0, [pc, #84]	@ (8008c48 <pbuf_copy+0x190>)
 8008bf4:	f006 f906 	bl	800ee04 <iprintf>
 8008bf8:	f06f 0305 	mvn.w	r3, #5
 8008bfc:	e01b      	b.n	8008c36 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d013      	beq.n	8008c2c <pbuf_copy+0x174>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	895a      	ldrh	r2, [r3, #10]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	891b      	ldrh	r3, [r3, #8]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d10d      	bne.n	8008c2c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d009      	beq.n	8008c2c <pbuf_copy+0x174>
 8008c18:	4b09      	ldr	r3, [pc, #36]	@ (8008c40 <pbuf_copy+0x188>)
 8008c1a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008c1e:	490e      	ldr	r1, [pc, #56]	@ (8008c58 <pbuf_copy+0x1a0>)
 8008c20:	4809      	ldr	r0, [pc, #36]	@ (8008c48 <pbuf_copy+0x190>)
 8008c22:	f006 f8ef 	bl	800ee04 <iprintf>
 8008c26:	f06f 0305 	mvn.w	r3, #5
 8008c2a:	e004      	b.n	8008c36 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f47f af61 	bne.w	8008af6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	08010e28 	.word	0x08010e28
 8008c44:	0801110c 	.word	0x0801110c
 8008c48:	08010ec4 	.word	0x08010ec4
 8008c4c:	0801113c 	.word	0x0801113c
 8008c50:	08011154 	.word	0x08011154
 8008c54:	08011170 	.word	0x08011170
 8008c58:	08011180 	.word	0x08011180

08008c5c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	4611      	mov	r1, r2
 8008c68:	461a      	mov	r2, r3
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	80fb      	strh	r3, [r7, #6]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d108      	bne.n	8008c92 <pbuf_copy_partial+0x36>
 8008c80:	4b2b      	ldr	r3, [pc, #172]	@ (8008d30 <pbuf_copy_partial+0xd4>)
 8008c82:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008c86:	492b      	ldr	r1, [pc, #172]	@ (8008d34 <pbuf_copy_partial+0xd8>)
 8008c88:	482b      	ldr	r0, [pc, #172]	@ (8008d38 <pbuf_copy_partial+0xdc>)
 8008c8a:	f006 f8bb 	bl	800ee04 <iprintf>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e04a      	b.n	8008d28 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d108      	bne.n	8008caa <pbuf_copy_partial+0x4e>
 8008c98:	4b25      	ldr	r3, [pc, #148]	@ (8008d30 <pbuf_copy_partial+0xd4>)
 8008c9a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008c9e:	4927      	ldr	r1, [pc, #156]	@ (8008d3c <pbuf_copy_partial+0xe0>)
 8008ca0:	4825      	ldr	r0, [pc, #148]	@ (8008d38 <pbuf_copy_partial+0xdc>)
 8008ca2:	f006 f8af 	bl	800ee04 <iprintf>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e03e      	b.n	8008d28 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	61fb      	str	r3, [r7, #28]
 8008cae:	e034      	b.n	8008d1a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008cb0:	88bb      	ldrh	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <pbuf_copy_partial+0x70>
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	895b      	ldrh	r3, [r3, #10]
 8008cba:	88ba      	ldrh	r2, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d305      	bcc.n	8008ccc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	895b      	ldrh	r3, [r3, #10]
 8008cc4:	88ba      	ldrh	r2, [r7, #4]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	80bb      	strh	r3, [r7, #4]
 8008cca:	e023      	b.n	8008d14 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	895a      	ldrh	r2, [r3, #10]
 8008cd0:	88bb      	ldrh	r3, [r7, #4]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008cd6:	8b3a      	ldrh	r2, [r7, #24]
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d901      	bls.n	8008ce2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008cde:	88fb      	ldrh	r3, [r7, #6]
 8008ce0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008ce2:	8b7b      	ldrh	r3, [r7, #26]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	18d0      	adds	r0, r2, r3
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	88bb      	ldrh	r3, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	8b3a      	ldrh	r2, [r7, #24]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	f006 f99d 	bl	800f032 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008cf8:	8afa      	ldrh	r2, [r7, #22]
 8008cfa:	8b3b      	ldrh	r3, [r7, #24]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008d00:	8b7a      	ldrh	r2, [r7, #26]
 8008d02:	8b3b      	ldrh	r3, [r7, #24]
 8008d04:	4413      	add	r3, r2
 8008d06:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008d08:	88fa      	ldrh	r2, [r7, #6]
 8008d0a:	8b3b      	ldrh	r3, [r7, #24]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <pbuf_copy_partial+0xca>
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1c4      	bne.n	8008cb0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008d26:	8afb      	ldrh	r3, [r7, #22]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	08010e28 	.word	0x08010e28
 8008d34:	080111ac 	.word	0x080111ac
 8008d38:	08010ec4 	.word	0x08010ec4
 8008d3c:	080111cc 	.word	0x080111cc

08008d40 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	603a      	str	r2, [r7, #0]
 8008d4a:	71fb      	strb	r3, [r7, #7]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	8919      	ldrh	r1, [r3, #8]
 8008d54:	88ba      	ldrh	r2, [r7, #4]
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff faa1 	bl	80082a0 <pbuf_alloc>
 8008d5e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <pbuf_clone+0x2a>
    return NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e011      	b.n	8008d8e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f7ff fea3 	bl	8008ab8 <pbuf_copy>
 8008d72:	4603      	mov	r3, r0
 8008d74:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008d76:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d006      	beq.n	8008d8c <pbuf_clone+0x4c>
 8008d7e:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <pbuf_clone+0x58>)
 8008d80:	f240 5224 	movw	r2, #1316	@ 0x524
 8008d84:	4905      	ldr	r1, [pc, #20]	@ (8008d9c <pbuf_clone+0x5c>)
 8008d86:	4806      	ldr	r0, [pc, #24]	@ (8008da0 <pbuf_clone+0x60>)
 8008d88:	f006 f83c 	bl	800ee04 <iprintf>
  return q;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	08010e28 	.word	0x08010e28
 8008d9c:	080112d8 	.word	0x080112d8
 8008da0:	08010ec4 	.word	0x08010ec4

08008da4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008da8:	f005 ff2c 	bl	800ec04 <rand>
 8008dac:	4603      	mov	r3, r0
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	4b01      	ldr	r3, [pc, #4]	@ (8008dc4 <tcp_init+0x20>)
 8008dbe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008dc0:	bf00      	nop
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20000020 	.word	0x20000020

08008dc8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	7d1b      	ldrb	r3, [r3, #20]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d105      	bne.n	8008de4 <tcp_free+0x1c>
 8008dd8:	4b06      	ldr	r3, [pc, #24]	@ (8008df4 <tcp_free+0x2c>)
 8008dda:	22d4      	movs	r2, #212	@ 0xd4
 8008ddc:	4906      	ldr	r1, [pc, #24]	@ (8008df8 <tcp_free+0x30>)
 8008dde:	4807      	ldr	r0, [pc, #28]	@ (8008dfc <tcp_free+0x34>)
 8008de0:	f006 f810 	bl	800ee04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	2001      	movs	r0, #1
 8008de8:	f7fe fec8 	bl	8007b7c <memp_free>
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	08011364 	.word	0x08011364
 8008df8:	080113cc 	.word	0x080113cc
 8008dfc:	080113e0 	.word	0x080113e0

08008e00 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	7d1b      	ldrb	r3, [r3, #20]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d105      	bne.n	8008e1c <tcp_free_listen+0x1c>
 8008e10:	4b06      	ldr	r3, [pc, #24]	@ (8008e2c <tcp_free_listen+0x2c>)
 8008e12:	22df      	movs	r2, #223	@ 0xdf
 8008e14:	4906      	ldr	r1, [pc, #24]	@ (8008e30 <tcp_free_listen+0x30>)
 8008e16:	4807      	ldr	r0, [pc, #28]	@ (8008e34 <tcp_free_listen+0x34>)
 8008e18:	f005 fff4 	bl	800ee04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	2002      	movs	r0, #2
 8008e20:	f7fe feac 	bl	8007b7c <memp_free>
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	08011364 	.word	0x08011364
 8008e30:	08011408 	.word	0x08011408
 8008e34:	080113e0 	.word	0x080113e0

08008e38 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008e3c:	f000 fea4 	bl	8009b88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008e40:	4b07      	ldr	r3, [pc, #28]	@ (8008e60 <tcp_tmr+0x28>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <tcp_tmr+0x28>)
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <tcp_tmr+0x28>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008e58:	f000 fb54 	bl	8009504 <tcp_slowtmr>
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20007d89 	.word	0x20007d89

08008e64 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d105      	bne.n	8008e80 <tcp_remove_listener+0x1c>
 8008e74:	4b0d      	ldr	r3, [pc, #52]	@ (8008eac <tcp_remove_listener+0x48>)
 8008e76:	22ff      	movs	r2, #255	@ 0xff
 8008e78:	490d      	ldr	r1, [pc, #52]	@ (8008eb0 <tcp_remove_listener+0x4c>)
 8008e7a:	480e      	ldr	r0, [pc, #56]	@ (8008eb4 <tcp_remove_listener+0x50>)
 8008e7c:	f005 ffc2 	bl	800ee04 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	e00a      	b.n	8008e9c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d102      	bne.n	8008e96 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f1      	bne.n	8008e86 <tcp_remove_listener+0x22>
    }
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	08011364 	.word	0x08011364
 8008eb0:	08011424 	.word	0x08011424
 8008eb4:	080113e0 	.word	0x080113e0

08008eb8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d106      	bne.n	8008ed4 <tcp_listen_closed+0x1c>
 8008ec6:	4b14      	ldr	r3, [pc, #80]	@ (8008f18 <tcp_listen_closed+0x60>)
 8008ec8:	f240 1211 	movw	r2, #273	@ 0x111
 8008ecc:	4913      	ldr	r1, [pc, #76]	@ (8008f1c <tcp_listen_closed+0x64>)
 8008ece:	4814      	ldr	r0, [pc, #80]	@ (8008f20 <tcp_listen_closed+0x68>)
 8008ed0:	f005 ff98 	bl	800ee04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	7d1b      	ldrb	r3, [r3, #20]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d006      	beq.n	8008eea <tcp_listen_closed+0x32>
 8008edc:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <tcp_listen_closed+0x60>)
 8008ede:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008ee2:	4910      	ldr	r1, [pc, #64]	@ (8008f24 <tcp_listen_closed+0x6c>)
 8008ee4:	480e      	ldr	r0, [pc, #56]	@ (8008f20 <tcp_listen_closed+0x68>)
 8008ee6:	f005 ff8d 	bl	800ee04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008eea:	2301      	movs	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e00b      	b.n	8008f08 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8008f28 <tcp_listen_closed+0x70>)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff ffb1 	bl	8008e64 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d9f0      	bls.n	8008ef0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	08011364 	.word	0x08011364
 8008f1c:	0801144c 	.word	0x0801144c
 8008f20:	080113e0 	.word	0x080113e0
 8008f24:	08011458 	.word	0x08011458
 8008f28:	08012db0 	.word	0x08012db0

08008f2c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008f2c:	b5b0      	push	{r4, r5, r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af04      	add	r7, sp, #16
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <tcp_close_shutdown+0x20>
 8008f3e:	4b63      	ldr	r3, [pc, #396]	@ (80090cc <tcp_close_shutdown+0x1a0>)
 8008f40:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008f44:	4962      	ldr	r1, [pc, #392]	@ (80090d0 <tcp_close_shutdown+0x1a4>)
 8008f46:	4863      	ldr	r0, [pc, #396]	@ (80090d4 <tcp_close_shutdown+0x1a8>)
 8008f48:	f005 ff5c 	bl	800ee04 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d066      	beq.n	8009020 <tcp_close_shutdown+0xf4>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7d1b      	ldrb	r3, [r3, #20]
 8008f56:	2b04      	cmp	r3, #4
 8008f58:	d003      	beq.n	8008f62 <tcp_close_shutdown+0x36>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7d1b      	ldrb	r3, [r3, #20]
 8008f5e:	2b07      	cmp	r3, #7
 8008f60:	d15e      	bne.n	8009020 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <tcp_close_shutdown+0x48>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f6e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008f72:	d055      	beq.n	8009020 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8b5b      	ldrh	r3, [r3, #26]
 8008f78:	f003 0310 	and.w	r3, r3, #16
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <tcp_close_shutdown+0x62>
 8008f80:	4b52      	ldr	r3, [pc, #328]	@ (80090cc <tcp_close_shutdown+0x1a0>)
 8008f82:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008f86:	4954      	ldr	r1, [pc, #336]	@ (80090d8 <tcp_close_shutdown+0x1ac>)
 8008f88:	4852      	ldr	r0, [pc, #328]	@ (80090d4 <tcp_close_shutdown+0x1a8>)
 8008f8a:	f005 ff3b 	bl	800ee04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008f96:	687d      	ldr	r5, [r7, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	8ad2      	ldrh	r2, [r2, #22]
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	8b09      	ldrh	r1, [r1, #24]
 8008fa4:	9102      	str	r1, [sp, #8]
 8008fa6:	9201      	str	r2, [sp, #4]
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	462b      	mov	r3, r5
 8008fac:	4622      	mov	r2, r4
 8008fae:	4601      	mov	r1, r0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f004 fe8d 	bl	800dcd0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f8c8 	bl	800a14c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008fbc:	4b47      	ldr	r3, [pc, #284]	@ (80090dc <tcp_close_shutdown+0x1b0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d105      	bne.n	8008fd2 <tcp_close_shutdown+0xa6>
 8008fc6:	4b45      	ldr	r3, [pc, #276]	@ (80090dc <tcp_close_shutdown+0x1b0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	4a43      	ldr	r2, [pc, #268]	@ (80090dc <tcp_close_shutdown+0x1b0>)
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	e013      	b.n	8008ffa <tcp_close_shutdown+0xce>
 8008fd2:	4b42      	ldr	r3, [pc, #264]	@ (80090dc <tcp_close_shutdown+0x1b0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e00c      	b.n	8008ff4 <tcp_close_shutdown+0xc8>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d104      	bne.n	8008fee <tcp_close_shutdown+0xc2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	60da      	str	r2, [r3, #12]
 8008fec:	e005      	b.n	8008ffa <tcp_close_shutdown+0xce>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1ef      	bne.n	8008fda <tcp_close_shutdown+0xae>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	60da      	str	r2, [r3, #12]
 8009000:	4b37      	ldr	r3, [pc, #220]	@ (80090e0 <tcp_close_shutdown+0x1b4>)
 8009002:	2201      	movs	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009006:	4b37      	ldr	r3, [pc, #220]	@ (80090e4 <tcp_close_shutdown+0x1b8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	d102      	bne.n	8009016 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009010:	f003 fd5c 	bl	800cacc <tcp_trigger_input_pcb_close>
 8009014:	e002      	b.n	800901c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff fed6 	bl	8008dc8 <tcp_free>
      }
      return ERR_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	e050      	b.n	80090c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	7d1b      	ldrb	r3, [r3, #20]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d03b      	beq.n	80090a0 <tcp_close_shutdown+0x174>
 8009028:	2b02      	cmp	r3, #2
 800902a:	dc44      	bgt.n	80090b6 <tcp_close_shutdown+0x18a>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <tcp_close_shutdown+0x10a>
 8009030:	2b01      	cmp	r3, #1
 8009032:	d02a      	beq.n	800908a <tcp_close_shutdown+0x15e>
 8009034:	e03f      	b.n	80090b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8adb      	ldrh	r3, [r3, #22]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d021      	beq.n	8009082 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800903e:	4b2a      	ldr	r3, [pc, #168]	@ (80090e8 <tcp_close_shutdown+0x1bc>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	429a      	cmp	r2, r3
 8009046:	d105      	bne.n	8009054 <tcp_close_shutdown+0x128>
 8009048:	4b27      	ldr	r3, [pc, #156]	@ (80090e8 <tcp_close_shutdown+0x1bc>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	4a26      	ldr	r2, [pc, #152]	@ (80090e8 <tcp_close_shutdown+0x1bc>)
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	e013      	b.n	800907c <tcp_close_shutdown+0x150>
 8009054:	4b24      	ldr	r3, [pc, #144]	@ (80090e8 <tcp_close_shutdown+0x1bc>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60bb      	str	r3, [r7, #8]
 800905a:	e00c      	b.n	8009076 <tcp_close_shutdown+0x14a>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d104      	bne.n	8009070 <tcp_close_shutdown+0x144>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	60da      	str	r2, [r3, #12]
 800906e:	e005      	b.n	800907c <tcp_close_shutdown+0x150>
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1ef      	bne.n	800905c <tcp_close_shutdown+0x130>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fea0 	bl	8008dc8 <tcp_free>
      break;
 8009088:	e01a      	b.n	80090c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff ff14 	bl	8008eb8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	4816      	ldr	r0, [pc, #88]	@ (80090ec <tcp_close_shutdown+0x1c0>)
 8009094:	f001 f8aa 	bl	800a1ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff feb1 	bl	8008e00 <tcp_free_listen>
      break;
 800909e:	e00f      	b.n	80090c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	480e      	ldr	r0, [pc, #56]	@ (80090dc <tcp_close_shutdown+0x1b0>)
 80090a4:	f001 f8a2 	bl	800a1ec <tcp_pcb_remove>
 80090a8:	4b0d      	ldr	r3, [pc, #52]	@ (80090e0 <tcp_close_shutdown+0x1b4>)
 80090aa:	2201      	movs	r2, #1
 80090ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff fe8a 	bl	8008dc8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80090b4:	e004      	b.n	80090c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f81a 	bl	80090f0 <tcp_close_shutdown_fin>
 80090bc:	4603      	mov	r3, r0
 80090be:	e000      	b.n	80090c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bdb0      	pop	{r4, r5, r7, pc}
 80090ca:	bf00      	nop
 80090cc:	08011364 	.word	0x08011364
 80090d0:	08011470 	.word	0x08011470
 80090d4:	080113e0 	.word	0x080113e0
 80090d8:	08011490 	.word	0x08011490
 80090dc:	20007d80 	.word	0x20007d80
 80090e0:	20007d88 	.word	0x20007d88
 80090e4:	20007dc0 	.word	0x20007dc0
 80090e8:	20007d78 	.word	0x20007d78
 80090ec:	20007d7c 	.word	0x20007d7c

080090f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <tcp_close_shutdown_fin+0x1c>
 80090fe:	4b2e      	ldr	r3, [pc, #184]	@ (80091b8 <tcp_close_shutdown_fin+0xc8>)
 8009100:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009104:	492d      	ldr	r1, [pc, #180]	@ (80091bc <tcp_close_shutdown_fin+0xcc>)
 8009106:	482e      	ldr	r0, [pc, #184]	@ (80091c0 <tcp_close_shutdown_fin+0xd0>)
 8009108:	f005 fe7c 	bl	800ee04 <iprintf>

  switch (pcb->state) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	7d1b      	ldrb	r3, [r3, #20]
 8009110:	2b07      	cmp	r3, #7
 8009112:	d020      	beq.n	8009156 <tcp_close_shutdown_fin+0x66>
 8009114:	2b07      	cmp	r3, #7
 8009116:	dc2b      	bgt.n	8009170 <tcp_close_shutdown_fin+0x80>
 8009118:	2b03      	cmp	r3, #3
 800911a:	d002      	beq.n	8009122 <tcp_close_shutdown_fin+0x32>
 800911c:	2b04      	cmp	r3, #4
 800911e:	d00d      	beq.n	800913c <tcp_close_shutdown_fin+0x4c>
 8009120:	e026      	b.n	8009170 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f003 fee2 	bl	800ceec <tcp_send_fin>
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800912c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d11f      	bne.n	8009174 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2205      	movs	r2, #5
 8009138:	751a      	strb	r2, [r3, #20]
      }
      break;
 800913a:	e01b      	b.n	8009174 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f003 fed5 	bl	800ceec <tcp_send_fin>
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d114      	bne.n	8009178 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2205      	movs	r2, #5
 8009152:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009154:	e010      	b.n	8009178 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f003 fec8 	bl	800ceec <tcp_send_fin>
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2209      	movs	r2, #9
 800916c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800916e:	e005      	b.n	800917c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	e01c      	b.n	80091ae <tcp_close_shutdown_fin+0xbe>
      break;
 8009174:	bf00      	nop
 8009176:	e002      	b.n	800917e <tcp_close_shutdown_fin+0x8e>
      break;
 8009178:	bf00      	nop
 800917a:	e000      	b.n	800917e <tcp_close_shutdown_fin+0x8e>
      break;
 800917c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800917e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d103      	bne.n	800918e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f003 ffee 	bl	800d168 <tcp_output>
 800918c:	e00d      	b.n	80091aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800918e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d108      	bne.n	80091aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	8b5b      	ldrh	r3, [r3, #26]
 800919c:	f043 0308 	orr.w	r3, r3, #8
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e001      	b.n	80091ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80091aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	08011364 	.word	0x08011364
 80091bc:	0801144c 	.word	0x0801144c
 80091c0:	080113e0 	.word	0x080113e0

080091c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d109      	bne.n	80091e6 <tcp_close+0x22>
 80091d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009210 <tcp_close+0x4c>)
 80091d4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80091d8:	490e      	ldr	r1, [pc, #56]	@ (8009214 <tcp_close+0x50>)
 80091da:	480f      	ldr	r0, [pc, #60]	@ (8009218 <tcp_close+0x54>)
 80091dc:	f005 fe12 	bl	800ee04 <iprintf>
 80091e0:	f06f 030f 	mvn.w	r3, #15
 80091e4:	e00f      	b.n	8009206 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7d1b      	ldrb	r3, [r3, #20]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d006      	beq.n	80091fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8b5b      	ldrh	r3, [r3, #26]
 80091f2:	f043 0310 	orr.w	r3, r3, #16
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80091fc:	2101      	movs	r1, #1
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fe94 	bl	8008f2c <tcp_close_shutdown>
 8009204:	4603      	mov	r3, r0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	08011364 	.word	0x08011364
 8009214:	080114ac 	.word	0x080114ac
 8009218:	080113e0 	.word	0x080113e0

0800921c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08e      	sub	sp, #56	@ 0x38
 8009220:	af04      	add	r7, sp, #16
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d107      	bne.n	800923c <tcp_abandon+0x20>
 800922c:	4b52      	ldr	r3, [pc, #328]	@ (8009378 <tcp_abandon+0x15c>)
 800922e:	f240 223d 	movw	r2, #573	@ 0x23d
 8009232:	4952      	ldr	r1, [pc, #328]	@ (800937c <tcp_abandon+0x160>)
 8009234:	4852      	ldr	r0, [pc, #328]	@ (8009380 <tcp_abandon+0x164>)
 8009236:	f005 fde5 	bl	800ee04 <iprintf>
 800923a:	e099      	b.n	8009370 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	7d1b      	ldrb	r3, [r3, #20]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d106      	bne.n	8009252 <tcp_abandon+0x36>
 8009244:	4b4c      	ldr	r3, [pc, #304]	@ (8009378 <tcp_abandon+0x15c>)
 8009246:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800924a:	494e      	ldr	r1, [pc, #312]	@ (8009384 <tcp_abandon+0x168>)
 800924c:	484c      	ldr	r0, [pc, #304]	@ (8009380 <tcp_abandon+0x164>)
 800924e:	f005 fdd9 	bl	800ee04 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7d1b      	ldrb	r3, [r3, #20]
 8009256:	2b0a      	cmp	r3, #10
 8009258:	d107      	bne.n	800926a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	484a      	ldr	r0, [pc, #296]	@ (8009388 <tcp_abandon+0x16c>)
 800925e:	f000 ffc5 	bl	800a1ec <tcp_pcb_remove>
    tcp_free(pcb);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff fdb0 	bl	8008dc8 <tcp_free>
 8009268:	e082      	b.n	8009370 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009276:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009284:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7d1b      	ldrb	r3, [r3, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d126      	bne.n	80092e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	8adb      	ldrh	r3, [r3, #22]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d02e      	beq.n	80092fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800929c:	4b3b      	ldr	r3, [pc, #236]	@ (800938c <tcp_abandon+0x170>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d105      	bne.n	80092b2 <tcp_abandon+0x96>
 80092a6:	4b39      	ldr	r3, [pc, #228]	@ (800938c <tcp_abandon+0x170>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4a37      	ldr	r2, [pc, #220]	@ (800938c <tcp_abandon+0x170>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	e013      	b.n	80092da <tcp_abandon+0xbe>
 80092b2:	4b36      	ldr	r3, [pc, #216]	@ (800938c <tcp_abandon+0x170>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	e00c      	b.n	80092d4 <tcp_abandon+0xb8>
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d104      	bne.n	80092ce <tcp_abandon+0xb2>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	60da      	str	r2, [r3, #12]
 80092cc:	e005      	b.n	80092da <tcp_abandon+0xbe>
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1ef      	bne.n	80092ba <tcp_abandon+0x9e>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	60da      	str	r2, [r3, #12]
 80092e0:	e00b      	b.n	80092fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	8adb      	ldrh	r3, [r3, #22]
 80092ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4828      	ldr	r0, [pc, #160]	@ (8009390 <tcp_abandon+0x174>)
 80092f0:	f000 ff7c 	bl	800a1ec <tcp_pcb_remove>
 80092f4:	4b27      	ldr	r3, [pc, #156]	@ (8009394 <tcp_abandon+0x178>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d004      	beq.n	800930c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fd1e 	bl	8009d48 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fd15 	bl	8009d48 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fd0c 	bl	8009d48 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00e      	beq.n	8009354 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3304      	adds	r3, #4
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	8b12      	ldrh	r2, [r2, #24]
 8009340:	9202      	str	r2, [sp, #8]
 8009342:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009344:	9201      	str	r2, [sp, #4]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	460b      	mov	r3, r1
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	69b9      	ldr	r1, [r7, #24]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f004 fcbe 	bl	800dcd0 <tcp_rst>
    }
    last_state = pcb->state;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	7d1b      	ldrb	r3, [r3, #20]
 8009358:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff fd34 	bl	8008dc8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d004      	beq.n	8009370 <tcp_abandon+0x154>
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f06f 010c 	mvn.w	r1, #12
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	4798      	blx	r3
  }
}
 8009370:	3728      	adds	r7, #40	@ 0x28
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	08011364 	.word	0x08011364
 800937c:	080114e0 	.word	0x080114e0
 8009380:	080113e0 	.word	0x080113e0
 8009384:	080114fc 	.word	0x080114fc
 8009388:	20007d84 	.word	0x20007d84
 800938c:	20007d78 	.word	0x20007d78
 8009390:	20007d80 	.word	0x20007d80
 8009394:	20007d88 	.word	0x20007d88

08009398 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80093a0:	2101      	movs	r1, #1
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff ff3a 	bl	800921c <tcp_abandon>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d106      	bne.n	80093cc <tcp_update_rcv_ann_wnd+0x1c>
 80093be:	4b25      	ldr	r3, [pc, #148]	@ (8009454 <tcp_update_rcv_ann_wnd+0xa4>)
 80093c0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80093c4:	4924      	ldr	r1, [pc, #144]	@ (8009458 <tcp_update_rcv_ann_wnd+0xa8>)
 80093c6:	4825      	ldr	r0, [pc, #148]	@ (800945c <tcp_update_rcv_ann_wnd+0xac>)
 80093c8:	f005 fd1c 	bl	800ee04 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80093d4:	4413      	add	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80093e0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80093e4:	bf28      	it	cs
 80093e6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80093ea:	b292      	uxth	r2, r2
 80093ec:	4413      	add	r3, r2
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	db08      	blt.n	8009408 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	e020      	b.n	800944a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	dd03      	ble.n	800941e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800941c:	e014      	b.n	8009448 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009430:	d306      	bcc.n	8009440 <tcp_update_rcv_ann_wnd+0x90>
 8009432:	4b08      	ldr	r3, [pc, #32]	@ (8009454 <tcp_update_rcv_ann_wnd+0xa4>)
 8009434:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009438:	4909      	ldr	r1, [pc, #36]	@ (8009460 <tcp_update_rcv_ann_wnd+0xb0>)
 800943a:	4808      	ldr	r0, [pc, #32]	@ (800945c <tcp_update_rcv_ann_wnd+0xac>)
 800943c:	f005 fce2 	bl	800ee04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	b29a      	uxth	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009448:	2300      	movs	r3, #0
  }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	08011364 	.word	0x08011364
 8009458:	080115f8 	.word	0x080115f8
 800945c:	080113e0 	.word	0x080113e0
 8009460:	0801161c 	.word	0x0801161c

08009464 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d107      	bne.n	8009486 <tcp_recved+0x22>
 8009476:	4b1f      	ldr	r3, [pc, #124]	@ (80094f4 <tcp_recved+0x90>)
 8009478:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800947c:	491e      	ldr	r1, [pc, #120]	@ (80094f8 <tcp_recved+0x94>)
 800947e:	481f      	ldr	r0, [pc, #124]	@ (80094fc <tcp_recved+0x98>)
 8009480:	f005 fcc0 	bl	800ee04 <iprintf>
 8009484:	e032      	b.n	80094ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	7d1b      	ldrb	r3, [r3, #20]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d106      	bne.n	800949c <tcp_recved+0x38>
 800948e:	4b19      	ldr	r3, [pc, #100]	@ (80094f4 <tcp_recved+0x90>)
 8009490:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009494:	491a      	ldr	r1, [pc, #104]	@ (8009500 <tcp_recved+0x9c>)
 8009496:	4819      	ldr	r0, [pc, #100]	@ (80094fc <tcp_recved+0x98>)
 8009498:	f005 fcb4 	bl	800ee04 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80094a0:	887b      	ldrh	r3, [r7, #2]
 80094a2:	4413      	add	r3, r2
 80094a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80094a6:	89fb      	ldrh	r3, [r7, #14]
 80094a8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80094ac:	d804      	bhi.n	80094b8 <tcp_recved+0x54>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094b2:	89fa      	ldrh	r2, [r7, #14]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d204      	bcs.n	80094c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80094be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80094c0:	e002      	b.n	80094c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	89fa      	ldrh	r2, [r7, #14]
 80094c6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff ff71 	bl	80093b0 <tcp_update_rcv_ann_wnd>
 80094ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80094d6:	d309      	bcc.n	80094ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	8b5b      	ldrh	r3, [r3, #26]
 80094dc:	f043 0302 	orr.w	r3, r3, #2
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f003 fe3e 	bl	800d168 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	08011364 	.word	0x08011364
 80094f8:	08011638 	.word	0x08011638
 80094fc:	080113e0 	.word	0x080113e0
 8009500:	08011650 	.word	0x08011650

08009504 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009504:	b5b0      	push	{r4, r5, r7, lr}
 8009506:	b090      	sub	sp, #64	@ 0x40
 8009508:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009510:	4b95      	ldr	r3, [pc, #596]	@ (8009768 <tcp_slowtmr+0x264>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3301      	adds	r3, #1
 8009516:	4a94      	ldr	r2, [pc, #592]	@ (8009768 <tcp_slowtmr+0x264>)
 8009518:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800951a:	4b94      	ldr	r3, [pc, #592]	@ (800976c <tcp_slowtmr+0x268>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	3301      	adds	r3, #1
 8009520:	b2da      	uxtb	r2, r3
 8009522:	4b92      	ldr	r3, [pc, #584]	@ (800976c <tcp_slowtmr+0x268>)
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	e000      	b.n	800952a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009528:	bf00      	nop
  prev = NULL;
 800952a:	2300      	movs	r3, #0
 800952c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800952e:	4b90      	ldr	r3, [pc, #576]	@ (8009770 <tcp_slowtmr+0x26c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009534:	e29d      	b.n	8009a72 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009538:	7d1b      	ldrb	r3, [r3, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <tcp_slowtmr+0x48>
 800953e:	4b8d      	ldr	r3, [pc, #564]	@ (8009774 <tcp_slowtmr+0x270>)
 8009540:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009544:	498c      	ldr	r1, [pc, #560]	@ (8009778 <tcp_slowtmr+0x274>)
 8009546:	488d      	ldr	r0, [pc, #564]	@ (800977c <tcp_slowtmr+0x278>)
 8009548:	f005 fc5c 	bl	800ee04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800954c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954e:	7d1b      	ldrb	r3, [r3, #20]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d106      	bne.n	8009562 <tcp_slowtmr+0x5e>
 8009554:	4b87      	ldr	r3, [pc, #540]	@ (8009774 <tcp_slowtmr+0x270>)
 8009556:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800955a:	4989      	ldr	r1, [pc, #548]	@ (8009780 <tcp_slowtmr+0x27c>)
 800955c:	4887      	ldr	r0, [pc, #540]	@ (800977c <tcp_slowtmr+0x278>)
 800955e:	f005 fc51 	bl	800ee04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009564:	7d1b      	ldrb	r3, [r3, #20]
 8009566:	2b0a      	cmp	r3, #10
 8009568:	d106      	bne.n	8009578 <tcp_slowtmr+0x74>
 800956a:	4b82      	ldr	r3, [pc, #520]	@ (8009774 <tcp_slowtmr+0x270>)
 800956c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009570:	4984      	ldr	r1, [pc, #528]	@ (8009784 <tcp_slowtmr+0x280>)
 8009572:	4882      	ldr	r0, [pc, #520]	@ (800977c <tcp_slowtmr+0x278>)
 8009574:	f005 fc46 	bl	800ee04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957a:	7f9a      	ldrb	r2, [r3, #30]
 800957c:	4b7b      	ldr	r3, [pc, #492]	@ (800976c <tcp_slowtmr+0x268>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d105      	bne.n	8009590 <tcp_slowtmr+0x8c>
      prev = pcb;
 8009584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009586:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800958e:	e270      	b.n	8009a72 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8009590:	4b76      	ldr	r3, [pc, #472]	@ (800976c <tcp_slowtmr+0x268>)
 8009592:	781a      	ldrb	r2, [r3, #0]
 8009594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009596:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80095a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a6:	7d1b      	ldrb	r3, [r3, #20]
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d10a      	bne.n	80095c2 <tcp_slowtmr+0xbe>
 80095ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	d905      	bls.n	80095c2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80095b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095ba:	3301      	adds	r3, #1
 80095bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80095c0:	e11e      	b.n	8009800 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80095c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095c8:	2b0b      	cmp	r3, #11
 80095ca:	d905      	bls.n	80095d8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80095cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095d0:	3301      	adds	r3, #1
 80095d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80095d6:	e113      	b.n	8009800 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80095d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d075      	beq.n	80096ce <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80095e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <tcp_slowtmr+0xf4>
 80095ea:	4b62      	ldr	r3, [pc, #392]	@ (8009774 <tcp_slowtmr+0x270>)
 80095ec:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80095f0:	4965      	ldr	r1, [pc, #404]	@ (8009788 <tcp_slowtmr+0x284>)
 80095f2:	4862      	ldr	r0, [pc, #392]	@ (800977c <tcp_slowtmr+0x278>)
 80095f4:	f005 fc06 	bl	800ee04 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d106      	bne.n	800960e <tcp_slowtmr+0x10a>
 8009600:	4b5c      	ldr	r3, [pc, #368]	@ (8009774 <tcp_slowtmr+0x270>)
 8009602:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009606:	4961      	ldr	r1, [pc, #388]	@ (800978c <tcp_slowtmr+0x288>)
 8009608:	485c      	ldr	r0, [pc, #368]	@ (800977c <tcp_slowtmr+0x278>)
 800960a:	f005 fbfb 	bl	800ee04 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009610:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009614:	2b0b      	cmp	r3, #11
 8009616:	d905      	bls.n	8009624 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800961c:	3301      	adds	r3, #1
 800961e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009622:	e0ed      	b.n	8009800 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800962a:	3b01      	subs	r3, #1
 800962c:	4a58      	ldr	r2, [pc, #352]	@ (8009790 <tcp_slowtmr+0x28c>)
 800962e:	5cd3      	ldrb	r3, [r2, r3]
 8009630:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009634:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009638:	7c7a      	ldrb	r2, [r7, #17]
 800963a:	429a      	cmp	r2, r3
 800963c:	d907      	bls.n	800964e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800963e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009640:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009644:	3301      	adds	r3, #1
 8009646:	b2da      	uxtb	r2, r3
 8009648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800964e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009650:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009654:	7c7a      	ldrb	r2, [r7, #17]
 8009656:	429a      	cmp	r2, r3
 8009658:	f200 80d2 	bhi.w	8009800 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800965c:	2301      	movs	r3, #1
 800965e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009666:	2b00      	cmp	r3, #0
 8009668:	d108      	bne.n	800967c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800966a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800966c:	f004 fc24 	bl	800deb8 <tcp_zero_window_probe>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d014      	beq.n	80096a0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009676:	2300      	movs	r3, #0
 8009678:	623b      	str	r3, [r7, #32]
 800967a:	e011      	b.n	80096a0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009682:	4619      	mov	r1, r3
 8009684:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009686:	f003 fae9 	bl	800cc5c <tcp_split_unsent_seg>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d107      	bne.n	80096a0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009690:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009692:	f003 fd69 	bl	800d168 <tcp_output>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 80ac 	beq.w	8009800 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80096a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80096b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80096b6:	2b06      	cmp	r3, #6
 80096b8:	f200 80a2 	bhi.w	8009800 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80096c2:	3301      	adds	r3, #1
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80096cc:	e098      	b.n	8009800 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80096ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	db0f      	blt.n	80096f8 <tcp_slowtmr+0x1f4>
 80096d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80096de:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d008      	beq.n	80096f8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80096e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3301      	adds	r3, #1
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	b21a      	sxth	r2, r3
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80096f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009704:	429a      	cmp	r2, r3
 8009706:	db7b      	blt.n	8009800 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800970a:	f004 f821 	bl	800d750 <tcp_rexmit_rto_prepare>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <tcp_slowtmr+0x220>
 8009714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009718:	2b00      	cmp	r3, #0
 800971a:	d171      	bne.n	8009800 <tcp_slowtmr+0x2fc>
 800971c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009720:	2b00      	cmp	r3, #0
 8009722:	d06d      	beq.n	8009800 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009726:	7d1b      	ldrb	r3, [r3, #20]
 8009728:	2b02      	cmp	r3, #2
 800972a:	d03a      	beq.n	80097a2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009732:	2b0c      	cmp	r3, #12
 8009734:	bf28      	it	cs
 8009736:	230c      	movcs	r3, #12
 8009738:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800973a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009740:	10db      	asrs	r3, r3, #3
 8009742:	b21b      	sxth	r3, r3
 8009744:	461a      	mov	r2, r3
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800974c:	4413      	add	r3, r2
 800974e:	7efa      	ldrb	r2, [r7, #27]
 8009750:	4910      	ldr	r1, [pc, #64]	@ (8009794 <tcp_slowtmr+0x290>)
 8009752:	5c8a      	ldrb	r2, [r1, r2]
 8009754:	4093      	lsls	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800975e:	4293      	cmp	r3, r2
 8009760:	dc1a      	bgt.n	8009798 <tcp_slowtmr+0x294>
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	b21a      	sxth	r2, r3
 8009766:	e019      	b.n	800979c <tcp_slowtmr+0x298>
 8009768:	20007d74 	.word	0x20007d74
 800976c:	20007d8a 	.word	0x20007d8a
 8009770:	20007d80 	.word	0x20007d80
 8009774:	08011364 	.word	0x08011364
 8009778:	080116e0 	.word	0x080116e0
 800977c:	080113e0 	.word	0x080113e0
 8009780:	0801170c 	.word	0x0801170c
 8009784:	08011738 	.word	0x08011738
 8009788:	08011768 	.word	0x08011768
 800978c:	0801179c 	.word	0x0801179c
 8009790:	08012da8 	.word	0x08012da8
 8009794:	08012d98 	.word	0x08012d98
 8009798:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800979c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80097a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a4:	2200      	movs	r2, #0
 80097a6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80097a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80097ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80097b4:	4293      	cmp	r3, r2
 80097b6:	bf28      	it	cs
 80097b8:	4613      	movcs	r3, r2
 80097ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80097bc:	8a7b      	ldrh	r3, [r7, #18]
 80097be:	085b      	lsrs	r3, r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d206      	bcs.n	80097e8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80097da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80097e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ea:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80097ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80097f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80097fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097fc:	f004 f818 	bl	800d830 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8009800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009802:	7d1b      	ldrb	r3, [r3, #20]
 8009804:	2b06      	cmp	r3, #6
 8009806:	d111      	bne.n	800982c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980a:	8b5b      	ldrh	r3, [r3, #26]
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009814:	4b9c      	ldr	r3, [pc, #624]	@ (8009a88 <tcp_slowtmr+0x584>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	2b28      	cmp	r3, #40	@ 0x28
 8009820:	d904      	bls.n	800982c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8009822:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009826:	3301      	adds	r3, #1
 8009828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	7a5b      	ldrb	r3, [r3, #9]
 8009830:	f003 0308 	and.w	r3, r3, #8
 8009834:	2b00      	cmp	r3, #0
 8009836:	d04a      	beq.n	80098ce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800983c:	2b04      	cmp	r3, #4
 800983e:	d003      	beq.n	8009848 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009842:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009844:	2b07      	cmp	r3, #7
 8009846:	d142      	bne.n	80098ce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009848:	4b8f      	ldr	r3, [pc, #572]	@ (8009a88 <tcp_slowtmr+0x584>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009858:	4b8c      	ldr	r3, [pc, #560]	@ (8009a8c <tcp_slowtmr+0x588>)
 800985a:	440b      	add	r3, r1
 800985c:	498c      	ldr	r1, [pc, #560]	@ (8009a90 <tcp_slowtmr+0x58c>)
 800985e:	fba1 1303 	umull	r1, r3, r1, r3
 8009862:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009864:	429a      	cmp	r2, r3
 8009866:	d90a      	bls.n	800987e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8009868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800986c:	3301      	adds	r3, #1
 800986e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009872:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009876:	3301      	adds	r3, #1
 8009878:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800987c:	e027      	b.n	80098ce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800987e:	4b82      	ldr	r3, [pc, #520]	@ (8009a88 <tcp_slowtmr+0x584>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009894:	4618      	mov	r0, r3
 8009896:	4b7f      	ldr	r3, [pc, #508]	@ (8009a94 <tcp_slowtmr+0x590>)
 8009898:	fb00 f303 	mul.w	r3, r0, r3
 800989c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800989e:	497c      	ldr	r1, [pc, #496]	@ (8009a90 <tcp_slowtmr+0x58c>)
 80098a0:	fba1 1303 	umull	r1, r3, r1, r3
 80098a4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d911      	bls.n	80098ce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80098aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098ac:	f004 fac4 	bl	800de38 <tcp_keepalive>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80098b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d107      	bne.n	80098ce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80098be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80098c4:	3301      	adds	r3, #1
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80098ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d011      	beq.n	80098fa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80098d6:	4b6c      	ldr	r3, [pc, #432]	@ (8009a88 <tcp_slowtmr+0x584>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80098e6:	4619      	mov	r1, r3
 80098e8:	460b      	mov	r3, r1
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	440b      	add	r3, r1
 80098ee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d302      	bcc.n	80098fa <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80098f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098f6:	f000 fddd 	bl	800a4b4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80098fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fc:	7d1b      	ldrb	r3, [r3, #20]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d10b      	bne.n	800991a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009902:	4b61      	ldr	r3, [pc, #388]	@ (8009a88 <tcp_slowtmr+0x584>)
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b28      	cmp	r3, #40	@ 0x28
 800990e:	d904      	bls.n	800991a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8009910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009914:	3301      	adds	r3, #1
 8009916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	7d1b      	ldrb	r3, [r3, #20]
 800991e:	2b09      	cmp	r3, #9
 8009920:	d10b      	bne.n	800993a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009922:	4b59      	ldr	r3, [pc, #356]	@ (8009a88 <tcp_slowtmr+0x584>)
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2bf0      	cmp	r3, #240	@ 0xf0
 800992e:	d904      	bls.n	800993a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009934:	3301      	adds	r3, #1
 8009936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800993a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800993e:	2b00      	cmp	r3, #0
 8009940:	d060      	beq.n	8009a04 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009948:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800994a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800994c:	f000 fbfe 	bl	800a14c <tcp_pcb_purge>
      if (prev != NULL) {
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	2b00      	cmp	r3, #0
 8009954:	d010      	beq.n	8009978 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009956:	4b50      	ldr	r3, [pc, #320]	@ (8009a98 <tcp_slowtmr+0x594>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800995c:	429a      	cmp	r2, r3
 800995e:	d106      	bne.n	800996e <tcp_slowtmr+0x46a>
 8009960:	4b4e      	ldr	r3, [pc, #312]	@ (8009a9c <tcp_slowtmr+0x598>)
 8009962:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009966:	494e      	ldr	r1, [pc, #312]	@ (8009aa0 <tcp_slowtmr+0x59c>)
 8009968:	484e      	ldr	r0, [pc, #312]	@ (8009aa4 <tcp_slowtmr+0x5a0>)
 800996a:	f005 fa4b 	bl	800ee04 <iprintf>
        prev->next = pcb->next;
 800996e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009970:	68da      	ldr	r2, [r3, #12]
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	60da      	str	r2, [r3, #12]
 8009976:	e00f      	b.n	8009998 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009978:	4b47      	ldr	r3, [pc, #284]	@ (8009a98 <tcp_slowtmr+0x594>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800997e:	429a      	cmp	r2, r3
 8009980:	d006      	beq.n	8009990 <tcp_slowtmr+0x48c>
 8009982:	4b46      	ldr	r3, [pc, #280]	@ (8009a9c <tcp_slowtmr+0x598>)
 8009984:	f240 5271 	movw	r2, #1393	@ 0x571
 8009988:	4947      	ldr	r1, [pc, #284]	@ (8009aa8 <tcp_slowtmr+0x5a4>)
 800998a:	4846      	ldr	r0, [pc, #280]	@ (8009aa4 <tcp_slowtmr+0x5a0>)
 800998c:	f005 fa3a 	bl	800ee04 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	4a40      	ldr	r2, [pc, #256]	@ (8009a98 <tcp_slowtmr+0x594>)
 8009996:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009998:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800999c:	2b00      	cmp	r3, #0
 800999e:	d013      	beq.n	80099c8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80099a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80099a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80099a8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80099aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ac:	3304      	adds	r3, #4
 80099ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099b0:	8ad2      	ldrh	r2, [r2, #22]
 80099b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099b4:	8b09      	ldrh	r1, [r1, #24]
 80099b6:	9102      	str	r1, [sp, #8]
 80099b8:	9201      	str	r2, [sp, #4]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	462b      	mov	r3, r5
 80099be:	4622      	mov	r2, r4
 80099c0:	4601      	mov	r1, r0
 80099c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099c4:	f004 f984 	bl	800dcd0 <tcp_rst>
      err_arg = pcb->callback_arg;
 80099c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80099ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d0:	7d1b      	ldrb	r3, [r3, #20]
 80099d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80099d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80099d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80099de:	6838      	ldr	r0, [r7, #0]
 80099e0:	f7ff f9f2 	bl	8008dc8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80099e4:	4b31      	ldr	r3, [pc, #196]	@ (8009aac <tcp_slowtmr+0x5a8>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d004      	beq.n	80099fa <tcp_slowtmr+0x4f6>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f06f 010c 	mvn.w	r1, #12
 80099f6:	68b8      	ldr	r0, [r7, #8]
 80099f8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80099fa:	4b2c      	ldr	r3, [pc, #176]	@ (8009aac <tcp_slowtmr+0x5a8>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d037      	beq.n	8009a72 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009a02:	e592      	b.n	800952a <tcp_slowtmr+0x26>
      prev = pcb;
 8009a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a06:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8009a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a10:	7f1b      	ldrb	r3, [r3, #28]
 8009a12:	3301      	adds	r3, #1
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1c:	7f1a      	ldrb	r2, [r3, #28]
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	7f5b      	ldrb	r3, [r3, #29]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d325      	bcc.n	8009a72 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a28:	2200      	movs	r2, #0
 8009a2a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8009aac <tcp_slowtmr+0x5a8>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <tcp_slowtmr+0x550>
 8009a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a44:	6912      	ldr	r2, [r2, #16]
 8009a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4798      	blx	r3
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009a52:	e002      	b.n	8009a5a <tcp_slowtmr+0x556>
 8009a54:	2300      	movs	r3, #0
 8009a56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009a5a:	4b14      	ldr	r3, [pc, #80]	@ (8009aac <tcp_slowtmr+0x5a8>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f47f ad62 	bne.w	8009528 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009a64:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a6e:	f003 fb7b 	bl	800d168 <tcp_output>
  while (pcb != NULL) {
 8009a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f47f ad5e 	bne.w	8009536 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab0 <tcp_slowtmr+0x5ac>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009a84:	e069      	b.n	8009b5a <tcp_slowtmr+0x656>
 8009a86:	bf00      	nop
 8009a88:	20007d74 	.word	0x20007d74
 8009a8c:	000a4cb8 	.word	0x000a4cb8
 8009a90:	10624dd3 	.word	0x10624dd3
 8009a94:	000124f8 	.word	0x000124f8
 8009a98:	20007d80 	.word	0x20007d80
 8009a9c:	08011364 	.word	0x08011364
 8009aa0:	080117d4 	.word	0x080117d4
 8009aa4:	080113e0 	.word	0x080113e0
 8009aa8:	08011800 	.word	0x08011800
 8009aac:	20007d88 	.word	0x20007d88
 8009ab0:	20007d84 	.word	0x20007d84
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
 8009ab8:	2b0a      	cmp	r3, #10
 8009aba:	d006      	beq.n	8009aca <tcp_slowtmr+0x5c6>
 8009abc:	4b2b      	ldr	r3, [pc, #172]	@ (8009b6c <tcp_slowtmr+0x668>)
 8009abe:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009ac2:	492b      	ldr	r1, [pc, #172]	@ (8009b70 <tcp_slowtmr+0x66c>)
 8009ac4:	482b      	ldr	r0, [pc, #172]	@ (8009b74 <tcp_slowtmr+0x670>)
 8009ac6:	f005 f99d 	bl	800ee04 <iprintf>
    pcb_remove = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009ad0:	4b29      	ldr	r3, [pc, #164]	@ (8009b78 <tcp_slowtmr+0x674>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2bf0      	cmp	r3, #240	@ 0xf0
 8009adc:	d904      	bls.n	8009ae8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009ade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d02f      	beq.n	8009b50 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009af0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009af2:	f000 fb2b 	bl	800a14c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d010      	beq.n	8009b1e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009afc:	4b1f      	ldr	r3, [pc, #124]	@ (8009b7c <tcp_slowtmr+0x678>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d106      	bne.n	8009b14 <tcp_slowtmr+0x610>
 8009b06:	4b19      	ldr	r3, [pc, #100]	@ (8009b6c <tcp_slowtmr+0x668>)
 8009b08:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009b0c:	491c      	ldr	r1, [pc, #112]	@ (8009b80 <tcp_slowtmr+0x67c>)
 8009b0e:	4819      	ldr	r0, [pc, #100]	@ (8009b74 <tcp_slowtmr+0x670>)
 8009b10:	f005 f978 	bl	800ee04 <iprintf>
        prev->next = pcb->next;
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	60da      	str	r2, [r3, #12]
 8009b1c:	e00f      	b.n	8009b3e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009b1e:	4b17      	ldr	r3, [pc, #92]	@ (8009b7c <tcp_slowtmr+0x678>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d006      	beq.n	8009b36 <tcp_slowtmr+0x632>
 8009b28:	4b10      	ldr	r3, [pc, #64]	@ (8009b6c <tcp_slowtmr+0x668>)
 8009b2a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009b2e:	4915      	ldr	r1, [pc, #84]	@ (8009b84 <tcp_slowtmr+0x680>)
 8009b30:	4810      	ldr	r0, [pc, #64]	@ (8009b74 <tcp_slowtmr+0x670>)
 8009b32:	f005 f967 	bl	800ee04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	4a10      	ldr	r2, [pc, #64]	@ (8009b7c <tcp_slowtmr+0x678>)
 8009b3c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b40:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009b48:	69f8      	ldr	r0, [r7, #28]
 8009b4a:	f7ff f93d 	bl	8008dc8 <tcp_free>
 8009b4e:	e004      	b.n	8009b5a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b52:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1a9      	bne.n	8009ab4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	3730      	adds	r7, #48	@ 0x30
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bdb0      	pop	{r4, r5, r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08011364 	.word	0x08011364
 8009b70:	0801182c 	.word	0x0801182c
 8009b74:	080113e0 	.word	0x080113e0
 8009b78:	20007d74 	.word	0x20007d74
 8009b7c:	20007d84 	.word	0x20007d84
 8009b80:	0801185c 	.word	0x0801185c
 8009b84:	08011884 	.word	0x08011884

08009b88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8009c44 <tcp_fasttmr+0xbc>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	3301      	adds	r3, #1
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	4b2b      	ldr	r3, [pc, #172]	@ (8009c44 <tcp_fasttmr+0xbc>)
 8009b98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8009c48 <tcp_fasttmr+0xc0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009ba0:	e048      	b.n	8009c34 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7f9a      	ldrb	r2, [r3, #30]
 8009ba6:	4b27      	ldr	r3, [pc, #156]	@ (8009c44 <tcp_fasttmr+0xbc>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d03f      	beq.n	8009c2e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009bae:	4b25      	ldr	r3, [pc, #148]	@ (8009c44 <tcp_fasttmr+0xbc>)
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8b5b      	ldrh	r3, [r3, #26]
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d010      	beq.n	8009be4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8b5b      	ldrh	r3, [r3, #26]
 8009bc6:	f043 0302 	orr.w	r3, r3, #2
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f003 fac9 	bl	800d168 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	8b5b      	ldrh	r3, [r3, #26]
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8b5b      	ldrh	r3, [r3, #26]
 8009be8:	f003 0308 	and.w	r3, r3, #8
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d009      	beq.n	8009c04 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	8b5b      	ldrh	r3, [r3, #26]
 8009bf4:	f023 0308 	bic.w	r3, r3, #8
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff fa76 	bl	80090f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009c12:	4b0e      	ldr	r3, [pc, #56]	@ (8009c4c <tcp_fasttmr+0xc4>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f819 	bl	8009c50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <tcp_fasttmr+0xc4>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d000      	beq.n	8009c28 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009c26:	e7b8      	b.n	8009b9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	607b      	str	r3, [r7, #4]
 8009c2c:	e002      	b.n	8009c34 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1b3      	bne.n	8009ba2 <tcp_fasttmr+0x1a>
    }
  }
}
 8009c3a:	bf00      	nop
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	20007d8a 	.word	0x20007d8a
 8009c48:	20007d80 	.word	0x20007d80
 8009c4c:	20007d88 	.word	0x20007d88

08009c50 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <tcp_process_refused_data+0x22>
 8009c5e:	4b37      	ldr	r3, [pc, #220]	@ (8009d3c <tcp_process_refused_data+0xec>)
 8009c60:	f240 6209 	movw	r2, #1545	@ 0x609
 8009c64:	4936      	ldr	r1, [pc, #216]	@ (8009d40 <tcp_process_refused_data+0xf0>)
 8009c66:	4837      	ldr	r0, [pc, #220]	@ (8009d44 <tcp_process_refused_data+0xf4>)
 8009c68:	f005 f8cc 	bl	800ee04 <iprintf>
 8009c6c:	f06f 030f 	mvn.w	r3, #15
 8009c70:	e060      	b.n	8009d34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c76:	7b5b      	ldrb	r3, [r3, #13]
 8009c78:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c7e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <tcp_process_refused_data+0x58>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6918      	ldr	r0, [r3, #16]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	47a0      	blx	r4
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]
 8009ca6:	e007      	b.n	8009cb8 <tcp_process_refused_data+0x68>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	2000      	movs	r0, #0
 8009cb0:	f000 f8a4 	bl	8009dfc <tcp_recv_null>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d12a      	bne.n	8009d16 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d033      	beq.n	8009d32 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009cd2:	d005      	beq.n	8009ce0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cd8:	3301      	adds	r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00b      	beq.n	8009d02 <tcp_process_refused_data+0xb2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6918      	ldr	r0, [r3, #16]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	47a0      	blx	r4
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]
 8009d00:	e001      	b.n	8009d06 <tcp_process_refused_data+0xb6>
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d0a:	f113 0f0d 	cmn.w	r3, #13
 8009d0e:	d110      	bne.n	8009d32 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009d10:	f06f 030c 	mvn.w	r3, #12
 8009d14:	e00e      	b.n	8009d34 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d1a:	f113 0f0d 	cmn.w	r3, #13
 8009d1e:	d102      	bne.n	8009d26 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009d20:	f06f 030c 	mvn.w	r3, #12
 8009d24:	e006      	b.n	8009d34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009d2c:	f06f 0304 	mvn.w	r3, #4
 8009d30:	e000      	b.n	8009d34 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd90      	pop	{r4, r7, pc}
 8009d3c:	08011364 	.word	0x08011364
 8009d40:	080118ac 	.word	0x080118ac
 8009d44:	080113e0 	.word	0x080113e0

08009d48 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009d50:	e007      	b.n	8009d62 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f80a 	bl	8009d72 <tcp_seg_free>
    seg = next;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f4      	bne.n	8009d52 <tcp_segs_free+0xa>
  }
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00c      	beq.n	8009d9a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d004      	beq.n	8009d92 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe fd6b 	bl	8008868 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	2003      	movs	r0, #3
 8009d96:	f7fd fef1 	bl	8007b7c <memp_free>
  }
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <tcp_seg_copy+0x1c>
 8009db2:	4b0f      	ldr	r3, [pc, #60]	@ (8009df0 <tcp_seg_copy+0x4c>)
 8009db4:	f240 6282 	movw	r2, #1666	@ 0x682
 8009db8:	490e      	ldr	r1, [pc, #56]	@ (8009df4 <tcp_seg_copy+0x50>)
 8009dba:	480f      	ldr	r0, [pc, #60]	@ (8009df8 <tcp_seg_copy+0x54>)
 8009dbc:	f005 f822 	bl	800ee04 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009dc0:	2003      	movs	r0, #3
 8009dc2:	f7fd fe6b 	bl	8007a9c <memp_malloc>
 8009dc6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <tcp_seg_copy+0x2e>
    return NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e00a      	b.n	8009de8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009dd2:	2210      	movs	r2, #16
 8009dd4:	6879      	ldr	r1, [r7, #4]
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f005 f92b 	bl	800f032 <memcpy>
  pbuf_ref(cseg->p);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe fde1 	bl	80089a8 <pbuf_ref>
  return cseg;
 8009de6:	68fb      	ldr	r3, [r7, #12]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	08011364 	.word	0x08011364
 8009df4:	080118f0 	.word	0x080118f0
 8009df8:	080113e0 	.word	0x080113e0

08009dfc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d109      	bne.n	8009e24 <tcp_recv_null+0x28>
 8009e10:	4b12      	ldr	r3, [pc, #72]	@ (8009e5c <tcp_recv_null+0x60>)
 8009e12:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009e16:	4912      	ldr	r1, [pc, #72]	@ (8009e60 <tcp_recv_null+0x64>)
 8009e18:	4812      	ldr	r0, [pc, #72]	@ (8009e64 <tcp_recv_null+0x68>)
 8009e1a:	f004 fff3 	bl	800ee04 <iprintf>
 8009e1e:	f06f 030f 	mvn.w	r3, #15
 8009e22:	e016      	b.n	8009e52 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	891b      	ldrh	r3, [r3, #8]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	68b8      	ldr	r0, [r7, #8]
 8009e32:	f7ff fb17 	bl	8009464 <tcp_recved>
    pbuf_free(p);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fe fd16 	bl	8008868 <pbuf_free>
 8009e3c:	e008      	b.n	8009e50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d104      	bne.n	8009e50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009e46:	68b8      	ldr	r0, [r7, #8]
 8009e48:	f7ff f9bc 	bl	80091c4 <tcp_close>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	e000      	b.n	8009e52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	08011364 	.word	0x08011364
 8009e60:	0801190c 	.word	0x0801190c
 8009e64:	080113e0 	.word	0x080113e0

08009e68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	db01      	blt.n	8009e7e <tcp_kill_prio+0x16>
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	e000      	b.n	8009e80 <tcp_kill_prio+0x18>
 8009e7e:	237f      	movs	r3, #127	@ 0x7f
 8009e80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d034      	beq.n	8009ef2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e96:	4b19      	ldr	r3, [pc, #100]	@ (8009efc <tcp_kill_prio+0x94>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e01f      	b.n	8009ede <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	7d5b      	ldrb	r3, [r3, #21]
 8009ea2:	7afa      	ldrb	r2, [r7, #11]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d80c      	bhi.n	8009ec2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009eac:	7afa      	ldrb	r2, [r7, #11]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d112      	bne.n	8009ed8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009eb2:	4b13      	ldr	r3, [pc, #76]	@ (8009f00 <tcp_kill_prio+0x98>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d80a      	bhi.n	8009ed8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f00 <tcp_kill_prio+0x98>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	7d5b      	ldrb	r3, [r3, #21]
 8009ed6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1dc      	bne.n	8009e9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009eea:	6938      	ldr	r0, [r7, #16]
 8009eec:	f7ff fa54 	bl	8009398 <tcp_abort>
 8009ef0:	e000      	b.n	8009ef4 <tcp_kill_prio+0x8c>
    return;
 8009ef2:	bf00      	nop
  }
}
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20007d80 	.word	0x20007d80
 8009f00:	20007d74 	.word	0x20007d74

08009f04 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	2b08      	cmp	r3, #8
 8009f12:	d009      	beq.n	8009f28 <tcp_kill_state+0x24>
 8009f14:	79fb      	ldrb	r3, [r7, #7]
 8009f16:	2b09      	cmp	r3, #9
 8009f18:	d006      	beq.n	8009f28 <tcp_kill_state+0x24>
 8009f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f84 <tcp_kill_state+0x80>)
 8009f1c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009f20:	4919      	ldr	r1, [pc, #100]	@ (8009f88 <tcp_kill_state+0x84>)
 8009f22:	481a      	ldr	r0, [pc, #104]	@ (8009f8c <tcp_kill_state+0x88>)
 8009f24:	f004 ff6e 	bl	800ee04 <iprintf>

  inactivity = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f30:	4b17      	ldr	r3, [pc, #92]	@ (8009f90 <tcp_kill_state+0x8c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	e017      	b.n	8009f68 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	7d1b      	ldrb	r3, [r3, #20]
 8009f3c:	79fa      	ldrb	r2, [r7, #7]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d10f      	bne.n	8009f62 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009f42:	4b14      	ldr	r3, [pc, #80]	@ (8009f94 <tcp_kill_state+0x90>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d807      	bhi.n	8009f62 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009f52:	4b10      	ldr	r3, [pc, #64]	@ (8009f94 <tcp_kill_state+0x90>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e4      	bne.n	8009f38 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d003      	beq.n	8009f7c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009f74:	2100      	movs	r1, #0
 8009f76:	6938      	ldr	r0, [r7, #16]
 8009f78:	f7ff f950 	bl	800921c <tcp_abandon>
  }
}
 8009f7c:	bf00      	nop
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	08011364 	.word	0x08011364
 8009f88:	08011928 	.word	0x08011928
 8009f8c:	080113e0 	.word	0x080113e0
 8009f90:	20007d80 	.word	0x20007d80
 8009f94:	20007d74 	.word	0x20007d74

08009f98 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fa6:	4b12      	ldr	r3, [pc, #72]	@ (8009ff0 <tcp_kill_timewait+0x58>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	e012      	b.n	8009fd4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009fae:	4b11      	ldr	r3, [pc, #68]	@ (8009ff4 <tcp_kill_timewait+0x5c>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d807      	bhi.n	8009fce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <tcp_kill_timewait+0x5c>)
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e9      	bne.n	8009fae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009fe0:	68b8      	ldr	r0, [r7, #8]
 8009fe2:	f7ff f9d9 	bl	8009398 <tcp_abort>
  }
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20007d84 	.word	0x20007d84
 8009ff4:	20007d74 	.word	0x20007d74

08009ff8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009ffe:	4b10      	ldr	r3, [pc, #64]	@ (800a040 <tcp_handle_closepend+0x48>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a004:	e014      	b.n	800a030 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	8b5b      	ldrh	r3, [r3, #26]
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d009      	beq.n	800a02c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	8b5b      	ldrh	r3, [r3, #26]
 800a01c:	f023 0308 	bic.w	r3, r3, #8
 800a020:	b29a      	uxth	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff f862 	bl	80090f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e7      	bne.n	800a006 <tcp_handle_closepend+0xe>
  }
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20007d80 	.word	0x20007d80

0800a044 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a04e:	2001      	movs	r0, #1
 800a050:	f7fd fd24 	bl	8007a9c <memp_malloc>
 800a054:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d126      	bne.n	800a0aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a05c:	f7ff ffcc 	bl	8009ff8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a060:	f7ff ff9a 	bl	8009f98 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a064:	2001      	movs	r0, #1
 800a066:	f7fd fd19 	bl	8007a9c <memp_malloc>
 800a06a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d11b      	bne.n	800a0aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a072:	2009      	movs	r0, #9
 800a074:	f7ff ff46 	bl	8009f04 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a078:	2001      	movs	r0, #1
 800a07a:	f7fd fd0f 	bl	8007a9c <memp_malloc>
 800a07e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d111      	bne.n	800a0aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a086:	2008      	movs	r0, #8
 800a088:	f7ff ff3c 	bl	8009f04 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a08c:	2001      	movs	r0, #1
 800a08e:	f7fd fd05 	bl	8007a9c <memp_malloc>
 800a092:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d107      	bne.n	800a0aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff fee3 	bl	8009e68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	f7fd fcfa 	bl	8007a9c <memp_malloc>
 800a0a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d03f      	beq.n	800a130 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a0b0:	229c      	movs	r2, #156	@ 0x9c
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f004 ff46 	bl	800ef46 <memset>
    pcb->prio = prio;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	79fa      	ldrb	r2, [r7, #7]
 800a0be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a0c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a0d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	22ff      	movs	r2, #255	@ 0xff
 800a0de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a0e6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2206      	movs	r2, #6
 800a0ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2206      	movs	r2, #6
 800a0f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0fc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2201      	movs	r2, #1
 800a102:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a106:	4b0d      	ldr	r3, [pc, #52]	@ (800a13c <tcp_alloc+0xf8>)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a10e:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <tcp_alloc+0xfc>)
 800a110:	781a      	ldrb	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a11c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4a08      	ldr	r2, [pc, #32]	@ (800a144 <tcp_alloc+0x100>)
 800a124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4a07      	ldr	r2, [pc, #28]	@ (800a148 <tcp_alloc+0x104>)
 800a12c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a130:	68fb      	ldr	r3, [r7, #12]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20007d74 	.word	0x20007d74
 800a140:	20007d8a 	.word	0x20007d8a
 800a144:	08009dfd 	.word	0x08009dfd
 800a148:	006ddd00 	.word	0x006ddd00

0800a14c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d107      	bne.n	800a16a <tcp_pcb_purge+0x1e>
 800a15a:	4b21      	ldr	r3, [pc, #132]	@ (800a1e0 <tcp_pcb_purge+0x94>)
 800a15c:	f640 0251 	movw	r2, #2129	@ 0x851
 800a160:	4920      	ldr	r1, [pc, #128]	@ (800a1e4 <tcp_pcb_purge+0x98>)
 800a162:	4821      	ldr	r0, [pc, #132]	@ (800a1e8 <tcp_pcb_purge+0x9c>)
 800a164:	f004 fe4e 	bl	800ee04 <iprintf>
 800a168:	e037      	b.n	800a1da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	7d1b      	ldrb	r3, [r3, #20]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d033      	beq.n	800a1da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a176:	2b0a      	cmp	r3, #10
 800a178:	d02f      	beq.n	800a1da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d02b      	beq.n	800a1da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a186:	2b00      	cmp	r3, #0
 800a188:	d007      	beq.n	800a19a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fb6a 	bl	8008868 <pbuf_free>
      pcb->refused_data = NULL;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f986 	bl	800a4b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1ae:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fdc7 	bl	8009d48 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff fdc2 	bl	8009d48 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	08011364 	.word	0x08011364
 800a1e4:	080119e8 	.word	0x080119e8
 800a1e8:	080113e0 	.word	0x080113e0

0800a1ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <tcp_pcb_remove+0x1e>
 800a1fc:	4b3e      	ldr	r3, [pc, #248]	@ (800a2f8 <tcp_pcb_remove+0x10c>)
 800a1fe:	f640 0283 	movw	r2, #2179	@ 0x883
 800a202:	493e      	ldr	r1, [pc, #248]	@ (800a2fc <tcp_pcb_remove+0x110>)
 800a204:	483e      	ldr	r0, [pc, #248]	@ (800a300 <tcp_pcb_remove+0x114>)
 800a206:	f004 fdfd 	bl	800ee04 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d106      	bne.n	800a21e <tcp_pcb_remove+0x32>
 800a210:	4b39      	ldr	r3, [pc, #228]	@ (800a2f8 <tcp_pcb_remove+0x10c>)
 800a212:	f640 0284 	movw	r2, #2180	@ 0x884
 800a216:	493b      	ldr	r1, [pc, #236]	@ (800a304 <tcp_pcb_remove+0x118>)
 800a218:	4839      	ldr	r0, [pc, #228]	@ (800a300 <tcp_pcb_remove+0x114>)
 800a21a:	f004 fdf3 	bl	800ee04 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	429a      	cmp	r2, r3
 800a226:	d105      	bne.n	800a234 <tcp_pcb_remove+0x48>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	e013      	b.n	800a25c <tcp_pcb_remove+0x70>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	e00c      	b.n	800a256 <tcp_pcb_remove+0x6a>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	429a      	cmp	r2, r3
 800a244:	d104      	bne.n	800a250 <tcp_pcb_remove+0x64>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	68da      	ldr	r2, [r3, #12]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	60da      	str	r2, [r3, #12]
 800a24e:	e005      	b.n	800a25c <tcp_pcb_remove+0x70>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1ef      	bne.n	800a23c <tcp_pcb_remove+0x50>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2200      	movs	r2, #0
 800a260:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a262:	6838      	ldr	r0, [r7, #0]
 800a264:	f7ff ff72 	bl	800a14c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	7d1b      	ldrb	r3, [r3, #20]
 800a26c:	2b0a      	cmp	r3, #10
 800a26e:	d013      	beq.n	800a298 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a274:	2b01      	cmp	r3, #1
 800a276:	d00f      	beq.n	800a298 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	8b5b      	ldrh	r3, [r3, #26]
 800a27c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a280:	2b00      	cmp	r3, #0
 800a282:	d009      	beq.n	800a298 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	8b5b      	ldrh	r3, [r3, #26]
 800a288:	f043 0302 	orr.w	r3, r3, #2
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a292:	6838      	ldr	r0, [r7, #0]
 800a294:	f002 ff68 	bl	800d168 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	7d1b      	ldrb	r3, [r3, #20]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d020      	beq.n	800a2e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d006      	beq.n	800a2b6 <tcp_pcb_remove+0xca>
 800a2a8:	4b13      	ldr	r3, [pc, #76]	@ (800a2f8 <tcp_pcb_remove+0x10c>)
 800a2aa:	f640 0293 	movw	r2, #2195	@ 0x893
 800a2ae:	4916      	ldr	r1, [pc, #88]	@ (800a308 <tcp_pcb_remove+0x11c>)
 800a2b0:	4813      	ldr	r0, [pc, #76]	@ (800a300 <tcp_pcb_remove+0x114>)
 800a2b2:	f004 fda7 	bl	800ee04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d006      	beq.n	800a2cc <tcp_pcb_remove+0xe0>
 800a2be:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f8 <tcp_pcb_remove+0x10c>)
 800a2c0:	f640 0294 	movw	r2, #2196	@ 0x894
 800a2c4:	4911      	ldr	r1, [pc, #68]	@ (800a30c <tcp_pcb_remove+0x120>)
 800a2c6:	480e      	ldr	r0, [pc, #56]	@ (800a300 <tcp_pcb_remove+0x114>)
 800a2c8:	f004 fd9c 	bl	800ee04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d006      	beq.n	800a2e2 <tcp_pcb_remove+0xf6>
 800a2d4:	4b08      	ldr	r3, [pc, #32]	@ (800a2f8 <tcp_pcb_remove+0x10c>)
 800a2d6:	f640 0296 	movw	r2, #2198	@ 0x896
 800a2da:	490d      	ldr	r1, [pc, #52]	@ (800a310 <tcp_pcb_remove+0x124>)
 800a2dc:	4808      	ldr	r0, [pc, #32]	@ (800a300 <tcp_pcb_remove+0x114>)
 800a2de:	f004 fd91 	bl	800ee04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a2ee:	bf00      	nop
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	08011364 	.word	0x08011364
 800a2fc:	08011a04 	.word	0x08011a04
 800a300:	080113e0 	.word	0x080113e0
 800a304:	08011a20 	.word	0x08011a20
 800a308:	08011a40 	.word	0x08011a40
 800a30c:	08011a58 	.word	0x08011a58
 800a310:	08011a74 	.word	0x08011a74

0800a314 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d106      	bne.n	800a330 <tcp_next_iss+0x1c>
 800a322:	4b0a      	ldr	r3, [pc, #40]	@ (800a34c <tcp_next_iss+0x38>)
 800a324:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a328:	4909      	ldr	r1, [pc, #36]	@ (800a350 <tcp_next_iss+0x3c>)
 800a32a:	480a      	ldr	r0, [pc, #40]	@ (800a354 <tcp_next_iss+0x40>)
 800a32c:	f004 fd6a 	bl	800ee04 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a330:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <tcp_next_iss+0x44>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b09      	ldr	r3, [pc, #36]	@ (800a35c <tcp_next_iss+0x48>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4413      	add	r3, r2
 800a33a:	4a07      	ldr	r2, [pc, #28]	@ (800a358 <tcp_next_iss+0x44>)
 800a33c:	6013      	str	r3, [r2, #0]
  return iss;
 800a33e:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <tcp_next_iss+0x44>)
 800a340:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	08011364 	.word	0x08011364
 800a350:	08011a8c 	.word	0x08011a8c
 800a354:	080113e0 	.word	0x080113e0
 800a358:	20000024 	.word	0x20000024
 800a35c:	20007d74 	.word	0x20007d74

0800a360 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <tcp_eff_send_mss_netif+0x22>
 800a374:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <tcp_eff_send_mss_netif+0x68>)
 800a376:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a37a:	4914      	ldr	r1, [pc, #80]	@ (800a3cc <tcp_eff_send_mss_netif+0x6c>)
 800a37c:	4814      	ldr	r0, [pc, #80]	@ (800a3d0 <tcp_eff_send_mss_netif+0x70>)
 800a37e:	f004 fd41 	bl	800ee04 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a388:	89fb      	ldrh	r3, [r7, #14]
 800a38a:	e019      	b.n	800a3c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a390:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a392:	8afb      	ldrh	r3, [r7, #22]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d012      	beq.n	800a3be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a398:	2328      	movs	r3, #40	@ 0x28
 800a39a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a39c:	8afa      	ldrh	r2, [r7, #22]
 800a39e:	8abb      	ldrh	r3, [r7, #20]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d904      	bls.n	800a3ae <tcp_eff_send_mss_netif+0x4e>
 800a3a4:	8afa      	ldrh	r2, [r7, #22]
 800a3a6:	8abb      	ldrh	r3, [r7, #20]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	e000      	b.n	800a3b0 <tcp_eff_send_mss_netif+0x50>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a3b2:	8a7a      	ldrh	r2, [r7, #18]
 800a3b4:	89fb      	ldrh	r3, [r7, #14]
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	bf28      	it	cs
 800a3ba:	4613      	movcs	r3, r2
 800a3bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a3be:	89fb      	ldrh	r3, [r7, #14]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	08011364 	.word	0x08011364
 800a3cc:	08011aa8 	.word	0x08011aa8
 800a3d0:	080113e0 	.word	0x080113e0

0800a3d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d119      	bne.n	800a41c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a3e8:	4b10      	ldr	r3, [pc, #64]	@ (800a42c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a3ea:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a3ee:	4910      	ldr	r1, [pc, #64]	@ (800a430 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a3f0:	4810      	ldr	r0, [pc, #64]	@ (800a434 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a3f2:	f004 fd07 	bl	800ee04 <iprintf>

  while (pcb != NULL) {
 800a3f6:	e011      	b.n	800a41c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d108      	bne.n	800a416 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7fe ffc4 	bl	8009398 <tcp_abort>
      pcb = next;
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	e002      	b.n	800a41c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1ea      	bne.n	800a3f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	08011364 	.word	0x08011364
 800a430:	08011ad0 	.word	0x08011ad0
 800a434:	080113e0 	.word	0x080113e0

0800a438 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d02a      	beq.n	800a49e <tcp_netif_ip_addr_changed+0x66>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d026      	beq.n	800a49e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a450:	4b15      	ldr	r3, [pc, #84]	@ (800a4a8 <tcp_netif_ip_addr_changed+0x70>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff ffbc 	bl	800a3d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a45c:	4b13      	ldr	r3, [pc, #76]	@ (800a4ac <tcp_netif_ip_addr_changed+0x74>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff ffb6 	bl	800a3d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d017      	beq.n	800a49e <tcp_netif_ip_addr_changed+0x66>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d013      	beq.n	800a49e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a476:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b0 <tcp_netif_ip_addr_changed+0x78>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e00c      	b.n	800a498 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d103      	bne.n	800a492 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1ef      	bne.n	800a47e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20007d80 	.word	0x20007d80
 800a4ac:	20007d78 	.word	0x20007d78
 800a4b0:	20007d7c 	.word	0x20007d7c

0800a4b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d007      	beq.n	800a4d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff fc3d 	bl	8009d48 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b08d      	sub	sp, #52	@ 0x34
 800a4e0:	af04      	add	r7, sp, #16
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d105      	bne.n	800a4f8 <tcp_input+0x1c>
 800a4ec:	4b9b      	ldr	r3, [pc, #620]	@ (800a75c <tcp_input+0x280>)
 800a4ee:	2283      	movs	r2, #131	@ 0x83
 800a4f0:	499b      	ldr	r1, [pc, #620]	@ (800a760 <tcp_input+0x284>)
 800a4f2:	489c      	ldr	r0, [pc, #624]	@ (800a764 <tcp_input+0x288>)
 800a4f4:	f004 fc86 	bl	800ee04 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	4a9a      	ldr	r2, [pc, #616]	@ (800a768 <tcp_input+0x28c>)
 800a4fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	895b      	ldrh	r3, [r3, #10]
 800a504:	2b13      	cmp	r3, #19
 800a506:	f240 83d1 	bls.w	800acac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a50a:	4b98      	ldr	r3, [pc, #608]	@ (800a76c <tcp_input+0x290>)
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	4a97      	ldr	r2, [pc, #604]	@ (800a76c <tcp_input+0x290>)
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	4611      	mov	r1, r2
 800a514:	4618      	mov	r0, r3
 800a516:	f7fc f811 	bl	800653c <ip4_addr_isbroadcast_u32>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 83c7 	bne.w	800acb0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a522:	4b92      	ldr	r3, [pc, #584]	@ (800a76c <tcp_input+0x290>)
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a52a:	2be0      	cmp	r3, #224	@ 0xe0
 800a52c:	f000 83c0 	beq.w	800acb0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a530:	4b8d      	ldr	r3, [pc, #564]	@ (800a768 <tcp_input+0x28c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	899b      	ldrh	r3, [r3, #12]
 800a536:	b29b      	uxth	r3, r3
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fa fb73 	bl	8004c24 <lwip_htons>
 800a53e:	4603      	mov	r3, r0
 800a540:	0b1b      	lsrs	r3, r3, #12
 800a542:	b29b      	uxth	r3, r3
 800a544:	b2db      	uxtb	r3, r3
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a54a:	7cbb      	ldrb	r3, [r7, #18]
 800a54c:	2b13      	cmp	r3, #19
 800a54e:	f240 83b1 	bls.w	800acb4 <tcp_input+0x7d8>
 800a552:	7cbb      	ldrb	r3, [r7, #18]
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	891b      	ldrh	r3, [r3, #8]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	f200 83aa 	bhi.w	800acb4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a560:	7cbb      	ldrb	r3, [r7, #18]
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b14      	subs	r3, #20
 800a566:	b29a      	uxth	r2, r3
 800a568:	4b81      	ldr	r3, [pc, #516]	@ (800a770 <tcp_input+0x294>)
 800a56a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a56c:	4b81      	ldr	r3, [pc, #516]	@ (800a774 <tcp_input+0x298>)
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	895a      	ldrh	r2, [r3, #10]
 800a576:	7cbb      	ldrb	r3, [r7, #18]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d309      	bcc.n	800a592 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a57e:	4b7c      	ldr	r3, [pc, #496]	@ (800a770 <tcp_input+0x294>)
 800a580:	881a      	ldrh	r2, [r3, #0]
 800a582:	4b7d      	ldr	r3, [pc, #500]	@ (800a778 <tcp_input+0x29c>)
 800a584:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a586:	7cbb      	ldrb	r3, [r7, #18]
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7fe f8e6 	bl	800875c <pbuf_remove_header>
 800a590:	e04e      	b.n	800a630 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d105      	bne.n	800a5a6 <tcp_input+0xca>
 800a59a:	4b70      	ldr	r3, [pc, #448]	@ (800a75c <tcp_input+0x280>)
 800a59c:	22c2      	movs	r2, #194	@ 0xc2
 800a59e:	4977      	ldr	r1, [pc, #476]	@ (800a77c <tcp_input+0x2a0>)
 800a5a0:	4870      	ldr	r0, [pc, #448]	@ (800a764 <tcp_input+0x288>)
 800a5a2:	f004 fc2f 	bl	800ee04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a5a6:	2114      	movs	r1, #20
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7fe f8d7 	bl	800875c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	895a      	ldrh	r2, [r3, #10]
 800a5b2:	4b71      	ldr	r3, [pc, #452]	@ (800a778 <tcp_input+0x29c>)
 800a5b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a5b6:	4b6e      	ldr	r3, [pc, #440]	@ (800a770 <tcp_input+0x294>)
 800a5b8:	881a      	ldrh	r2, [r3, #0]
 800a5ba:	4b6f      	ldr	r3, [pc, #444]	@ (800a778 <tcp_input+0x29c>)
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a5c2:	4b6d      	ldr	r3, [pc, #436]	@ (800a778 <tcp_input+0x29c>)
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7fe f8c7 	bl	800875c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	895b      	ldrh	r3, [r3, #10]
 800a5d4:	8a3a      	ldrh	r2, [r7, #16]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	f200 836e 	bhi.w	800acb8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	4a64      	ldr	r2, [pc, #400]	@ (800a774 <tcp_input+0x298>)
 800a5e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	8a3a      	ldrh	r2, [r7, #16]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe f8b4 	bl	800875c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	891a      	ldrh	r2, [r3, #8]
 800a5f8:	8a3b      	ldrh	r3, [r7, #16]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	895b      	ldrh	r3, [r3, #10]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d005      	beq.n	800a616 <tcp_input+0x13a>
 800a60a:	4b54      	ldr	r3, [pc, #336]	@ (800a75c <tcp_input+0x280>)
 800a60c:	22df      	movs	r2, #223	@ 0xdf
 800a60e:	495c      	ldr	r1, [pc, #368]	@ (800a780 <tcp_input+0x2a4>)
 800a610:	4854      	ldr	r0, [pc, #336]	@ (800a764 <tcp_input+0x288>)
 800a612:	f004 fbf7 	bl	800ee04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	891a      	ldrh	r2, [r3, #8]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	891b      	ldrh	r3, [r3, #8]
 800a620:	429a      	cmp	r2, r3
 800a622:	d005      	beq.n	800a630 <tcp_input+0x154>
 800a624:	4b4d      	ldr	r3, [pc, #308]	@ (800a75c <tcp_input+0x280>)
 800a626:	22e0      	movs	r2, #224	@ 0xe0
 800a628:	4956      	ldr	r1, [pc, #344]	@ (800a784 <tcp_input+0x2a8>)
 800a62a:	484e      	ldr	r0, [pc, #312]	@ (800a764 <tcp_input+0x288>)
 800a62c:	f004 fbea 	bl	800ee04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a630:	4b4d      	ldr	r3, [pc, #308]	@ (800a768 <tcp_input+0x28c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29b      	uxth	r3, r3
 800a638:	4a4b      	ldr	r2, [pc, #300]	@ (800a768 <tcp_input+0x28c>)
 800a63a:	6814      	ldr	r4, [r2, #0]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fa faf1 	bl	8004c24 <lwip_htons>
 800a642:	4603      	mov	r3, r0
 800a644:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a646:	4b48      	ldr	r3, [pc, #288]	@ (800a768 <tcp_input+0x28c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	885b      	ldrh	r3, [r3, #2]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	4a46      	ldr	r2, [pc, #280]	@ (800a768 <tcp_input+0x28c>)
 800a650:	6814      	ldr	r4, [r2, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f7fa fae6 	bl	8004c24 <lwip_htons>
 800a658:	4603      	mov	r3, r0
 800a65a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a65c:	4b42      	ldr	r3, [pc, #264]	@ (800a768 <tcp_input+0x28c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	4a41      	ldr	r2, [pc, #260]	@ (800a768 <tcp_input+0x28c>)
 800a664:	6814      	ldr	r4, [r2, #0]
 800a666:	4618      	mov	r0, r3
 800a668:	f7fa faf2 	bl	8004c50 <lwip_htonl>
 800a66c:	4603      	mov	r3, r0
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	6863      	ldr	r3, [r4, #4]
 800a672:	4a45      	ldr	r2, [pc, #276]	@ (800a788 <tcp_input+0x2ac>)
 800a674:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a676:	4b3c      	ldr	r3, [pc, #240]	@ (800a768 <tcp_input+0x28c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	4a3a      	ldr	r2, [pc, #232]	@ (800a768 <tcp_input+0x28c>)
 800a67e:	6814      	ldr	r4, [r2, #0]
 800a680:	4618      	mov	r0, r3
 800a682:	f7fa fae5 	bl	8004c50 <lwip_htonl>
 800a686:	4603      	mov	r3, r0
 800a688:	60a3      	str	r3, [r4, #8]
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	4a3f      	ldr	r2, [pc, #252]	@ (800a78c <tcp_input+0x2b0>)
 800a68e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a690:	4b35      	ldr	r3, [pc, #212]	@ (800a768 <tcp_input+0x28c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	89db      	ldrh	r3, [r3, #14]
 800a696:	b29b      	uxth	r3, r3
 800a698:	4a33      	ldr	r2, [pc, #204]	@ (800a768 <tcp_input+0x28c>)
 800a69a:	6814      	ldr	r4, [r2, #0]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fa fac1 	bl	8004c24 <lwip_htons>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a6a6:	4b30      	ldr	r3, [pc, #192]	@ (800a768 <tcp_input+0x28c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	899b      	ldrh	r3, [r3, #12]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fa fab8 	bl	8004c24 <lwip_htons>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	4b34      	ldr	r3, [pc, #208]	@ (800a790 <tcp_input+0x2b4>)
 800a6c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	891a      	ldrh	r2, [r3, #8]
 800a6c6:	4b33      	ldr	r3, [pc, #204]	@ (800a794 <tcp_input+0x2b8>)
 800a6c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a6ca:	4b31      	ldr	r3, [pc, #196]	@ (800a790 <tcp_input+0x2b4>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00c      	beq.n	800a6f0 <tcp_input+0x214>
    tcplen++;
 800a6d6:	4b2f      	ldr	r3, [pc, #188]	@ (800a794 <tcp_input+0x2b8>)
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	4b2d      	ldr	r3, [pc, #180]	@ (800a794 <tcp_input+0x2b8>)
 800a6e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	891a      	ldrh	r2, [r3, #8]
 800a6e6:	4b2b      	ldr	r3, [pc, #172]	@ (800a794 <tcp_input+0x2b8>)
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	f200 82e6 	bhi.w	800acbc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6f4:	4b28      	ldr	r3, [pc, #160]	@ (800a798 <tcp_input+0x2bc>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	61fb      	str	r3, [r7, #28]
 800a6fa:	e09d      	b.n	800a838 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	7d1b      	ldrb	r3, [r3, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d105      	bne.n	800a710 <tcp_input+0x234>
 800a704:	4b15      	ldr	r3, [pc, #84]	@ (800a75c <tcp_input+0x280>)
 800a706:	22fb      	movs	r2, #251	@ 0xfb
 800a708:	4924      	ldr	r1, [pc, #144]	@ (800a79c <tcp_input+0x2c0>)
 800a70a:	4816      	ldr	r0, [pc, #88]	@ (800a764 <tcp_input+0x288>)
 800a70c:	f004 fb7a 	bl	800ee04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	7d1b      	ldrb	r3, [r3, #20]
 800a714:	2b0a      	cmp	r3, #10
 800a716:	d105      	bne.n	800a724 <tcp_input+0x248>
 800a718:	4b10      	ldr	r3, [pc, #64]	@ (800a75c <tcp_input+0x280>)
 800a71a:	22fc      	movs	r2, #252	@ 0xfc
 800a71c:	4920      	ldr	r1, [pc, #128]	@ (800a7a0 <tcp_input+0x2c4>)
 800a71e:	4811      	ldr	r0, [pc, #68]	@ (800a764 <tcp_input+0x288>)
 800a720:	f004 fb70 	bl	800ee04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	7d1b      	ldrb	r3, [r3, #20]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d105      	bne.n	800a738 <tcp_input+0x25c>
 800a72c:	4b0b      	ldr	r3, [pc, #44]	@ (800a75c <tcp_input+0x280>)
 800a72e:	22fd      	movs	r2, #253	@ 0xfd
 800a730:	491c      	ldr	r1, [pc, #112]	@ (800a7a4 <tcp_input+0x2c8>)
 800a732:	480c      	ldr	r0, [pc, #48]	@ (800a764 <tcp_input+0x288>)
 800a734:	f004 fb66 	bl	800ee04 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	7a1b      	ldrb	r3, [r3, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d033      	beq.n	800a7a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	7a1a      	ldrb	r2, [r3, #8]
 800a744:	4b09      	ldr	r3, [pc, #36]	@ (800a76c <tcp_input+0x290>)
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a74c:	3301      	adds	r3, #1
 800a74e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a750:	429a      	cmp	r2, r3
 800a752:	d029      	beq.n	800a7a8 <tcp_input+0x2cc>
      prev = pcb;
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	61bb      	str	r3, [r7, #24]
      continue;
 800a758:	e06b      	b.n	800a832 <tcp_input+0x356>
 800a75a:	bf00      	nop
 800a75c:	08011b04 	.word	0x08011b04
 800a760:	08011b70 	.word	0x08011b70
 800a764:	08011b88 	.word	0x08011b88
 800a768:	20007d9c 	.word	0x20007d9c
 800a76c:	20004e4c 	.word	0x20004e4c
 800a770:	20007da0 	.word	0x20007da0
 800a774:	20007da4 	.word	0x20007da4
 800a778:	20007da2 	.word	0x20007da2
 800a77c:	08011bb0 	.word	0x08011bb0
 800a780:	08011bc0 	.word	0x08011bc0
 800a784:	08011bcc 	.word	0x08011bcc
 800a788:	20007dac 	.word	0x20007dac
 800a78c:	20007db0 	.word	0x20007db0
 800a790:	20007db8 	.word	0x20007db8
 800a794:	20007db6 	.word	0x20007db6
 800a798:	20007d80 	.word	0x20007d80
 800a79c:	08011bec 	.word	0x08011bec
 800a7a0:	08011c14 	.word	0x08011c14
 800a7a4:	08011c40 	.word	0x08011c40
    }

    if (pcb->remote_port == tcphdr->src &&
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	8b1a      	ldrh	r2, [r3, #24]
 800a7ac:	4b72      	ldr	r3, [pc, #456]	@ (800a978 <tcp_input+0x49c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d13a      	bne.n	800a82e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	8ada      	ldrh	r2, [r3, #22]
 800a7bc:	4b6e      	ldr	r3, [pc, #440]	@ (800a978 <tcp_input+0x49c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	885b      	ldrh	r3, [r3, #2]
 800a7c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d132      	bne.n	800a82e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	4b6b      	ldr	r3, [pc, #428]	@ (800a97c <tcp_input+0x4a0>)
 800a7ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d12c      	bne.n	800a82e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4b68      	ldr	r3, [pc, #416]	@ (800a97c <tcp_input+0x4a0>)
 800a7da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d126      	bne.n	800a82e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d106      	bne.n	800a7f8 <tcp_input+0x31c>
 800a7ea:	4b65      	ldr	r3, [pc, #404]	@ (800a980 <tcp_input+0x4a4>)
 800a7ec:	f240 120d 	movw	r2, #269	@ 0x10d
 800a7f0:	4964      	ldr	r1, [pc, #400]	@ (800a984 <tcp_input+0x4a8>)
 800a7f2:	4865      	ldr	r0, [pc, #404]	@ (800a988 <tcp_input+0x4ac>)
 800a7f4:	f004 fb06 	bl	800ee04 <iprintf>
      if (prev != NULL) {
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <tcp_input+0x338>
        prev->next = pcb->next;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	68da      	ldr	r2, [r3, #12]
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a806:	4b61      	ldr	r3, [pc, #388]	@ (800a98c <tcp_input+0x4b0>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a80e:	4a5f      	ldr	r2, [pc, #380]	@ (800a98c <tcp_input+0x4b0>)
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d111      	bne.n	800a842 <tcp_input+0x366>
 800a81e:	4b58      	ldr	r3, [pc, #352]	@ (800a980 <tcp_input+0x4a4>)
 800a820:	f240 1215 	movw	r2, #277	@ 0x115
 800a824:	495a      	ldr	r1, [pc, #360]	@ (800a990 <tcp_input+0x4b4>)
 800a826:	4858      	ldr	r0, [pc, #352]	@ (800a988 <tcp_input+0x4ac>)
 800a828:	f004 faec 	bl	800ee04 <iprintf>
      break;
 800a82c:	e009      	b.n	800a842 <tcp_input+0x366>
    }
    prev = pcb;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	61fb      	str	r3, [r7, #28]
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f47f af5e 	bne.w	800a6fc <tcp_input+0x220>
 800a840:	e000      	b.n	800a844 <tcp_input+0x368>
      break;
 800a842:	bf00      	nop
  }

  if (pcb == NULL) {
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	2b00      	cmp	r3, #0
 800a848:	f040 80aa 	bne.w	800a9a0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a84c:	4b51      	ldr	r3, [pc, #324]	@ (800a994 <tcp_input+0x4b8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	61fb      	str	r3, [r7, #28]
 800a852:	e03f      	b.n	800a8d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	7d1b      	ldrb	r3, [r3, #20]
 800a858:	2b0a      	cmp	r3, #10
 800a85a:	d006      	beq.n	800a86a <tcp_input+0x38e>
 800a85c:	4b48      	ldr	r3, [pc, #288]	@ (800a980 <tcp_input+0x4a4>)
 800a85e:	f240 121f 	movw	r2, #287	@ 0x11f
 800a862:	494d      	ldr	r1, [pc, #308]	@ (800a998 <tcp_input+0x4bc>)
 800a864:	4848      	ldr	r0, [pc, #288]	@ (800a988 <tcp_input+0x4ac>)
 800a866:	f004 facd 	bl	800ee04 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	7a1b      	ldrb	r3, [r3, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d009      	beq.n	800a886 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	7a1a      	ldrb	r2, [r3, #8]
 800a876:	4b41      	ldr	r3, [pc, #260]	@ (800a97c <tcp_input+0x4a0>)
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a87e:	3301      	adds	r3, #1
 800a880:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a882:	429a      	cmp	r2, r3
 800a884:	d122      	bne.n	800a8cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	8b1a      	ldrh	r2, [r3, #24]
 800a88a:	4b3b      	ldr	r3, [pc, #236]	@ (800a978 <tcp_input+0x49c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	429a      	cmp	r2, r3
 800a894:	d11b      	bne.n	800a8ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	8ada      	ldrh	r2, [r3, #22]
 800a89a:	4b37      	ldr	r3, [pc, #220]	@ (800a978 <tcp_input+0x49c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	885b      	ldrh	r3, [r3, #2]
 800a8a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d113      	bne.n	800a8ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	4b34      	ldr	r3, [pc, #208]	@ (800a97c <tcp_input+0x4a0>)
 800a8ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d10d      	bne.n	800a8ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b31      	ldr	r3, [pc, #196]	@ (800a97c <tcp_input+0x4a0>)
 800a8b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d107      	bne.n	800a8ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a8be:	69f8      	ldr	r0, [r7, #28]
 800a8c0:	f000 fb56 	bl	800af70 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7fd ffcf 	bl	8008868 <pbuf_free>
        return;
 800a8ca:	e1fd      	b.n	800acc8 <tcp_input+0x7ec>
        continue;
 800a8cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1bc      	bne.n	800a854 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a8de:	4b2f      	ldr	r3, [pc, #188]	@ (800a99c <tcp_input+0x4c0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	617b      	str	r3, [r7, #20]
 800a8e4:	e02a      	b.n	800a93c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	7a1b      	ldrb	r3, [r3, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00c      	beq.n	800a908 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	7a1a      	ldrb	r2, [r3, #8]
 800a8f2:	4b22      	ldr	r3, [pc, #136]	@ (800a97c <tcp_input+0x4a0>)
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d002      	beq.n	800a908 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	61bb      	str	r3, [r7, #24]
        continue;
 800a906:	e016      	b.n	800a936 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	8ada      	ldrh	r2, [r3, #22]
 800a90c:	4b1a      	ldr	r3, [pc, #104]	@ (800a978 <tcp_input+0x49c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	885b      	ldrh	r3, [r3, #2]
 800a912:	b29b      	uxth	r3, r3
 800a914:	429a      	cmp	r2, r3
 800a916:	d10c      	bne.n	800a932 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	4b17      	ldr	r3, [pc, #92]	@ (800a97c <tcp_input+0x4a0>)
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	429a      	cmp	r2, r3
 800a922:	d00f      	beq.n	800a944 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00d      	beq.n	800a946 <tcp_input+0x46a>
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d009      	beq.n	800a946 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1d1      	bne.n	800a8e6 <tcp_input+0x40a>
 800a942:	e000      	b.n	800a946 <tcp_input+0x46a>
            break;
 800a944:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d029      	beq.n	800a9a0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a95a:	4b10      	ldr	r3, [pc, #64]	@ (800a99c <tcp_input+0x4c0>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a962:	4a0e      	ldr	r2, [pc, #56]	@ (800a99c <tcp_input+0x4c0>)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a968:	6978      	ldr	r0, [r7, #20]
 800a96a:	f000 fa03 	bl	800ad74 <tcp_listen_input>
      }
      pbuf_free(p);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7fd ff7a 	bl	8008868 <pbuf_free>
      return;
 800a974:	e1a8      	b.n	800acc8 <tcp_input+0x7ec>
 800a976:	bf00      	nop
 800a978:	20007d9c 	.word	0x20007d9c
 800a97c:	20004e4c 	.word	0x20004e4c
 800a980:	08011b04 	.word	0x08011b04
 800a984:	08011c68 	.word	0x08011c68
 800a988:	08011b88 	.word	0x08011b88
 800a98c:	20007d80 	.word	0x20007d80
 800a990:	08011c94 	.word	0x08011c94
 800a994:	20007d84 	.word	0x20007d84
 800a998:	08011cc0 	.word	0x08011cc0
 800a99c:	20007d7c 	.word	0x20007d7c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f000 8158 	beq.w	800ac58 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a9a8:	4b95      	ldr	r3, [pc, #596]	@ (800ac00 <tcp_input+0x724>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	891a      	ldrh	r2, [r3, #8]
 800a9b2:	4b93      	ldr	r3, [pc, #588]	@ (800ac00 <tcp_input+0x724>)
 800a9b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a9b6:	4a92      	ldr	r2, [pc, #584]	@ (800ac00 <tcp_input+0x724>)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a9bc:	4b91      	ldr	r3, [pc, #580]	@ (800ac04 <tcp_input+0x728>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a8f      	ldr	r2, [pc, #572]	@ (800ac00 <tcp_input+0x724>)
 800a9c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a9c4:	4b90      	ldr	r3, [pc, #576]	@ (800ac08 <tcp_input+0x72c>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a9ca:	4b90      	ldr	r3, [pc, #576]	@ (800ac0c <tcp_input+0x730>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a9d0:	4b8f      	ldr	r3, [pc, #572]	@ (800ac10 <tcp_input+0x734>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a9d6:	4b8f      	ldr	r3, [pc, #572]	@ (800ac14 <tcp_input+0x738>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	f003 0308 	and.w	r3, r3, #8
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	7b5b      	ldrb	r3, [r3, #13]
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d017      	beq.n	800aa28 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a9f8:	69f8      	ldr	r0, [r7, #28]
 800a9fa:	f7ff f929 	bl	8009c50 <tcp_process_refused_data>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f113 0f0d 	cmn.w	r3, #13
 800aa04:	d007      	beq.n	800aa16 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00c      	beq.n	800aa28 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa0e:	4b82      	ldr	r3, [pc, #520]	@ (800ac18 <tcp_input+0x73c>)
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d008      	beq.n	800aa28 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f040 80e3 	bne.w	800abe6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aa20:	69f8      	ldr	r0, [r7, #28]
 800aa22:	f003 f9a7 	bl	800dd74 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aa26:	e0de      	b.n	800abe6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800aa28:	4a7c      	ldr	r2, [pc, #496]	@ (800ac1c <tcp_input+0x740>)
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aa2e:	69f8      	ldr	r0, [r7, #28]
 800aa30:	f000 fb18 	bl	800b064 <tcp_process>
 800aa34:	4603      	mov	r3, r0
 800aa36:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aa38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa3c:	f113 0f0d 	cmn.w	r3, #13
 800aa40:	f000 80d3 	beq.w	800abea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800aa44:	4b71      	ldr	r3, [pc, #452]	@ (800ac0c <tcp_input+0x730>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	f003 0308 	and.w	r3, r3, #8
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d015      	beq.n	800aa7c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d008      	beq.n	800aa6c <tcp_input+0x590>
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	6912      	ldr	r2, [r2, #16]
 800aa64:	f06f 010d 	mvn.w	r1, #13
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aa6c:	69f9      	ldr	r1, [r7, #28]
 800aa6e:	486c      	ldr	r0, [pc, #432]	@ (800ac20 <tcp_input+0x744>)
 800aa70:	f7ff fbbc 	bl	800a1ec <tcp_pcb_remove>
        tcp_free(pcb);
 800aa74:	69f8      	ldr	r0, [r7, #28]
 800aa76:	f7fe f9a7 	bl	8008dc8 <tcp_free>
 800aa7a:	e0da      	b.n	800ac32 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800aa80:	4b63      	ldr	r3, [pc, #396]	@ (800ac10 <tcp_input+0x734>)
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d01d      	beq.n	800aac4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800aa88:	4b61      	ldr	r3, [pc, #388]	@ (800ac10 <tcp_input+0x734>)
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00a      	beq.n	800aaae <tcp_input+0x5d2>
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa9e:	69fa      	ldr	r2, [r7, #28]
 800aaa0:	6910      	ldr	r0, [r2, #16]
 800aaa2:	89fa      	ldrh	r2, [r7, #14]
 800aaa4:	69f9      	ldr	r1, [r7, #28]
 800aaa6:	4798      	blx	r3
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	74fb      	strb	r3, [r7, #19]
 800aaac:	e001      	b.n	800aab2 <tcp_input+0x5d6>
 800aaae:	2300      	movs	r3, #0
 800aab0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aab6:	f113 0f0d 	cmn.w	r3, #13
 800aaba:	f000 8098 	beq.w	800abee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800aabe:	4b54      	ldr	r3, [pc, #336]	@ (800ac10 <tcp_input+0x734>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800aac4:	69f8      	ldr	r0, [r7, #28]
 800aac6:	f000 f915 	bl	800acf4 <tcp_input_delayed_close>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f040 8090 	bne.w	800abf2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800aad2:	4b4d      	ldr	r3, [pc, #308]	@ (800ac08 <tcp_input+0x72c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d041      	beq.n	800ab5e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d006      	beq.n	800aaf0 <tcp_input+0x614>
 800aae2:	4b50      	ldr	r3, [pc, #320]	@ (800ac24 <tcp_input+0x748>)
 800aae4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800aae8:	494f      	ldr	r1, [pc, #316]	@ (800ac28 <tcp_input+0x74c>)
 800aaea:	4850      	ldr	r0, [pc, #320]	@ (800ac2c <tcp_input+0x750>)
 800aaec:	f004 f98a 	bl	800ee04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	8b5b      	ldrh	r3, [r3, #26]
 800aaf4:	f003 0310 	and.w	r3, r3, #16
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d008      	beq.n	800ab0e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aafc:	4b42      	ldr	r3, [pc, #264]	@ (800ac08 <tcp_input+0x72c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd feb1 	bl	8008868 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ab06:	69f8      	ldr	r0, [r7, #28]
 800ab08:	f7fe fc46 	bl	8009398 <tcp_abort>
            goto aborted;
 800ab0c:	e091      	b.n	800ac32 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00c      	beq.n	800ab32 <tcp_input+0x656>
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	6918      	ldr	r0, [r3, #16]
 800ab22:	4b39      	ldr	r3, [pc, #228]	@ (800ac08 <tcp_input+0x72c>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	2300      	movs	r3, #0
 800ab28:	69f9      	ldr	r1, [r7, #28]
 800ab2a:	47a0      	blx	r4
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	74fb      	strb	r3, [r7, #19]
 800ab30:	e008      	b.n	800ab44 <tcp_input+0x668>
 800ab32:	4b35      	ldr	r3, [pc, #212]	@ (800ac08 <tcp_input+0x72c>)
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	2300      	movs	r3, #0
 800ab38:	69f9      	ldr	r1, [r7, #28]
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	f7ff f95e 	bl	8009dfc <tcp_recv_null>
 800ab40:	4603      	mov	r3, r0
 800ab42:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ab44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab48:	f113 0f0d 	cmn.w	r3, #13
 800ab4c:	d053      	beq.n	800abf6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ab4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ab56:	4b2c      	ldr	r3, [pc, #176]	@ (800ac08 <tcp_input+0x72c>)
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ab5e:	4b2b      	ldr	r3, [pc, #172]	@ (800ac0c <tcp_input+0x730>)
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d030      	beq.n	800abcc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d009      	beq.n	800ab86 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab76:	7b5a      	ldrb	r2, [r3, #13]
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab7c:	f042 0220 	orr.w	r2, r2, #32
 800ab80:	b2d2      	uxtb	r2, r2
 800ab82:	735a      	strb	r2, [r3, #13]
 800ab84:	e022      	b.n	800abcc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab8a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ab8e:	d005      	beq.n	800ab9c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab94:	3301      	adds	r3, #1
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <tcp_input+0x6e2>
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	6918      	ldr	r0, [r3, #16]
 800abb0:	2300      	movs	r3, #0
 800abb2:	2200      	movs	r2, #0
 800abb4:	69f9      	ldr	r1, [r7, #28]
 800abb6:	47a0      	blx	r4
 800abb8:	4603      	mov	r3, r0
 800abba:	74fb      	strb	r3, [r7, #19]
 800abbc:	e001      	b.n	800abc2 <tcp_input+0x6e6>
 800abbe:	2300      	movs	r3, #0
 800abc0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abc6:	f113 0f0d 	cmn.w	r3, #13
 800abca:	d016      	beq.n	800abfa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800abcc:	4b13      	ldr	r3, [pc, #76]	@ (800ac1c <tcp_input+0x740>)
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800abd2:	69f8      	ldr	r0, [r7, #28]
 800abd4:	f000 f88e 	bl	800acf4 <tcp_input_delayed_close>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d128      	bne.n	800ac30 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800abde:	69f8      	ldr	r0, [r7, #28]
 800abe0:	f002 fac2 	bl	800d168 <tcp_output>
 800abe4:	e025      	b.n	800ac32 <tcp_input+0x756>
        goto aborted;
 800abe6:	bf00      	nop
 800abe8:	e023      	b.n	800ac32 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800abea:	bf00      	nop
 800abec:	e021      	b.n	800ac32 <tcp_input+0x756>
              goto aborted;
 800abee:	bf00      	nop
 800abf0:	e01f      	b.n	800ac32 <tcp_input+0x756>
          goto aborted;
 800abf2:	bf00      	nop
 800abf4:	e01d      	b.n	800ac32 <tcp_input+0x756>
            goto aborted;
 800abf6:	bf00      	nop
 800abf8:	e01b      	b.n	800ac32 <tcp_input+0x756>
              goto aborted;
 800abfa:	bf00      	nop
 800abfc:	e019      	b.n	800ac32 <tcp_input+0x756>
 800abfe:	bf00      	nop
 800ac00:	20007d8c 	.word	0x20007d8c
 800ac04:	20007d9c 	.word	0x20007d9c
 800ac08:	20007dbc 	.word	0x20007dbc
 800ac0c:	20007db9 	.word	0x20007db9
 800ac10:	20007db4 	.word	0x20007db4
 800ac14:	20007db8 	.word	0x20007db8
 800ac18:	20007db6 	.word	0x20007db6
 800ac1c:	20007dc0 	.word	0x20007dc0
 800ac20:	20007d80 	.word	0x20007d80
 800ac24:	08011b04 	.word	0x08011b04
 800ac28:	08011cf0 	.word	0x08011cf0
 800ac2c:	08011b88 	.word	0x08011b88
          goto aborted;
 800ac30:	bf00      	nop
    tcp_input_pcb = NULL;
 800ac32:	4b27      	ldr	r3, [pc, #156]	@ (800acd0 <tcp_input+0x7f4>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ac38:	4b26      	ldr	r3, [pc, #152]	@ (800acd4 <tcp_input+0x7f8>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ac3e:	4b26      	ldr	r3, [pc, #152]	@ (800acd8 <tcp_input+0x7fc>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d03f      	beq.n	800acc6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ac46:	4b24      	ldr	r3, [pc, #144]	@ (800acd8 <tcp_input+0x7fc>)
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fd fe0c 	bl	8008868 <pbuf_free>
      inseg.p = NULL;
 800ac50:	4b21      	ldr	r3, [pc, #132]	@ (800acd8 <tcp_input+0x7fc>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ac56:	e036      	b.n	800acc6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ac58:	4b20      	ldr	r3, [pc, #128]	@ (800acdc <tcp_input+0x800>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	899b      	ldrh	r3, [r3, #12]
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7f9 ffdf 	bl	8004c24 <lwip_htons>
 800ac66:	4603      	mov	r3, r0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d118      	bne.n	800aca4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac72:	4b1b      	ldr	r3, [pc, #108]	@ (800ace0 <tcp_input+0x804>)
 800ac74:	6819      	ldr	r1, [r3, #0]
 800ac76:	4b1b      	ldr	r3, [pc, #108]	@ (800ace4 <tcp_input+0x808>)
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ace8 <tcp_input+0x80c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac82:	4b16      	ldr	r3, [pc, #88]	@ (800acdc <tcp_input+0x800>)
 800ac84:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac86:	885b      	ldrh	r3, [r3, #2]
 800ac88:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac8a:	4a14      	ldr	r2, [pc, #80]	@ (800acdc <tcp_input+0x800>)
 800ac8c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac8e:	8812      	ldrh	r2, [r2, #0]
 800ac90:	b292      	uxth	r2, r2
 800ac92:	9202      	str	r2, [sp, #8]
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	4b15      	ldr	r3, [pc, #84]	@ (800acec <tcp_input+0x810>)
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	4b15      	ldr	r3, [pc, #84]	@ (800acf0 <tcp_input+0x814>)
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	2000      	movs	r0, #0
 800aca0:	f003 f816 	bl	800dcd0 <tcp_rst>
    pbuf_free(p);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7fd fddf 	bl	8008868 <pbuf_free>
  return;
 800acaa:	e00c      	b.n	800acc6 <tcp_input+0x7ea>
    goto dropped;
 800acac:	bf00      	nop
 800acae:	e006      	b.n	800acbe <tcp_input+0x7e2>
    goto dropped;
 800acb0:	bf00      	nop
 800acb2:	e004      	b.n	800acbe <tcp_input+0x7e2>
    goto dropped;
 800acb4:	bf00      	nop
 800acb6:	e002      	b.n	800acbe <tcp_input+0x7e2>
      goto dropped;
 800acb8:	bf00      	nop
 800acba:	e000      	b.n	800acbe <tcp_input+0x7e2>
      goto dropped;
 800acbc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fd fdd2 	bl	8008868 <pbuf_free>
 800acc4:	e000      	b.n	800acc8 <tcp_input+0x7ec>
  return;
 800acc6:	bf00      	nop
}
 800acc8:	3724      	adds	r7, #36	@ 0x24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd90      	pop	{r4, r7, pc}
 800acce:	bf00      	nop
 800acd0:	20007dc0 	.word	0x20007dc0
 800acd4:	20007dbc 	.word	0x20007dbc
 800acd8:	20007d8c 	.word	0x20007d8c
 800acdc:	20007d9c 	.word	0x20007d9c
 800ace0:	20007db0 	.word	0x20007db0
 800ace4:	20007db6 	.word	0x20007db6
 800ace8:	20007dac 	.word	0x20007dac
 800acec:	20004e5c 	.word	0x20004e5c
 800acf0:	20004e60 	.word	0x20004e60

0800acf4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <tcp_input_delayed_close+0x1c>
 800ad02:	4b17      	ldr	r3, [pc, #92]	@ (800ad60 <tcp_input_delayed_close+0x6c>)
 800ad04:	f240 225a 	movw	r2, #602	@ 0x25a
 800ad08:	4916      	ldr	r1, [pc, #88]	@ (800ad64 <tcp_input_delayed_close+0x70>)
 800ad0a:	4817      	ldr	r0, [pc, #92]	@ (800ad68 <tcp_input_delayed_close+0x74>)
 800ad0c:	f004 f87a 	bl	800ee04 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ad10:	4b16      	ldr	r3, [pc, #88]	@ (800ad6c <tcp_input_delayed_close+0x78>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	f003 0310 	and.w	r3, r3, #16
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01c      	beq.n	800ad56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	8b5b      	ldrh	r3, [r3, #26]
 800ad20:	f003 0310 	and.w	r3, r3, #16
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10d      	bne.n	800ad44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d008      	beq.n	800ad44 <tcp_input_delayed_close+0x50>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	6912      	ldr	r2, [r2, #16]
 800ad3c:	f06f 010e 	mvn.w	r1, #14
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	480a      	ldr	r0, [pc, #40]	@ (800ad70 <tcp_input_delayed_close+0x7c>)
 800ad48:	f7ff fa50 	bl	800a1ec <tcp_pcb_remove>
    tcp_free(pcb);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7fe f83b 	bl	8008dc8 <tcp_free>
    return 1;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	08011b04 	.word	0x08011b04
 800ad64:	08011d0c 	.word	0x08011d0c
 800ad68:	08011b88 	.word	0x08011b88
 800ad6c:	20007db9 	.word	0x20007db9
 800ad70:	20007d80 	.word	0x20007d80

0800ad74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ad74:	b590      	push	{r4, r7, lr}
 800ad76:	b08b      	sub	sp, #44	@ 0x2c
 800ad78:	af04      	add	r7, sp, #16
 800ad7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ad7c:	4b6f      	ldr	r3, [pc, #444]	@ (800af3c <tcp_listen_input+0x1c8>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f040 80d2 	bne.w	800af2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d106      	bne.n	800ad9e <tcp_listen_input+0x2a>
 800ad90:	4b6b      	ldr	r3, [pc, #428]	@ (800af40 <tcp_listen_input+0x1cc>)
 800ad92:	f240 2281 	movw	r2, #641	@ 0x281
 800ad96:	496b      	ldr	r1, [pc, #428]	@ (800af44 <tcp_listen_input+0x1d0>)
 800ad98:	486b      	ldr	r0, [pc, #428]	@ (800af48 <tcp_listen_input+0x1d4>)
 800ad9a:	f004 f833 	bl	800ee04 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ad9e:	4b67      	ldr	r3, [pc, #412]	@ (800af3c <tcp_listen_input+0x1c8>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	f003 0310 	and.w	r3, r3, #16
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d019      	beq.n	800adde <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adaa:	4b68      	ldr	r3, [pc, #416]	@ (800af4c <tcp_listen_input+0x1d8>)
 800adac:	6819      	ldr	r1, [r3, #0]
 800adae:	4b68      	ldr	r3, [pc, #416]	@ (800af50 <tcp_listen_input+0x1dc>)
 800adb0:	881b      	ldrh	r3, [r3, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	4b67      	ldr	r3, [pc, #412]	@ (800af54 <tcp_listen_input+0x1e0>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adba:	4b67      	ldr	r3, [pc, #412]	@ (800af58 <tcp_listen_input+0x1e4>)
 800adbc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adbe:	885b      	ldrh	r3, [r3, #2]
 800adc0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adc2:	4a65      	ldr	r2, [pc, #404]	@ (800af58 <tcp_listen_input+0x1e4>)
 800adc4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adc6:	8812      	ldrh	r2, [r2, #0]
 800adc8:	b292      	uxth	r2, r2
 800adca:	9202      	str	r2, [sp, #8]
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	4b63      	ldr	r3, [pc, #396]	@ (800af5c <tcp_listen_input+0x1e8>)
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	4b63      	ldr	r3, [pc, #396]	@ (800af60 <tcp_listen_input+0x1ec>)
 800add4:	4602      	mov	r2, r0
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f002 ff7a 	bl	800dcd0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800addc:	e0a9      	b.n	800af32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800adde:	4b57      	ldr	r3, [pc, #348]	@ (800af3c <tcp_listen_input+0x1c8>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 80a3 	beq.w	800af32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	7d5b      	ldrb	r3, [r3, #21]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff f927 	bl	800a044 <tcp_alloc>
 800adf6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d111      	bne.n	800ae22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <tcp_listen_input+0xa8>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	6910      	ldr	r0, [r2, #16]
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	2100      	movs	r1, #0
 800ae14:	4798      	blx	r3
 800ae16:	4603      	mov	r3, r0
 800ae18:	73bb      	strb	r3, [r7, #14]
      return;
 800ae1a:	e08b      	b.n	800af34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae1c:	23f0      	movs	r3, #240	@ 0xf0
 800ae1e:	73bb      	strb	r3, [r7, #14]
      return;
 800ae20:	e088      	b.n	800af34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ae22:	4b50      	ldr	r3, [pc, #320]	@ (800af64 <tcp_listen_input+0x1f0>)
 800ae24:	695a      	ldr	r2, [r3, #20]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ae2a:	4b4e      	ldr	r3, [pc, #312]	@ (800af64 <tcp_listen_input+0x1f0>)
 800ae2c:	691a      	ldr	r2, [r3, #16]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	8ada      	ldrh	r2, [r3, #22]
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ae3a:	4b47      	ldr	r3, [pc, #284]	@ (800af58 <tcp_listen_input+0x1e4>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2203      	movs	r2, #3
 800ae4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ae4c:	4b41      	ldr	r3, [pc, #260]	@ (800af54 <tcp_listen_input+0x1e0>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f7ff fa58 	bl	800a314 <tcp_next_iss>
 800ae64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ae7e:	4b35      	ldr	r3, [pc, #212]	@ (800af54 <tcp_listen_input+0x1e0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	1e5a      	subs	r2, r3, #1
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	691a      	ldr	r2, [r3, #16]
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7a5b      	ldrb	r3, [r3, #9]
 800ae9a:	f003 030c 	and.w	r3, r3, #12
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7a1a      	ldrb	r2, [r3, #8]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aeac:	4b2e      	ldr	r3, [pc, #184]	@ (800af68 <tcp_listen_input+0x1f4>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	60da      	str	r2, [r3, #12]
 800aeb4:	4a2c      	ldr	r2, [pc, #176]	@ (800af68 <tcp_listen_input+0x1f4>)
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	f003 f8cb 	bl	800e054 <tcp_timer_needed>
 800aebe:	4b2b      	ldr	r3, [pc, #172]	@ (800af6c <tcp_listen_input+0x1f8>)
 800aec0:	2201      	movs	r2, #1
 800aec2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aec4:	6978      	ldr	r0, [r7, #20]
 800aec6:	f001 fd8b 	bl	800c9e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aeca:	4b23      	ldr	r3, [pc, #140]	@ (800af58 <tcp_listen_input+0x1e4>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	89db      	ldrh	r3, [r3, #14]
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fb f88f 	bl	8006010 <ip4_route>
 800aef2:	4601      	mov	r1, r0
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	3304      	adds	r3, #4
 800aef8:	461a      	mov	r2, r3
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff fa30 	bl	800a360 <tcp_eff_send_mss_netif>
 800af00:	4603      	mov	r3, r0
 800af02:	461a      	mov	r2, r3
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af08:	2112      	movs	r1, #18
 800af0a:	6978      	ldr	r0, [r7, #20]
 800af0c:	f002 f83e 	bl	800cf8c <tcp_enqueue_flags>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800af14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800af1c:	2100      	movs	r1, #0
 800af1e:	6978      	ldr	r0, [r7, #20]
 800af20:	f7fe f97c 	bl	800921c <tcp_abandon>
      return;
 800af24:	e006      	b.n	800af34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	f002 f91e 	bl	800d168 <tcp_output>
  return;
 800af2c:	e001      	b.n	800af32 <tcp_listen_input+0x1be>
    return;
 800af2e:	bf00      	nop
 800af30:	e000      	b.n	800af34 <tcp_listen_input+0x1c0>
  return;
 800af32:	bf00      	nop
}
 800af34:	371c      	adds	r7, #28
 800af36:	46bd      	mov	sp, r7
 800af38:	bd90      	pop	{r4, r7, pc}
 800af3a:	bf00      	nop
 800af3c:	20007db8 	.word	0x20007db8
 800af40:	08011b04 	.word	0x08011b04
 800af44:	08011d34 	.word	0x08011d34
 800af48:	08011b88 	.word	0x08011b88
 800af4c:	20007db0 	.word	0x20007db0
 800af50:	20007db6 	.word	0x20007db6
 800af54:	20007dac 	.word	0x20007dac
 800af58:	20007d9c 	.word	0x20007d9c
 800af5c:	20004e5c 	.word	0x20004e5c
 800af60:	20004e60 	.word	0x20004e60
 800af64:	20004e4c 	.word	0x20004e4c
 800af68:	20007d80 	.word	0x20007d80
 800af6c:	20007d88 	.word	0x20007d88

0800af70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af04      	add	r7, sp, #16
 800af76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800af78:	4b2f      	ldr	r3, [pc, #188]	@ (800b038 <tcp_timewait_input+0xc8>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d153      	bne.n	800b02c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d106      	bne.n	800af98 <tcp_timewait_input+0x28>
 800af8a:	4b2c      	ldr	r3, [pc, #176]	@ (800b03c <tcp_timewait_input+0xcc>)
 800af8c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800af90:	492b      	ldr	r1, [pc, #172]	@ (800b040 <tcp_timewait_input+0xd0>)
 800af92:	482c      	ldr	r0, [pc, #176]	@ (800b044 <tcp_timewait_input+0xd4>)
 800af94:	f003 ff36 	bl	800ee04 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800af98:	4b27      	ldr	r3, [pc, #156]	@ (800b038 <tcp_timewait_input+0xc8>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d02a      	beq.n	800affa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800afa4:	4b28      	ldr	r3, [pc, #160]	@ (800b048 <tcp_timewait_input+0xd8>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	db2d      	blt.n	800b00e <tcp_timewait_input+0x9e>
 800afb2:	4b25      	ldr	r3, [pc, #148]	@ (800b048 <tcp_timewait_input+0xd8>)
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800afbe:	440b      	add	r3, r1
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dc23      	bgt.n	800b00e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afc6:	4b21      	ldr	r3, [pc, #132]	@ (800b04c <tcp_timewait_input+0xdc>)
 800afc8:	6819      	ldr	r1, [r3, #0]
 800afca:	4b21      	ldr	r3, [pc, #132]	@ (800b050 <tcp_timewait_input+0xe0>)
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	4b1d      	ldr	r3, [pc, #116]	@ (800b048 <tcp_timewait_input+0xd8>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800afd6:	4b1f      	ldr	r3, [pc, #124]	@ (800b054 <tcp_timewait_input+0xe4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afda:	885b      	ldrh	r3, [r3, #2]
 800afdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800afde:	4a1d      	ldr	r2, [pc, #116]	@ (800b054 <tcp_timewait_input+0xe4>)
 800afe0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afe2:	8812      	ldrh	r2, [r2, #0]
 800afe4:	b292      	uxth	r2, r2
 800afe6:	9202      	str	r2, [sp, #8]
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	4b1b      	ldr	r3, [pc, #108]	@ (800b058 <tcp_timewait_input+0xe8>)
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	4b1b      	ldr	r3, [pc, #108]	@ (800b05c <tcp_timewait_input+0xec>)
 800aff0:	4602      	mov	r2, r0
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f002 fe6c 	bl	800dcd0 <tcp_rst>
      return;
 800aff8:	e01b      	b.n	800b032 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800affa:	4b0f      	ldr	r3, [pc, #60]	@ (800b038 <tcp_timewait_input+0xc8>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b006:	4b16      	ldr	r3, [pc, #88]	@ (800b060 <tcp_timewait_input+0xf0>)
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b00e:	4b10      	ldr	r3, [pc, #64]	@ (800b050 <tcp_timewait_input+0xe0>)
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00c      	beq.n	800b030 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	8b5b      	ldrh	r3, [r3, #26]
 800b01a:	f043 0302 	orr.w	r3, r3, #2
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f002 f89f 	bl	800d168 <tcp_output>
  }
  return;
 800b02a:	e001      	b.n	800b030 <tcp_timewait_input+0xc0>
    return;
 800b02c:	bf00      	nop
 800b02e:	e000      	b.n	800b032 <tcp_timewait_input+0xc2>
  return;
 800b030:	bf00      	nop
}
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20007db8 	.word	0x20007db8
 800b03c:	08011b04 	.word	0x08011b04
 800b040:	08011d54 	.word	0x08011d54
 800b044:	08011b88 	.word	0x08011b88
 800b048:	20007dac 	.word	0x20007dac
 800b04c:	20007db0 	.word	0x20007db0
 800b050:	20007db6 	.word	0x20007db6
 800b054:	20007d9c 	.word	0x20007d9c
 800b058:	20004e5c 	.word	0x20004e5c
 800b05c:	20004e60 	.word	0x20004e60
 800b060:	20007d74 	.word	0x20007d74

0800b064 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b064:	b590      	push	{r4, r7, lr}
 800b066:	b08d      	sub	sp, #52	@ 0x34
 800b068:	af04      	add	r7, sp, #16
 800b06a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <tcp_process+0x24>
 800b07a:	4b9d      	ldr	r3, [pc, #628]	@ (800b2f0 <tcp_process+0x28c>)
 800b07c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b080:	499c      	ldr	r1, [pc, #624]	@ (800b2f4 <tcp_process+0x290>)
 800b082:	489d      	ldr	r0, [pc, #628]	@ (800b2f8 <tcp_process+0x294>)
 800b084:	f003 febe 	bl	800ee04 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b088:	4b9c      	ldr	r3, [pc, #624]	@ (800b2fc <tcp_process+0x298>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	f003 0304 	and.w	r3, r3, #4
 800b090:	2b00      	cmp	r3, #0
 800b092:	d04e      	beq.n	800b132 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7d1b      	ldrb	r3, [r3, #20]
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d108      	bne.n	800b0ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0a0:	4b97      	ldr	r3, [pc, #604]	@ (800b300 <tcp_process+0x29c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d123      	bne.n	800b0f0 <tcp_process+0x8c>
        acceptable = 1;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	76fb      	strb	r3, [r7, #27]
 800b0ac:	e020      	b.n	800b0f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0b2:	4b94      	ldr	r3, [pc, #592]	@ (800b304 <tcp_process+0x2a0>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d102      	bne.n	800b0c0 <tcp_process+0x5c>
        acceptable = 1;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	76fb      	strb	r3, [r7, #27]
 800b0be:	e017      	b.n	800b0f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b0c0:	4b90      	ldr	r3, [pc, #576]	@ (800b304 <tcp_process+0x2a0>)
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	db10      	blt.n	800b0f0 <tcp_process+0x8c>
 800b0ce:	4b8d      	ldr	r3, [pc, #564]	@ (800b304 <tcp_process+0x2a0>)
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b0da:	440b      	add	r3, r1
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dc06      	bgt.n	800b0f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	8b5b      	ldrh	r3, [r3, #26]
 800b0e6:	f043 0302 	orr.w	r3, r3, #2
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b0f0:	7efb      	ldrb	r3, [r7, #27]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d01b      	beq.n	800b12e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	7d1b      	ldrb	r3, [r3, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <tcp_process+0xa8>
 800b0fe:	4b7c      	ldr	r3, [pc, #496]	@ (800b2f0 <tcp_process+0x28c>)
 800b100:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b104:	4980      	ldr	r1, [pc, #512]	@ (800b308 <tcp_process+0x2a4>)
 800b106:	487c      	ldr	r0, [pc, #496]	@ (800b2f8 <tcp_process+0x294>)
 800b108:	f003 fe7c 	bl	800ee04 <iprintf>
      recv_flags |= TF_RESET;
 800b10c:	4b7f      	ldr	r3, [pc, #508]	@ (800b30c <tcp_process+0x2a8>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	f043 0308 	orr.w	r3, r3, #8
 800b114:	b2da      	uxtb	r2, r3
 800b116:	4b7d      	ldr	r3, [pc, #500]	@ (800b30c <tcp_process+0x2a8>)
 800b118:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	8b5b      	ldrh	r3, [r3, #26]
 800b11e:	f023 0301 	bic.w	r3, r3, #1
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b128:	f06f 030d 	mvn.w	r3, #13
 800b12c:	e37a      	b.n	800b824 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	e378      	b.n	800b824 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b132:	4b72      	ldr	r3, [pc, #456]	@ (800b2fc <tcp_process+0x298>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d010      	beq.n	800b160 <tcp_process+0xfc>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	7d1b      	ldrb	r3, [r3, #20]
 800b142:	2b02      	cmp	r3, #2
 800b144:	d00c      	beq.n	800b160 <tcp_process+0xfc>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	7d1b      	ldrb	r3, [r3, #20]
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d008      	beq.n	800b160 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	8b5b      	ldrh	r3, [r3, #26]
 800b152:	f043 0302 	orr.w	r3, r3, #2
 800b156:	b29a      	uxth	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	e361      	b.n	800b824 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	8b5b      	ldrh	r3, [r3, #26]
 800b164:	f003 0310 	and.w	r3, r3, #16
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b16c:	4b68      	ldr	r3, [pc, #416]	@ (800b310 <tcp_process+0x2ac>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f001 fc2b 	bl	800c9e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	7d1b      	ldrb	r3, [r3, #20]
 800b18e:	3b02      	subs	r3, #2
 800b190:	2b07      	cmp	r3, #7
 800b192:	f200 8337 	bhi.w	800b804 <tcp_process+0x7a0>
 800b196:	a201      	add	r2, pc, #4	@ (adr r2, 800b19c <tcp_process+0x138>)
 800b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19c:	0800b1bd 	.word	0x0800b1bd
 800b1a0:	0800b3ed 	.word	0x0800b3ed
 800b1a4:	0800b565 	.word	0x0800b565
 800b1a8:	0800b58f 	.word	0x0800b58f
 800b1ac:	0800b6b3 	.word	0x0800b6b3
 800b1b0:	0800b565 	.word	0x0800b565
 800b1b4:	0800b73f 	.word	0x0800b73f
 800b1b8:	0800b7cf 	.word	0x0800b7cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b1bc:	4b4f      	ldr	r3, [pc, #316]	@ (800b2fc <tcp_process+0x298>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 80e4 	beq.w	800b392 <tcp_process+0x32e>
 800b1ca:	4b4c      	ldr	r3, [pc, #304]	@ (800b2fc <tcp_process+0x298>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	f003 0302 	and.w	r3, r3, #2
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 80dd 	beq.w	800b392 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	4b48      	ldr	r3, [pc, #288]	@ (800b300 <tcp_process+0x29c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	f040 80d5 	bne.w	800b392 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b1e8:	4b46      	ldr	r3, [pc, #280]	@ (800b304 <tcp_process+0x2a0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b1fa:	4b41      	ldr	r3, [pc, #260]	@ (800b300 <tcp_process+0x29c>)
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b202:	4b44      	ldr	r3, [pc, #272]	@ (800b314 <tcp_process+0x2b0>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	89db      	ldrh	r3, [r3, #14]
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b21c:	4b39      	ldr	r3, [pc, #228]	@ (800b304 <tcp_process+0x2a0>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	1e5a      	subs	r2, r3, #1
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2204      	movs	r2, #4
 800b22a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f7fa feeb 	bl	8006010 <ip4_route>
 800b23a:	4601      	mov	r1, r0
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3304      	adds	r3, #4
 800b240:	461a      	mov	r2, r3
 800b242:	4620      	mov	r0, r4
 800b244:	f7ff f88c 	bl	800a360 <tcp_eff_send_mss_netif>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b254:	009a      	lsls	r2, r3, #2
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b260:	428b      	cmp	r3, r1
 800b262:	bf38      	it	cc
 800b264:	460b      	movcc	r3, r1
 800b266:	429a      	cmp	r2, r3
 800b268:	d204      	bcs.n	800b274 <tcp_process+0x210>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	b29b      	uxth	r3, r3
 800b272:	e00d      	b.n	800b290 <tcp_process+0x22c>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b27e:	4293      	cmp	r3, r2
 800b280:	d904      	bls.n	800b28c <tcp_process+0x228>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	b29b      	uxth	r3, r3
 800b28a:	e001      	b.n	800b290 <tcp_process+0x22c>
 800b28c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <tcp_process+0x24a>
 800b2a0:	4b13      	ldr	r3, [pc, #76]	@ (800b2f0 <tcp_process+0x28c>)
 800b2a2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b2a6:	491c      	ldr	r1, [pc, #112]	@ (800b318 <tcp_process+0x2b4>)
 800b2a8:	4813      	ldr	r0, [pc, #76]	@ (800b2f8 <tcp_process+0x294>)
 800b2aa:	f003 fdab 	bl	800ee04 <iprintf>
        --pcb->snd_queuelen;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d12a      	bne.n	800b320 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <tcp_process+0x280>
 800b2d6:	4b06      	ldr	r3, [pc, #24]	@ (800b2f0 <tcp_process+0x28c>)
 800b2d8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b2dc:	490f      	ldr	r1, [pc, #60]	@ (800b31c <tcp_process+0x2b8>)
 800b2de:	4806      	ldr	r0, [pc, #24]	@ (800b2f8 <tcp_process+0x294>)
 800b2e0:	f003 fd90 	bl	800ee04 <iprintf>
          pcb->unsent = rseg->next;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b2ec:	e01c      	b.n	800b328 <tcp_process+0x2c4>
 800b2ee:	bf00      	nop
 800b2f0:	08011b04 	.word	0x08011b04
 800b2f4:	08011d74 	.word	0x08011d74
 800b2f8:	08011b88 	.word	0x08011b88
 800b2fc:	20007db8 	.word	0x20007db8
 800b300:	20007db0 	.word	0x20007db0
 800b304:	20007dac 	.word	0x20007dac
 800b308:	08011d90 	.word	0x08011d90
 800b30c:	20007db9 	.word	0x20007db9
 800b310:	20007d74 	.word	0x20007d74
 800b314:	20007d9c 	.word	0x20007d9c
 800b318:	08011db0 	.word	0x08011db0
 800b31c:	08011dc8 	.word	0x08011dc8
        } else {
          pcb->unacked = rseg->next;
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b328:	69f8      	ldr	r0, [r7, #28]
 800b32a:	f7fe fd22 	bl	8009d72 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b332:	2b00      	cmp	r3, #0
 800b334:	d104      	bne.n	800b340 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b33c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b33e:	e006      	b.n	800b34e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <tcp_process+0x30a>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	6910      	ldr	r0, [r2, #16]
 800b362:	2200      	movs	r2, #0
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4798      	blx	r3
 800b368:	4603      	mov	r3, r0
 800b36a:	76bb      	strb	r3, [r7, #26]
 800b36c:	e001      	b.n	800b372 <tcp_process+0x30e>
 800b36e:	2300      	movs	r3, #0
 800b370:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b372:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b376:	f113 0f0d 	cmn.w	r3, #13
 800b37a:	d102      	bne.n	800b382 <tcp_process+0x31e>
          return ERR_ABRT;
 800b37c:	f06f 030c 	mvn.w	r3, #12
 800b380:	e250      	b.n	800b824 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	8b5b      	ldrh	r3, [r3, #26]
 800b386:	f043 0302 	orr.w	r3, r3, #2
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b390:	e23a      	b.n	800b808 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b392:	4b98      	ldr	r3, [pc, #608]	@ (800b5f4 <tcp_process+0x590>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	f003 0310 	and.w	r3, r3, #16
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 8234 	beq.w	800b808 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3a0:	4b95      	ldr	r3, [pc, #596]	@ (800b5f8 <tcp_process+0x594>)
 800b3a2:	6819      	ldr	r1, [r3, #0]
 800b3a4:	4b95      	ldr	r3, [pc, #596]	@ (800b5fc <tcp_process+0x598>)
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	4b95      	ldr	r3, [pc, #596]	@ (800b600 <tcp_process+0x59c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3b0:	4b94      	ldr	r3, [pc, #592]	@ (800b604 <tcp_process+0x5a0>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3b4:	885b      	ldrh	r3, [r3, #2]
 800b3b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3b8:	4a92      	ldr	r2, [pc, #584]	@ (800b604 <tcp_process+0x5a0>)
 800b3ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3bc:	8812      	ldrh	r2, [r2, #0]
 800b3be:	b292      	uxth	r2, r2
 800b3c0:	9202      	str	r2, [sp, #8]
 800b3c2:	9301      	str	r3, [sp, #4]
 800b3c4:	4b90      	ldr	r3, [pc, #576]	@ (800b608 <tcp_process+0x5a4>)
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	4b90      	ldr	r3, [pc, #576]	@ (800b60c <tcp_process+0x5a8>)
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f002 fc7f 	bl	800dcd0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b3d8:	2b05      	cmp	r3, #5
 800b3da:	f200 8215 	bhi.w	800b808 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f002 fa4b 	bl	800d880 <tcp_rexmit_rto>
      break;
 800b3ea:	e20d      	b.n	800b808 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b3ec:	4b81      	ldr	r3, [pc, #516]	@ (800b5f4 <tcp_process+0x590>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 80a1 	beq.w	800b53c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b3fa:	4b7f      	ldr	r3, [pc, #508]	@ (800b5f8 <tcp_process+0x594>)
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	3b01      	subs	r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	db7e      	blt.n	800b508 <tcp_process+0x4a4>
 800b40a:	4b7b      	ldr	r3, [pc, #492]	@ (800b5f8 <tcp_process+0x594>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	dc77      	bgt.n	800b508 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2204      	movs	r2, #4
 800b41c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b426:	23fa      	movs	r3, #250	@ 0xfa
 800b428:	76bb      	strb	r3, [r7, #26]
 800b42a:	e01d      	b.n	800b468 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d106      	bne.n	800b444 <tcp_process+0x3e0>
 800b436:	4b76      	ldr	r3, [pc, #472]	@ (800b610 <tcp_process+0x5ac>)
 800b438:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b43c:	4975      	ldr	r1, [pc, #468]	@ (800b614 <tcp_process+0x5b0>)
 800b43e:	4876      	ldr	r0, [pc, #472]	@ (800b618 <tcp_process+0x5b4>)
 800b440:	f003 fce0 	bl	800ee04 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00a      	beq.n	800b464 <tcp_process+0x400>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	6910      	ldr	r0, [r2, #16]
 800b458:	2200      	movs	r2, #0
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	4798      	blx	r3
 800b45e:	4603      	mov	r3, r0
 800b460:	76bb      	strb	r3, [r7, #26]
 800b462:	e001      	b.n	800b468 <tcp_process+0x404>
 800b464:	23f0      	movs	r3, #240	@ 0xf0
 800b466:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b468:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00a      	beq.n	800b486 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b470:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b474:	f113 0f0d 	cmn.w	r3, #13
 800b478:	d002      	beq.n	800b480 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7fd ff8c 	bl	8009398 <tcp_abort>
            }
            return ERR_ABRT;
 800b480:	f06f 030c 	mvn.w	r3, #12
 800b484:	e1ce      	b.n	800b824 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fae0 	bl	800ba4c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b48c:	4b63      	ldr	r3, [pc, #396]	@ (800b61c <tcp_process+0x5b8>)
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d005      	beq.n	800b4a0 <tcp_process+0x43c>
            recv_acked--;
 800b494:	4b61      	ldr	r3, [pc, #388]	@ (800b61c <tcp_process+0x5b8>)
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	3b01      	subs	r3, #1
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	4b5f      	ldr	r3, [pc, #380]	@ (800b61c <tcp_process+0x5b8>)
 800b49e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b4a4:	009a      	lsls	r2, r3, #2
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b4aa:	005b      	lsls	r3, r3, #1
 800b4ac:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	bf38      	it	cc
 800b4b4:	460b      	movcc	r3, r1
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d204      	bcs.n	800b4c4 <tcp_process+0x460>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	e00d      	b.n	800b4e0 <tcp_process+0x47c>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d904      	bls.n	800b4dc <tcp_process+0x478>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	e001      	b.n	800b4e0 <tcp_process+0x47c>
 800b4dc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b4e6:	4b4e      	ldr	r3, [pc, #312]	@ (800b620 <tcp_process+0x5bc>)
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	f003 0320 	and.w	r3, r3, #32
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d037      	beq.n	800b562 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	8b5b      	ldrh	r3, [r3, #26]
 800b4f6:	f043 0302 	orr.w	r3, r3, #2
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2207      	movs	r2, #7
 800b504:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b506:	e02c      	b.n	800b562 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b508:	4b3b      	ldr	r3, [pc, #236]	@ (800b5f8 <tcp_process+0x594>)
 800b50a:	6819      	ldr	r1, [r3, #0]
 800b50c:	4b3b      	ldr	r3, [pc, #236]	@ (800b5fc <tcp_process+0x598>)
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	4b3b      	ldr	r3, [pc, #236]	@ (800b600 <tcp_process+0x59c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b518:	4b3a      	ldr	r3, [pc, #232]	@ (800b604 <tcp_process+0x5a0>)
 800b51a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b51c:	885b      	ldrh	r3, [r3, #2]
 800b51e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b520:	4a38      	ldr	r2, [pc, #224]	@ (800b604 <tcp_process+0x5a0>)
 800b522:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b524:	8812      	ldrh	r2, [r2, #0]
 800b526:	b292      	uxth	r2, r2
 800b528:	9202      	str	r2, [sp, #8]
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	4b36      	ldr	r3, [pc, #216]	@ (800b608 <tcp_process+0x5a4>)
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	4b36      	ldr	r3, [pc, #216]	@ (800b60c <tcp_process+0x5a8>)
 800b532:	4602      	mov	r2, r0
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f002 fbcb 	bl	800dcd0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b53a:	e167      	b.n	800b80c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b53c:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f4 <tcp_process+0x590>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f003 0302 	and.w	r3, r3, #2
 800b544:	2b00      	cmp	r3, #0
 800b546:	f000 8161 	beq.w	800b80c <tcp_process+0x7a8>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54e:	1e5a      	subs	r2, r3, #1
 800b550:	4b2b      	ldr	r3, [pc, #172]	@ (800b600 <tcp_process+0x59c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	f040 8159 	bne.w	800b80c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f002 f9b2 	bl	800d8c4 <tcp_rexmit>
      break;
 800b560:	e154      	b.n	800b80c <tcp_process+0x7a8>
 800b562:	e153      	b.n	800b80c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fa71 	bl	800ba4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b56a:	4b2d      	ldr	r3, [pc, #180]	@ (800b620 <tcp_process+0x5bc>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	f003 0320 	and.w	r3, r3, #32
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 814c 	beq.w	800b810 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8b5b      	ldrh	r3, [r3, #26]
 800b57c:	f043 0302 	orr.w	r3, r3, #2
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2207      	movs	r2, #7
 800b58a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b58c:	e140      	b.n	800b810 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fa5c 	bl	800ba4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b594:	4b22      	ldr	r3, [pc, #136]	@ (800b620 <tcp_process+0x5bc>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d071      	beq.n	800b684 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5a0:	4b14      	ldr	r3, [pc, #80]	@ (800b5f4 <tcp_process+0x590>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f003 0310 	and.w	r3, r3, #16
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d060      	beq.n	800b66e <tcp_process+0x60a>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5b0:	4b11      	ldr	r3, [pc, #68]	@ (800b5f8 <tcp_process+0x594>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d15a      	bne.n	800b66e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d156      	bne.n	800b66e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8b5b      	ldrh	r3, [r3, #26]
 800b5c4:	f043 0302 	orr.w	r3, r3, #2
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7fe fdbc 	bl	800a14c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b5d4:	4b13      	ldr	r3, [pc, #76]	@ (800b624 <tcp_process+0x5c0>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d105      	bne.n	800b5ea <tcp_process+0x586>
 800b5de:	4b11      	ldr	r3, [pc, #68]	@ (800b624 <tcp_process+0x5c0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	4a0f      	ldr	r2, [pc, #60]	@ (800b624 <tcp_process+0x5c0>)
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	e02e      	b.n	800b648 <tcp_process+0x5e4>
 800b5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b624 <tcp_process+0x5c0>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	e027      	b.n	800b642 <tcp_process+0x5de>
 800b5f2:	bf00      	nop
 800b5f4:	20007db8 	.word	0x20007db8
 800b5f8:	20007db0 	.word	0x20007db0
 800b5fc:	20007db6 	.word	0x20007db6
 800b600:	20007dac 	.word	0x20007dac
 800b604:	20007d9c 	.word	0x20007d9c
 800b608:	20004e5c 	.word	0x20004e5c
 800b60c:	20004e60 	.word	0x20004e60
 800b610:	08011b04 	.word	0x08011b04
 800b614:	08011ddc 	.word	0x08011ddc
 800b618:	08011b88 	.word	0x08011b88
 800b61c:	20007db4 	.word	0x20007db4
 800b620:	20007db9 	.word	0x20007db9
 800b624:	20007d80 	.word	0x20007d80
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d104      	bne.n	800b63c <tcp_process+0x5d8>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	60da      	str	r2, [r3, #12]
 800b63a:	e005      	b.n	800b648 <tcp_process+0x5e4>
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	617b      	str	r3, [r7, #20]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1ef      	bne.n	800b628 <tcp_process+0x5c4>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	60da      	str	r2, [r3, #12]
 800b64e:	4b77      	ldr	r3, [pc, #476]	@ (800b82c <tcp_process+0x7c8>)
 800b650:	2201      	movs	r2, #1
 800b652:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	220a      	movs	r2, #10
 800b658:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b65a:	4b75      	ldr	r3, [pc, #468]	@ (800b830 <tcp_process+0x7cc>)
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	60da      	str	r2, [r3, #12]
 800b662:	4a73      	ldr	r2, [pc, #460]	@ (800b830 <tcp_process+0x7cc>)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	f002 fcf4 	bl	800e054 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b66c:	e0d2      	b.n	800b814 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	8b5b      	ldrh	r3, [r3, #26]
 800b672:	f043 0302 	orr.w	r3, r3, #2
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2208      	movs	r2, #8
 800b680:	751a      	strb	r2, [r3, #20]
      break;
 800b682:	e0c7      	b.n	800b814 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b684:	4b6b      	ldr	r3, [pc, #428]	@ (800b834 <tcp_process+0x7d0>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 0310 	and.w	r3, r3, #16
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 80c1 	beq.w	800b814 <tcp_process+0x7b0>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b696:	4b68      	ldr	r3, [pc, #416]	@ (800b838 <tcp_process+0x7d4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	f040 80ba 	bne.w	800b814 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f040 80b5 	bne.w	800b814 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2206      	movs	r2, #6
 800b6ae:	751a      	strb	r2, [r3, #20]
      break;
 800b6b0:	e0b0      	b.n	800b814 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f9ca 	bl	800ba4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6b8:	4b60      	ldr	r3, [pc, #384]	@ (800b83c <tcp_process+0x7d8>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	f003 0320 	and.w	r3, r3, #32
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 80a9 	beq.w	800b818 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ca:	f043 0302 	orr.w	r3, r3, #2
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7fe fd39 	bl	800a14c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b6da:	4b59      	ldr	r3, [pc, #356]	@ (800b840 <tcp_process+0x7dc>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d105      	bne.n	800b6f0 <tcp_process+0x68c>
 800b6e4:	4b56      	ldr	r3, [pc, #344]	@ (800b840 <tcp_process+0x7dc>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	4a55      	ldr	r2, [pc, #340]	@ (800b840 <tcp_process+0x7dc>)
 800b6ec:	6013      	str	r3, [r2, #0]
 800b6ee:	e013      	b.n	800b718 <tcp_process+0x6b4>
 800b6f0:	4b53      	ldr	r3, [pc, #332]	@ (800b840 <tcp_process+0x7dc>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	613b      	str	r3, [r7, #16]
 800b6f6:	e00c      	b.n	800b712 <tcp_process+0x6ae>
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d104      	bne.n	800b70c <tcp_process+0x6a8>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68da      	ldr	r2, [r3, #12]
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	60da      	str	r2, [r3, #12]
 800b70a:	e005      	b.n	800b718 <tcp_process+0x6b4>
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1ef      	bne.n	800b6f8 <tcp_process+0x694>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	60da      	str	r2, [r3, #12]
 800b71e:	4b43      	ldr	r3, [pc, #268]	@ (800b82c <tcp_process+0x7c8>)
 800b720:	2201      	movs	r2, #1
 800b722:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	220a      	movs	r2, #10
 800b728:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b72a:	4b41      	ldr	r3, [pc, #260]	@ (800b830 <tcp_process+0x7cc>)
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60da      	str	r2, [r3, #12]
 800b732:	4a3f      	ldr	r2, [pc, #252]	@ (800b830 <tcp_process+0x7cc>)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	f002 fc8c 	bl	800e054 <tcp_timer_needed>
      }
      break;
 800b73c:	e06c      	b.n	800b818 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f984 	bl	800ba4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b744:	4b3b      	ldr	r3, [pc, #236]	@ (800b834 <tcp_process+0x7d0>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	f003 0310 	and.w	r3, r3, #16
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d065      	beq.n	800b81c <tcp_process+0x7b8>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b754:	4b38      	ldr	r3, [pc, #224]	@ (800b838 <tcp_process+0x7d4>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d15f      	bne.n	800b81c <tcp_process+0x7b8>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d15b      	bne.n	800b81c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7fe fcf1 	bl	800a14c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b76a:	4b35      	ldr	r3, [pc, #212]	@ (800b840 <tcp_process+0x7dc>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	429a      	cmp	r2, r3
 800b772:	d105      	bne.n	800b780 <tcp_process+0x71c>
 800b774:	4b32      	ldr	r3, [pc, #200]	@ (800b840 <tcp_process+0x7dc>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	4a31      	ldr	r2, [pc, #196]	@ (800b840 <tcp_process+0x7dc>)
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	e013      	b.n	800b7a8 <tcp_process+0x744>
 800b780:	4b2f      	ldr	r3, [pc, #188]	@ (800b840 <tcp_process+0x7dc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	e00c      	b.n	800b7a2 <tcp_process+0x73e>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d104      	bne.n	800b79c <tcp_process+0x738>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	60da      	str	r2, [r3, #12]
 800b79a:	e005      	b.n	800b7a8 <tcp_process+0x744>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	60fb      	str	r3, [r7, #12]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1ef      	bne.n	800b788 <tcp_process+0x724>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	60da      	str	r2, [r3, #12]
 800b7ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b82c <tcp_process+0x7c8>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	220a      	movs	r2, #10
 800b7b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b7ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b830 <tcp_process+0x7cc>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60da      	str	r2, [r3, #12]
 800b7c2:	4a1b      	ldr	r2, [pc, #108]	@ (800b830 <tcp_process+0x7cc>)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	f002 fc44 	bl	800e054 <tcp_timer_needed>
      }
      break;
 800b7cc:	e026      	b.n	800b81c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f93c 	bl	800ba4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b7d4:	4b17      	ldr	r3, [pc, #92]	@ (800b834 <tcp_process+0x7d0>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01f      	beq.n	800b820 <tcp_process+0x7bc>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7e4:	4b14      	ldr	r3, [pc, #80]	@ (800b838 <tcp_process+0x7d4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d119      	bne.n	800b820 <tcp_process+0x7bc>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d115      	bne.n	800b820 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b7f4:	4b11      	ldr	r3, [pc, #68]	@ (800b83c <tcp_process+0x7d8>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	f043 0310 	orr.w	r3, r3, #16
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b83c <tcp_process+0x7d8>)
 800b800:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b802:	e00d      	b.n	800b820 <tcp_process+0x7bc>
    default:
      break;
 800b804:	bf00      	nop
 800b806:	e00c      	b.n	800b822 <tcp_process+0x7be>
      break;
 800b808:	bf00      	nop
 800b80a:	e00a      	b.n	800b822 <tcp_process+0x7be>
      break;
 800b80c:	bf00      	nop
 800b80e:	e008      	b.n	800b822 <tcp_process+0x7be>
      break;
 800b810:	bf00      	nop
 800b812:	e006      	b.n	800b822 <tcp_process+0x7be>
      break;
 800b814:	bf00      	nop
 800b816:	e004      	b.n	800b822 <tcp_process+0x7be>
      break;
 800b818:	bf00      	nop
 800b81a:	e002      	b.n	800b822 <tcp_process+0x7be>
      break;
 800b81c:	bf00      	nop
 800b81e:	e000      	b.n	800b822 <tcp_process+0x7be>
      break;
 800b820:	bf00      	nop
  }
  return ERR_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3724      	adds	r7, #36	@ 0x24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd90      	pop	{r4, r7, pc}
 800b82c:	20007d88 	.word	0x20007d88
 800b830:	20007d84 	.word	0x20007d84
 800b834:	20007db8 	.word	0x20007db8
 800b838:	20007db0 	.word	0x20007db0
 800b83c:	20007db9 	.word	0x20007db9
 800b840:	20007d80 	.word	0x20007d80

0800b844 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b844:	b590      	push	{r4, r7, lr}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <tcp_oos_insert_segment+0x1e>
 800b854:	4b3b      	ldr	r3, [pc, #236]	@ (800b944 <tcp_oos_insert_segment+0x100>)
 800b856:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b85a:	493b      	ldr	r1, [pc, #236]	@ (800b948 <tcp_oos_insert_segment+0x104>)
 800b85c:	483b      	ldr	r0, [pc, #236]	@ (800b94c <tcp_oos_insert_segment+0x108>)
 800b85e:	f003 fad1 	bl	800ee04 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	899b      	ldrh	r3, [r3, #12]
 800b868:	b29b      	uxth	r3, r3
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f9 f9da 	bl	8004c24 <lwip_htons>
 800b870:	4603      	mov	r3, r0
 800b872:	b2db      	uxtb	r3, r3
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d028      	beq.n	800b8ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b87c:	6838      	ldr	r0, [r7, #0]
 800b87e:	f7fe fa63 	bl	8009d48 <tcp_segs_free>
    next = NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	603b      	str	r3, [r7, #0]
 800b886:	e056      	b.n	800b936 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	899b      	ldrh	r3, [r3, #12]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	4618      	mov	r0, r3
 800b892:	f7f9 f9c7 	bl	8004c24 <lwip_htons>
 800b896:	4603      	mov	r3, r0
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00d      	beq.n	800b8be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	899b      	ldrh	r3, [r3, #12]
 800b8a8:	b29c      	uxth	r4, r3
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	f7f9 f9ba 	bl	8004c24 <lwip_htons>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	4322      	orrs	r2, r4
 800b8ba:	b292      	uxth	r2, r2
 800b8bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f7fe fa52 	bl	8009d72 <tcp_seg_free>
    while (next &&
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	891b      	ldrh	r3, [r3, #8]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4b1d      	ldr	r3, [pc, #116]	@ (800b950 <tcp_oos_insert_segment+0x10c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	441a      	add	r2, r3
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	8909      	ldrh	r1, [r1, #8]
 800b8ea:	440b      	add	r3, r1
 800b8ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	daca      	bge.n	800b888 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01e      	beq.n	800b936 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	891b      	ldrh	r3, [r3, #8]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4b14      	ldr	r3, [pc, #80]	@ (800b950 <tcp_oos_insert_segment+0x10c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	441a      	add	r2, r3
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	dd12      	ble.n	800b936 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	b29a      	uxth	r2, r3
 800b918:	4b0d      	ldr	r3, [pc, #52]	@ (800b950 <tcp_oos_insert_segment+0x10c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	b29a      	uxth	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	891b      	ldrh	r3, [r3, #8]
 800b92e:	4619      	mov	r1, r3
 800b930:	4610      	mov	r0, r2
 800b932:	f7fc fe13 	bl	800855c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	601a      	str	r2, [r3, #0]
}
 800b93c:	bf00      	nop
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	bd90      	pop	{r4, r7, pc}
 800b944:	08011b04 	.word	0x08011b04
 800b948:	08011dfc 	.word	0x08011dfc
 800b94c:	08011b88 	.word	0x08011b88
 800b950:	20007dac 	.word	0x20007dac

0800b954 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b954:	b5b0      	push	{r4, r5, r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b962:	e03e      	b.n	800b9e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	4618      	mov	r0, r3
 800b974:	f7fd f800 	bl	8008978 <pbuf_clen>
 800b978:	4603      	mov	r3, r0
 800b97a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b982:	8a7a      	ldrh	r2, [r7, #18]
 800b984:	429a      	cmp	r2, r3
 800b986:	d906      	bls.n	800b996 <tcp_free_acked_segments+0x42>
 800b988:	4b2a      	ldr	r3, [pc, #168]	@ (800ba34 <tcp_free_acked_segments+0xe0>)
 800b98a:	f240 4257 	movw	r2, #1111	@ 0x457
 800b98e:	492a      	ldr	r1, [pc, #168]	@ (800ba38 <tcp_free_acked_segments+0xe4>)
 800b990:	482a      	ldr	r0, [pc, #168]	@ (800ba3c <tcp_free_acked_segments+0xe8>)
 800b992:	f003 fa37 	bl	800ee04 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800b99c:	8a7b      	ldrh	r3, [r7, #18]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	891a      	ldrh	r2, [r3, #8]
 800b9ac:	4b24      	ldr	r3, [pc, #144]	@ (800ba40 <tcp_free_acked_segments+0xec>)
 800b9ae:	881b      	ldrh	r3, [r3, #0]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	4b22      	ldr	r3, [pc, #136]	@ (800ba40 <tcp_free_acked_segments+0xec>)
 800b9b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b9b8:	6978      	ldr	r0, [r7, #20]
 800b9ba:	f7fe f9da 	bl	8009d72 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00c      	beq.n	800b9e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d109      	bne.n	800b9e2 <tcp_free_acked_segments+0x8e>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d106      	bne.n	800b9e2 <tcp_free_acked_segments+0x8e>
 800b9d4:	4b17      	ldr	r3, [pc, #92]	@ (800ba34 <tcp_free_acked_segments+0xe0>)
 800b9d6:	f240 4261 	movw	r2, #1121	@ 0x461
 800b9da:	491a      	ldr	r1, [pc, #104]	@ (800ba44 <tcp_free_acked_segments+0xf0>)
 800b9dc:	4817      	ldr	r0, [pc, #92]	@ (800ba3c <tcp_free_acked_segments+0xe8>)
 800b9de:	f003 fa11 	bl	800ee04 <iprintf>
  while (seg_list != NULL &&
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d020      	beq.n	800ba2a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f9 f92e 	bl	8004c50 <lwip_htonl>
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	891b      	ldrh	r3, [r3, #8]
 800b9fa:	461d      	mov	r5, r3
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	899b      	ldrh	r3, [r3, #12]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7f9 f90d 	bl	8004c24 <lwip_htons>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 0303 	and.w	r3, r3, #3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <tcp_free_acked_segments+0xc6>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <tcp_free_acked_segments+0xc8>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	442b      	add	r3, r5
 800ba1e:	18e2      	adds	r2, r4, r3
 800ba20:	4b09      	ldr	r3, [pc, #36]	@ (800ba48 <tcp_free_acked_segments+0xf4>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dd9c      	ble.n	800b964 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ba2a:	68bb      	ldr	r3, [r7, #8]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bdb0      	pop	{r4, r5, r7, pc}
 800ba34:	08011b04 	.word	0x08011b04
 800ba38:	08011e24 	.word	0x08011e24
 800ba3c:	08011b88 	.word	0x08011b88
 800ba40:	20007db4 	.word	0x20007db4
 800ba44:	08011e4c 	.word	0x08011e4c
 800ba48:	20007db0 	.word	0x20007db0

0800ba4c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ba4c:	b5b0      	push	{r4, r5, r7, lr}
 800ba4e:	b094      	sub	sp, #80	@ 0x50
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d106      	bne.n	800ba6c <tcp_receive+0x20>
 800ba5e:	4b91      	ldr	r3, [pc, #580]	@ (800bca4 <tcp_receive+0x258>)
 800ba60:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ba64:	4990      	ldr	r1, [pc, #576]	@ (800bca8 <tcp_receive+0x25c>)
 800ba66:	4891      	ldr	r0, [pc, #580]	@ (800bcac <tcp_receive+0x260>)
 800ba68:	f003 f9cc 	bl	800ee04 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	7d1b      	ldrb	r3, [r3, #20]
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d806      	bhi.n	800ba82 <tcp_receive+0x36>
 800ba74:	4b8b      	ldr	r3, [pc, #556]	@ (800bca4 <tcp_receive+0x258>)
 800ba76:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ba7a:	498d      	ldr	r1, [pc, #564]	@ (800bcb0 <tcp_receive+0x264>)
 800ba7c:	488b      	ldr	r0, [pc, #556]	@ (800bcac <tcp_receive+0x260>)
 800ba7e:	f003 f9c1 	bl	800ee04 <iprintf>

  if (flags & TCP_ACK) {
 800ba82:	4b8c      	ldr	r3, [pc, #560]	@ (800bcb4 <tcp_receive+0x268>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	f003 0310 	and.w	r3, r3, #16
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 8264 	beq.w	800bf58 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ba96:	461a      	mov	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba9c:	4413      	add	r3, r2
 800ba9e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baa4:	4b84      	ldr	r3, [pc, #528]	@ (800bcb8 <tcp_receive+0x26c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	db1b      	blt.n	800bae6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bab2:	4b81      	ldr	r3, [pc, #516]	@ (800bcb8 <tcp_receive+0x26c>)
 800bab4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d106      	bne.n	800bac8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800babe:	4b7f      	ldr	r3, [pc, #508]	@ (800bcbc <tcp_receive+0x270>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	db0e      	blt.n	800bae6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bacc:	4b7b      	ldr	r3, [pc, #492]	@ (800bcbc <tcp_receive+0x270>)
 800bace:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d125      	bne.n	800bb20 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bad4:	4b7a      	ldr	r3, [pc, #488]	@ (800bcc0 <tcp_receive+0x274>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	89db      	ldrh	r3, [r3, #14]
 800bada:	b29a      	uxth	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d91c      	bls.n	800bb20 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bae6:	4b76      	ldr	r3, [pc, #472]	@ (800bcc0 <tcp_receive+0x274>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	89db      	ldrh	r3, [r3, #14]
 800baec:	b29a      	uxth	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d205      	bcs.n	800bb10 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bb10:	4b69      	ldr	r3, [pc, #420]	@ (800bcb8 <tcp_receive+0x26c>)
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bb18:	4b68      	ldr	r3, [pc, #416]	@ (800bcbc <tcp_receive+0x270>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bb20:	4b66      	ldr	r3, [pc, #408]	@ (800bcbc <tcp_receive+0x270>)
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	dc58      	bgt.n	800bbe0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bb2e:	4b65      	ldr	r3, [pc, #404]	@ (800bcc4 <tcp_receive+0x278>)
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d14b      	bne.n	800bbce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bb40:	4413      	add	r3, r2
 800bb42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d142      	bne.n	800bbce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	db3d      	blt.n	800bbce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb56:	4b59      	ldr	r3, [pc, #356]	@ (800bcbc <tcp_receive+0x270>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d137      	bne.n	800bbce <tcp_receive+0x182>
              found_dupack = 1;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bb68:	2bff      	cmp	r3, #255	@ 0xff
 800bb6a:	d007      	beq.n	800bb7c <tcp_receive+0x130>
                ++pcb->dupacks;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bb72:	3301      	adds	r3, #1
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d91b      	bls.n	800bbbe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb90:	4413      	add	r3, r2
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d30a      	bcc.n	800bbb4 <tcp_receive+0x168>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bba8:	4413      	add	r3, r2
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bbb2:	e004      	b.n	800bbbe <tcp_receive+0x172>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bbba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d902      	bls.n	800bbce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 fee7 	bl	800d99c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bbce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f040 8161 	bne.w	800be98 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bbde:	e15b      	b.n	800be98 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbe0:	4b36      	ldr	r3, [pc, #216]	@ (800bcbc <tcp_receive+0x270>)
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	3b01      	subs	r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f2c0 814e 	blt.w	800be8e <tcp_receive+0x442>
 800bbf2:	4b32      	ldr	r3, [pc, #200]	@ (800bcbc <tcp_receive+0x270>)
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f300 8146 	bgt.w	800be8e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	8b5b      	ldrh	r3, [r3, #26]
 800bc06:	f003 0304 	and.w	r3, r3, #4
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d010      	beq.n	800bc30 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	8b5b      	ldrh	r3, [r3, #26]
 800bc12:	f023 0304 	bic.w	r3, r3, #4
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc3e:	10db      	asrs	r3, r3, #3
 800bc40:	b21b      	sxth	r3, r3
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	b21a      	sxth	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bc58:	4b18      	ldr	r3, [pc, #96]	@ (800bcbc <tcp_receive+0x270>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800bc70:	4b12      	ldr	r3, [pc, #72]	@ (800bcbc <tcp_receive+0x270>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	7d1b      	ldrb	r3, [r3, #20]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	f240 8097 	bls.w	800bdb0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d245      	bcs.n	800bd1e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	8b5b      	ldrh	r3, [r3, #26]
 800bc96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d014      	beq.n	800bcc8 <tcp_receive+0x27c>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e013      	b.n	800bcca <tcp_receive+0x27e>
 800bca2:	bf00      	nop
 800bca4:	08011b04 	.word	0x08011b04
 800bca8:	08011e6c 	.word	0x08011e6c
 800bcac:	08011b88 	.word	0x08011b88
 800bcb0:	08011e88 	.word	0x08011e88
 800bcb4:	20007db8 	.word	0x20007db8
 800bcb8:	20007dac 	.word	0x20007dac
 800bcbc:	20007db0 	.word	0x20007db0
 800bcc0:	20007d9c 	.word	0x20007d9c
 800bcc4:	20007db6 	.word	0x20007db6
 800bcc8:	2302      	movs	r3, #2
 800bcca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bcce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcd8:	fb12 f303 	smulbb	r3, r2, r3
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bce0:	4293      	cmp	r3, r2
 800bce2:	bf28      	it	cs
 800bce4:	4613      	movcs	r3, r2
 800bce6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bcee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bcf0:	4413      	add	r3, r2
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d309      	bcc.n	800bd12 <tcp_receive+0x2c6>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bd04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bd06:	4413      	add	r3, r2
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bd10:	e04e      	b.n	800bdb0 <tcp_receive+0x364>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bd1c:	e048      	b.n	800bdb0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bd24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bd26:	4413      	add	r3, r2
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d309      	bcc.n	800bd48 <tcp_receive+0x2fc>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bd3a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bd3c:	4413      	add	r3, r2
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd46:	e004      	b.n	800bd52 <tcp_receive+0x306>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d326      	bcc.n	800bdb0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd82:	4413      	add	r3, r2
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d30a      	bcc.n	800bda6 <tcp_receive+0x35a>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd9a:	4413      	add	r3, r2
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bda4:	e004      	b.n	800bdb0 <tcp_receive+0x364>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bdac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdb8:	4a98      	ldr	r2, [pc, #608]	@ (800c01c <tcp_receive+0x5d0>)
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7ff fdca 	bl	800b954 <tcp_free_acked_segments>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdce:	4a94      	ldr	r2, [pc, #592]	@ (800c020 <tcp_receive+0x5d4>)
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7ff fdbf 	bl	800b954 <tcp_free_acked_segments>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d104      	bne.n	800bdee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bdea:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bdec:	e002      	b.n	800bdf4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d103      	bne.n	800be0a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800be10:	4b84      	ldr	r3, [pc, #528]	@ (800c024 <tcp_receive+0x5d8>)
 800be12:	881b      	ldrh	r3, [r3, #0]
 800be14:	4413      	add	r3, r2
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	8b5b      	ldrh	r3, [r3, #26]
 800be22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be26:	2b00      	cmp	r3, #0
 800be28:	d035      	beq.n	800be96 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d118      	bne.n	800be64 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00c      	beq.n	800be54 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	4618      	mov	r0, r3
 800be48:	f7f8 ff02 	bl	8004c50 <lwip_htonl>
 800be4c:	4603      	mov	r3, r0
 800be4e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800be50:	2b00      	cmp	r3, #0
 800be52:	dc20      	bgt.n	800be96 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8b5b      	ldrh	r3, [r3, #26]
 800be58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be62:	e018      	b.n	800be96 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4618      	mov	r0, r3
 800be72:	f7f8 feed 	bl	8004c50 <lwip_htonl>
 800be76:	4603      	mov	r3, r0
 800be78:	1ae3      	subs	r3, r4, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc0b      	bgt.n	800be96 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	8b5b      	ldrh	r3, [r3, #26]
 800be82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be86:	b29a      	uxth	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be8c:	e003      	b.n	800be96 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f001 ff70 	bl	800dd74 <tcp_send_empty_ack>
 800be94:	e000      	b.n	800be98 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be96:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d05b      	beq.n	800bf58 <tcp_receive+0x50c>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bea4:	4b60      	ldr	r3, [pc, #384]	@ (800c028 <tcp_receive+0x5dc>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da54      	bge.n	800bf58 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800beae:	4b5f      	ldr	r3, [pc, #380]	@ (800c02c <tcp_receive+0x5e0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb8:	b29b      	uxth	r3, r3
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bec2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800becc:	10db      	asrs	r3, r3, #3
 800bece:	b21b      	sxth	r3, r3
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bee6:	4413      	add	r3, r2
 800bee8:	b29b      	uxth	r3, r3
 800beea:	b21a      	sxth	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800bef0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da05      	bge.n	800bf04 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bef8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800befc:	425b      	negs	r3, r3
 800befe:	b29b      	uxth	r3, r3
 800bf00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bf04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bf0e:	109b      	asrs	r3, r3, #2
 800bf10:	b21b      	sxth	r3, r3
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bf28:	4413      	add	r3, r2
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	b21a      	sxth	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bf38:	10db      	asrs	r3, r3, #3
 800bf3a:	b21b      	sxth	r3, r3
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	4413      	add	r3, r2
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	b21a      	sxth	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bf58:	4b35      	ldr	r3, [pc, #212]	@ (800c030 <tcp_receive+0x5e4>)
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 84df 	beq.w	800c920 <tcp_receive+0xed4>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	2b06      	cmp	r3, #6
 800bf68:	f200 84da 	bhi.w	800c920 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf70:	4b30      	ldr	r3, [pc, #192]	@ (800c034 <tcp_receive+0x5e8>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f2c0 808f 	blt.w	800c09c <tcp_receive+0x650>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf82:	4b2b      	ldr	r3, [pc, #172]	@ (800c030 <tcp_receive+0x5e4>)
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	4619      	mov	r1, r3
 800bf88:	4b2a      	ldr	r3, [pc, #168]	@ (800c034 <tcp_receive+0x5e8>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	440b      	add	r3, r1
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	3301      	adds	r3, #1
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f300 8082 	bgt.w	800c09c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bf98:	4b27      	ldr	r3, [pc, #156]	@ (800c038 <tcp_receive+0x5ec>)
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfa2:	4b24      	ldr	r3, [pc, #144]	@ (800c034 <tcp_receive+0x5e8>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bfaa:	4b23      	ldr	r3, [pc, #140]	@ (800c038 <tcp_receive+0x5ec>)
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d106      	bne.n	800bfc0 <tcp_receive+0x574>
 800bfb2:	4b22      	ldr	r3, [pc, #136]	@ (800c03c <tcp_receive+0x5f0>)
 800bfb4:	f240 5294 	movw	r2, #1428	@ 0x594
 800bfb8:	4921      	ldr	r1, [pc, #132]	@ (800c040 <tcp_receive+0x5f4>)
 800bfba:	4822      	ldr	r0, [pc, #136]	@ (800c044 <tcp_receive+0x5f8>)
 800bfbc:	f002 ff22 	bl	800ee04 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d906      	bls.n	800bfd8 <tcp_receive+0x58c>
 800bfca:	4b1c      	ldr	r3, [pc, #112]	@ (800c03c <tcp_receive+0x5f0>)
 800bfcc:	f240 5295 	movw	r2, #1429	@ 0x595
 800bfd0:	491d      	ldr	r1, [pc, #116]	@ (800c048 <tcp_receive+0x5fc>)
 800bfd2:	481c      	ldr	r0, [pc, #112]	@ (800c044 <tcp_receive+0x5f8>)
 800bfd4:	f002 ff16 	bl	800ee04 <iprintf>
      off = (u16_t)off32;
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bfde:	4b16      	ldr	r3, [pc, #88]	@ (800c038 <tcp_receive+0x5ec>)
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	891b      	ldrh	r3, [r3, #8]
 800bfe4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d906      	bls.n	800bffa <tcp_receive+0x5ae>
 800bfec:	4b13      	ldr	r3, [pc, #76]	@ (800c03c <tcp_receive+0x5f0>)
 800bfee:	f240 5297 	movw	r2, #1431	@ 0x597
 800bff2:	4916      	ldr	r1, [pc, #88]	@ (800c04c <tcp_receive+0x600>)
 800bff4:	4813      	ldr	r0, [pc, #76]	@ (800c044 <tcp_receive+0x5f8>)
 800bff6:	f002 ff05 	bl	800ee04 <iprintf>
      inseg.len -= off;
 800bffa:	4b0f      	ldr	r3, [pc, #60]	@ (800c038 <tcp_receive+0x5ec>)
 800bffc:	891a      	ldrh	r2, [r3, #8]
 800bffe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	b29a      	uxth	r2, r3
 800c006:	4b0c      	ldr	r3, [pc, #48]	@ (800c038 <tcp_receive+0x5ec>)
 800c008:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c00a:	4b0b      	ldr	r3, [pc, #44]	@ (800c038 <tcp_receive+0x5ec>)
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	891a      	ldrh	r2, [r3, #8]
 800c010:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c014:	1ad3      	subs	r3, r2, r3
 800c016:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c018:	e02a      	b.n	800c070 <tcp_receive+0x624>
 800c01a:	bf00      	nop
 800c01c:	08011ea4 	.word	0x08011ea4
 800c020:	08011eac 	.word	0x08011eac
 800c024:	20007db4 	.word	0x20007db4
 800c028:	20007db0 	.word	0x20007db0
 800c02c:	20007d74 	.word	0x20007d74
 800c030:	20007db6 	.word	0x20007db6
 800c034:	20007dac 	.word	0x20007dac
 800c038:	20007d8c 	.word	0x20007d8c
 800c03c:	08011b04 	.word	0x08011b04
 800c040:	08011eb4 	.word	0x08011eb4
 800c044:	08011b88 	.word	0x08011b88
 800c048:	08011ec4 	.word	0x08011ec4
 800c04c:	08011ed4 	.word	0x08011ed4
        off -= p->len;
 800c050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c052:	895b      	ldrh	r3, [r3, #10]
 800c054:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c05e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c060:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c062:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c066:	2200      	movs	r2, #0
 800c068:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c06a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c072:	895b      	ldrh	r3, [r3, #10]
 800c074:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c078:	429a      	cmp	r2, r3
 800c07a:	d8e9      	bhi.n	800c050 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c07c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c080:	4619      	mov	r1, r3
 800c082:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c084:	f7fc fb6a 	bl	800875c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08c:	4a90      	ldr	r2, [pc, #576]	@ (800c2d0 <tcp_receive+0x884>)
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	4b90      	ldr	r3, [pc, #576]	@ (800c2d4 <tcp_receive+0x888>)
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	4a8e      	ldr	r2, [pc, #568]	@ (800c2d0 <tcp_receive+0x884>)
 800c096:	6812      	ldr	r2, [r2, #0]
 800c098:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c09a:	e00d      	b.n	800c0b8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c09c:	4b8c      	ldr	r3, [pc, #560]	@ (800c2d0 <tcp_receive+0x884>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da06      	bge.n	800c0b8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	8b5b      	ldrh	r3, [r3, #26]
 800c0ae:	f043 0302 	orr.w	r3, r3, #2
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0b8:	4b85      	ldr	r3, [pc, #532]	@ (800c2d0 <tcp_receive+0x884>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f2c0 8427 	blt.w	800c916 <tcp_receive+0xeca>
 800c0c8:	4b81      	ldr	r3, [pc, #516]	@ (800c2d0 <tcp_receive+0x884>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c0d4:	440b      	add	r3, r1
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	3301      	adds	r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f300 841b 	bgt.w	800c916 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0e4:	4b7a      	ldr	r3, [pc, #488]	@ (800c2d0 <tcp_receive+0x884>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	f040 8298 	bne.w	800c61e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c0ee:	4b79      	ldr	r3, [pc, #484]	@ (800c2d4 <tcp_receive+0x888>)
 800c0f0:	891c      	ldrh	r4, [r3, #8]
 800c0f2:	4b78      	ldr	r3, [pc, #480]	@ (800c2d4 <tcp_receive+0x888>)
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	899b      	ldrh	r3, [r3, #12]
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7f8 fd92 	bl	8004c24 <lwip_htons>
 800c100:	4603      	mov	r3, r0
 800c102:	b2db      	uxtb	r3, r3
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <tcp_receive+0x6c4>
 800c10c:	2301      	movs	r3, #1
 800c10e:	e000      	b.n	800c112 <tcp_receive+0x6c6>
 800c110:	2300      	movs	r3, #0
 800c112:	4423      	add	r3, r4
 800c114:	b29a      	uxth	r2, r3
 800c116:	4b70      	ldr	r3, [pc, #448]	@ (800c2d8 <tcp_receive+0x88c>)
 800c118:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c11e:	4b6e      	ldr	r3, [pc, #440]	@ (800c2d8 <tcp_receive+0x88c>)
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	429a      	cmp	r2, r3
 800c124:	d274      	bcs.n	800c210 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c126:	4b6b      	ldr	r3, [pc, #428]	@ (800c2d4 <tcp_receive+0x888>)
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	899b      	ldrh	r3, [r3, #12]
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	4618      	mov	r0, r3
 800c130:	f7f8 fd78 	bl	8004c24 <lwip_htons>
 800c134:	4603      	mov	r3, r0
 800c136:	b2db      	uxtb	r3, r3
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d01e      	beq.n	800c17e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c140:	4b64      	ldr	r3, [pc, #400]	@ (800c2d4 <tcp_receive+0x888>)
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	899b      	ldrh	r3, [r3, #12]
 800c146:	b29b      	uxth	r3, r3
 800c148:	b21b      	sxth	r3, r3
 800c14a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c14e:	b21c      	sxth	r4, r3
 800c150:	4b60      	ldr	r3, [pc, #384]	@ (800c2d4 <tcp_receive+0x888>)
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	899b      	ldrh	r3, [r3, #12]
 800c156:	b29b      	uxth	r3, r3
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f8 fd63 	bl	8004c24 <lwip_htons>
 800c15e:	4603      	mov	r3, r0
 800c160:	b2db      	uxtb	r3, r3
 800c162:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c166:	b29b      	uxth	r3, r3
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f8 fd5b 	bl	8004c24 <lwip_htons>
 800c16e:	4603      	mov	r3, r0
 800c170:	b21b      	sxth	r3, r3
 800c172:	4323      	orrs	r3, r4
 800c174:	b21a      	sxth	r2, r3
 800c176:	4b57      	ldr	r3, [pc, #348]	@ (800c2d4 <tcp_receive+0x888>)
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	b292      	uxth	r2, r2
 800c17c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c182:	4b54      	ldr	r3, [pc, #336]	@ (800c2d4 <tcp_receive+0x888>)
 800c184:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c186:	4b53      	ldr	r3, [pc, #332]	@ (800c2d4 <tcp_receive+0x888>)
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	899b      	ldrh	r3, [r3, #12]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	4618      	mov	r0, r3
 800c190:	f7f8 fd48 	bl	8004c24 <lwip_htons>
 800c194:	4603      	mov	r3, r0
 800c196:	b2db      	uxtb	r3, r3
 800c198:	f003 0302 	and.w	r3, r3, #2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <tcp_receive+0x760>
            inseg.len -= 1;
 800c1a0:	4b4c      	ldr	r3, [pc, #304]	@ (800c2d4 <tcp_receive+0x888>)
 800c1a2:	891b      	ldrh	r3, [r3, #8]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	4b4a      	ldr	r3, [pc, #296]	@ (800c2d4 <tcp_receive+0x888>)
 800c1aa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c1ac:	4b49      	ldr	r3, [pc, #292]	@ (800c2d4 <tcp_receive+0x888>)
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	4a48      	ldr	r2, [pc, #288]	@ (800c2d4 <tcp_receive+0x888>)
 800c1b2:	8912      	ldrh	r2, [r2, #8]
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fc f9d0 	bl	800855c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c1bc:	4b45      	ldr	r3, [pc, #276]	@ (800c2d4 <tcp_receive+0x888>)
 800c1be:	891c      	ldrh	r4, [r3, #8]
 800c1c0:	4b44      	ldr	r3, [pc, #272]	@ (800c2d4 <tcp_receive+0x888>)
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	899b      	ldrh	r3, [r3, #12]
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f8 fd2b 	bl	8004c24 <lwip_htons>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <tcp_receive+0x792>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e000      	b.n	800c1e0 <tcp_receive+0x794>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4423      	add	r3, r4
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	4b3c      	ldr	r3, [pc, #240]	@ (800c2d8 <tcp_receive+0x88c>)
 800c1e6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c1e8:	4b3b      	ldr	r3, [pc, #236]	@ (800c2d8 <tcp_receive+0x88c>)
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	4b38      	ldr	r3, [pc, #224]	@ (800c2d0 <tcp_receive+0x884>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	441a      	add	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c1fc:	440b      	add	r3, r1
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d006      	beq.n	800c210 <tcp_receive+0x7c4>
 800c202:	4b36      	ldr	r3, [pc, #216]	@ (800c2dc <tcp_receive+0x890>)
 800c204:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c208:	4935      	ldr	r1, [pc, #212]	@ (800c2e0 <tcp_receive+0x894>)
 800c20a:	4836      	ldr	r0, [pc, #216]	@ (800c2e4 <tcp_receive+0x898>)
 800c20c:	f002 fdfa 	bl	800ee04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 80e6 	beq.w	800c3e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c21a:	4b2e      	ldr	r3, [pc, #184]	@ (800c2d4 <tcp_receive+0x888>)
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	899b      	ldrh	r3, [r3, #12]
 800c220:	b29b      	uxth	r3, r3
 800c222:	4618      	mov	r0, r3
 800c224:	f7f8 fcfe 	bl	8004c24 <lwip_htons>
 800c228:	4603      	mov	r3, r0
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	f003 0301 	and.w	r3, r3, #1
 800c230:	2b00      	cmp	r3, #0
 800c232:	d010      	beq.n	800c256 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c234:	e00a      	b.n	800c24c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c23a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7fd fd93 	bl	8009d72 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1f0      	bne.n	800c236 <tcp_receive+0x7ea>
 800c254:	e0c7      	b.n	800c3e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c25c:	e051      	b.n	800c302 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c25e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	899b      	ldrh	r3, [r3, #12]
 800c264:	b29b      	uxth	r3, r3
 800c266:	4618      	mov	r0, r3
 800c268:	f7f8 fcdc 	bl	8004c24 <lwip_htons>
 800c26c:	4603      	mov	r3, r0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d03c      	beq.n	800c2f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c278:	4b16      	ldr	r3, [pc, #88]	@ (800c2d4 <tcp_receive+0x888>)
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	899b      	ldrh	r3, [r3, #12]
 800c27e:	b29b      	uxth	r3, r3
 800c280:	4618      	mov	r0, r3
 800c282:	f7f8 fccf 	bl	8004c24 <lwip_htons>
 800c286:	4603      	mov	r3, r0
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d12f      	bne.n	800c2f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c292:	4b10      	ldr	r3, [pc, #64]	@ (800c2d4 <tcp_receive+0x888>)
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	899b      	ldrh	r3, [r3, #12]
 800c298:	b29c      	uxth	r4, r3
 800c29a:	2001      	movs	r0, #1
 800c29c:	f7f8 fcc2 	bl	8004c24 <lwip_htons>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d4 <tcp_receive+0x888>)
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	4322      	orrs	r2, r4
 800c2aa:	b292      	uxth	r2, r2
 800c2ac:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c2ae:	4b09      	ldr	r3, [pc, #36]	@ (800c2d4 <tcp_receive+0x888>)
 800c2b0:	891c      	ldrh	r4, [r3, #8]
 800c2b2:	4b08      	ldr	r3, [pc, #32]	@ (800c2d4 <tcp_receive+0x888>)
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	899b      	ldrh	r3, [r3, #12]
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f8 fcb2 	bl	8004c24 <lwip_htons>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	f003 0303 	and.w	r3, r3, #3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00d      	beq.n	800c2e8 <tcp_receive+0x89c>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e00c      	b.n	800c2ea <tcp_receive+0x89e>
 800c2d0:	20007dac 	.word	0x20007dac
 800c2d4:	20007d8c 	.word	0x20007d8c
 800c2d8:	20007db6 	.word	0x20007db6
 800c2dc:	08011b04 	.word	0x08011b04
 800c2e0:	08011ee4 	.word	0x08011ee4
 800c2e4:	08011b88 	.word	0x08011b88
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	4423      	add	r3, r4
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	4b98      	ldr	r3, [pc, #608]	@ (800c550 <tcp_receive+0xb04>)
 800c2f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c2f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c2fc:	6938      	ldr	r0, [r7, #16]
 800c2fe:	f7fd fd38 	bl	8009d72 <tcp_seg_free>
            while (next &&
 800c302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00e      	beq.n	800c326 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c308:	4b91      	ldr	r3, [pc, #580]	@ (800c550 <tcp_receive+0xb04>)
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	461a      	mov	r2, r3
 800c30e:	4b91      	ldr	r3, [pc, #580]	@ (800c554 <tcp_receive+0xb08>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	441a      	add	r2, r3
 800c314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c31c:	8909      	ldrh	r1, [r1, #8]
 800c31e:	440b      	add	r3, r1
 800c320:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c322:	2b00      	cmp	r3, #0
 800c324:	da9b      	bge.n	800c25e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d059      	beq.n	800c3e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c32c:	4b88      	ldr	r3, [pc, #544]	@ (800c550 <tcp_receive+0xb04>)
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	4b88      	ldr	r3, [pc, #544]	@ (800c554 <tcp_receive+0xb08>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	441a      	add	r2, r3
 800c338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c340:	2b00      	cmp	r3, #0
 800c342:	dd4d      	ble.n	800c3e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	4b81      	ldr	r3, [pc, #516]	@ (800c554 <tcp_receive+0xb08>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	b29b      	uxth	r3, r3
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	b29a      	uxth	r2, r3
 800c356:	4b80      	ldr	r3, [pc, #512]	@ (800c558 <tcp_receive+0xb0c>)
 800c358:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c35a:	4b7f      	ldr	r3, [pc, #508]	@ (800c558 <tcp_receive+0xb0c>)
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	899b      	ldrh	r3, [r3, #12]
 800c360:	b29b      	uxth	r3, r3
 800c362:	4618      	mov	r0, r3
 800c364:	f7f8 fc5e 	bl	8004c24 <lwip_htons>
 800c368:	4603      	mov	r3, r0
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	f003 0302 	and.w	r3, r3, #2
 800c370:	2b00      	cmp	r3, #0
 800c372:	d005      	beq.n	800c380 <tcp_receive+0x934>
                inseg.len -= 1;
 800c374:	4b78      	ldr	r3, [pc, #480]	@ (800c558 <tcp_receive+0xb0c>)
 800c376:	891b      	ldrh	r3, [r3, #8]
 800c378:	3b01      	subs	r3, #1
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	4b76      	ldr	r3, [pc, #472]	@ (800c558 <tcp_receive+0xb0c>)
 800c37e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c380:	4b75      	ldr	r3, [pc, #468]	@ (800c558 <tcp_receive+0xb0c>)
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	4a74      	ldr	r2, [pc, #464]	@ (800c558 <tcp_receive+0xb0c>)
 800c386:	8912      	ldrh	r2, [r2, #8]
 800c388:	4611      	mov	r1, r2
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fc f8e6 	bl	800855c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c390:	4b71      	ldr	r3, [pc, #452]	@ (800c558 <tcp_receive+0xb0c>)
 800c392:	891c      	ldrh	r4, [r3, #8]
 800c394:	4b70      	ldr	r3, [pc, #448]	@ (800c558 <tcp_receive+0xb0c>)
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	899b      	ldrh	r3, [r3, #12]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7f8 fc41 	bl	8004c24 <lwip_htons>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 0303 	and.w	r3, r3, #3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <tcp_receive+0x966>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e000      	b.n	800c3b4 <tcp_receive+0x968>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	4423      	add	r3, r4
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	4b65      	ldr	r3, [pc, #404]	@ (800c550 <tcp_receive+0xb04>)
 800c3ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c3bc:	4b64      	ldr	r3, [pc, #400]	@ (800c550 <tcp_receive+0xb04>)
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4b64      	ldr	r3, [pc, #400]	@ (800c554 <tcp_receive+0xb08>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	441a      	add	r2, r3
 800c3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d006      	beq.n	800c3e0 <tcp_receive+0x994>
 800c3d2:	4b62      	ldr	r3, [pc, #392]	@ (800c55c <tcp_receive+0xb10>)
 800c3d4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c3d8:	4961      	ldr	r1, [pc, #388]	@ (800c560 <tcp_receive+0xb14>)
 800c3da:	4862      	ldr	r0, [pc, #392]	@ (800c564 <tcp_receive+0xb18>)
 800c3dc:	f002 fd12 	bl	800ee04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3e4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c3e6:	4b5a      	ldr	r3, [pc, #360]	@ (800c550 <tcp_receive+0xb04>)
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	4b59      	ldr	r3, [pc, #356]	@ (800c554 <tcp_receive+0xb08>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	441a      	add	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c3fa:	4b55      	ldr	r3, [pc, #340]	@ (800c550 <tcp_receive+0xb04>)
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d206      	bcs.n	800c410 <tcp_receive+0x9c4>
 800c402:	4b56      	ldr	r3, [pc, #344]	@ (800c55c <tcp_receive+0xb10>)
 800c404:	f240 6207 	movw	r2, #1543	@ 0x607
 800c408:	4957      	ldr	r1, [pc, #348]	@ (800c568 <tcp_receive+0xb1c>)
 800c40a:	4856      	ldr	r0, [pc, #344]	@ (800c564 <tcp_receive+0xb18>)
 800c40c:	f002 fcfa 	bl	800ee04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c414:	4b4e      	ldr	r3, [pc, #312]	@ (800c550 <tcp_receive+0xb04>)
 800c416:	881b      	ldrh	r3, [r3, #0]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7fc ffc5 	bl	80093b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c426:	4b4c      	ldr	r3, [pc, #304]	@ (800c558 <tcp_receive+0xb0c>)
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	891b      	ldrh	r3, [r3, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d006      	beq.n	800c43e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c430:	4b49      	ldr	r3, [pc, #292]	@ (800c558 <tcp_receive+0xb0c>)
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	4a4d      	ldr	r2, [pc, #308]	@ (800c56c <tcp_receive+0xb20>)
 800c436:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c438:	4b47      	ldr	r3, [pc, #284]	@ (800c558 <tcp_receive+0xb0c>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c43e:	4b46      	ldr	r3, [pc, #280]	@ (800c558 <tcp_receive+0xb0c>)
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	899b      	ldrh	r3, [r3, #12]
 800c444:	b29b      	uxth	r3, r3
 800c446:	4618      	mov	r0, r3
 800c448:	f7f8 fbec 	bl	8004c24 <lwip_htons>
 800c44c:	4603      	mov	r3, r0
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	f003 0301 	and.w	r3, r3, #1
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 80b8 	beq.w	800c5ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c45a:	4b45      	ldr	r3, [pc, #276]	@ (800c570 <tcp_receive+0xb24>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	f043 0320 	orr.w	r3, r3, #32
 800c462:	b2da      	uxtb	r2, r3
 800c464:	4b42      	ldr	r3, [pc, #264]	@ (800c570 <tcp_receive+0xb24>)
 800c466:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c468:	e0af      	b.n	800c5ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c46e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	4a36      	ldr	r2, [pc, #216]	@ (800c554 <tcp_receive+0xb08>)
 800c47a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	891b      	ldrh	r3, [r3, #8]
 800c480:	461c      	mov	r4, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	899b      	ldrh	r3, [r3, #12]
 800c488:	b29b      	uxth	r3, r3
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f8 fbca 	bl	8004c24 <lwip_htons>
 800c490:	4603      	mov	r3, r0
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0303 	and.w	r3, r3, #3
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <tcp_receive+0xa54>
 800c49c:	2301      	movs	r3, #1
 800c49e:	e000      	b.n	800c4a2 <tcp_receive+0xa56>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	191a      	adds	r2, r3, r4
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a8:	441a      	add	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4b2:	461c      	mov	r4, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	891b      	ldrh	r3, [r3, #8]
 800c4b8:	461d      	mov	r5, r3
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	899b      	ldrh	r3, [r3, #12]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f8 fbae 	bl	8004c24 <lwip_htons>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 0303 	and.w	r3, r3, #3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <tcp_receive+0xa8c>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e000      	b.n	800c4da <tcp_receive+0xa8e>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	442b      	add	r3, r5
 800c4dc:	429c      	cmp	r4, r3
 800c4de:	d206      	bcs.n	800c4ee <tcp_receive+0xaa2>
 800c4e0:	4b1e      	ldr	r3, [pc, #120]	@ (800c55c <tcp_receive+0xb10>)
 800c4e2:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c4e6:	4923      	ldr	r1, [pc, #140]	@ (800c574 <tcp_receive+0xb28>)
 800c4e8:	481e      	ldr	r0, [pc, #120]	@ (800c564 <tcp_receive+0xb18>)
 800c4ea:	f002 fc8b 	bl	800ee04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	891b      	ldrh	r3, [r3, #8]
 800c4f2:	461c      	mov	r4, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	899b      	ldrh	r3, [r3, #12]
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7f8 fb91 	bl	8004c24 <lwip_htons>
 800c502:	4603      	mov	r3, r0
 800c504:	b2db      	uxtb	r3, r3
 800c506:	f003 0303 	and.w	r3, r3, #3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <tcp_receive+0xac6>
 800c50e:	2301      	movs	r3, #1
 800c510:	e000      	b.n	800c514 <tcp_receive+0xac8>
 800c512:	2300      	movs	r3, #0
 800c514:	1919      	adds	r1, r3, r4
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c51a:	b28b      	uxth	r3, r1
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7fc ff43 	bl	80093b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	891b      	ldrh	r3, [r3, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d028      	beq.n	800c586 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c534:	4b0d      	ldr	r3, [pc, #52]	@ (800c56c <tcp_receive+0xb20>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01d      	beq.n	800c578 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c53c:	4b0b      	ldr	r3, [pc, #44]	@ (800c56c <tcp_receive+0xb20>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	4619      	mov	r1, r3
 800c546:	4610      	mov	r0, r2
 800c548:	f7fc fa50 	bl	80089ec <pbuf_cat>
 800c54c:	e018      	b.n	800c580 <tcp_receive+0xb34>
 800c54e:	bf00      	nop
 800c550:	20007db6 	.word	0x20007db6
 800c554:	20007dac 	.word	0x20007dac
 800c558:	20007d8c 	.word	0x20007d8c
 800c55c:	08011b04 	.word	0x08011b04
 800c560:	08011f1c 	.word	0x08011f1c
 800c564:	08011b88 	.word	0x08011b88
 800c568:	08011f58 	.word	0x08011f58
 800c56c:	20007dbc 	.word	0x20007dbc
 800c570:	20007db9 	.word	0x20007db9
 800c574:	08011f78 	.word	0x08011f78
            } else {
              recv_data = cseg->p;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	4a70      	ldr	r2, [pc, #448]	@ (800c740 <tcp_receive+0xcf4>)
 800c57e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2200      	movs	r2, #0
 800c584:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	899b      	ldrh	r3, [r3, #12]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	4618      	mov	r0, r3
 800c590:	f7f8 fb48 	bl	8004c24 <lwip_htons>
 800c594:	4603      	mov	r3, r0
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0301 	and.w	r3, r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00d      	beq.n	800c5bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c5a0:	4b68      	ldr	r3, [pc, #416]	@ (800c744 <tcp_receive+0xcf8>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	f043 0320 	orr.w	r3, r3, #32
 800c5a8:	b2da      	uxtb	r2, r3
 800c5aa:	4b66      	ldr	r3, [pc, #408]	@ (800c744 <tcp_receive+0xcf8>)
 800c5ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7d1b      	ldrb	r3, [r3, #20]
 800c5b2:	2b04      	cmp	r3, #4
 800c5b4:	d102      	bne.n	800c5bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2207      	movs	r2, #7
 800c5ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c5c4:	68b8      	ldr	r0, [r7, #8]
 800c5c6:	f7fd fbd4 	bl	8009d72 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d008      	beq.n	800c5e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	685a      	ldr	r2, [r3, #4]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	f43f af43 	beq.w	800c46a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	8b5b      	ldrh	r3, [r3, #26]
 800c5e8:	f003 0301 	and.w	r3, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00e      	beq.n	800c60e <tcp_receive+0xbc2>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	8b5b      	ldrh	r3, [r3, #26]
 800c5f4:	f023 0301 	bic.w	r3, r3, #1
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	835a      	strh	r2, [r3, #26]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	8b5b      	ldrh	r3, [r3, #26]
 800c602:	f043 0302 	orr.w	r3, r3, #2
 800c606:	b29a      	uxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c60c:	e187      	b.n	800c91e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	8b5b      	ldrh	r3, [r3, #26]
 800c612:	f043 0301 	orr.w	r3, r3, #1
 800c616:	b29a      	uxth	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c61c:	e17f      	b.n	800c91e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c626:	4848      	ldr	r0, [pc, #288]	@ (800c748 <tcp_receive+0xcfc>)
 800c628:	f7fd fbbc 	bl	8009da4 <tcp_seg_copy>
 800c62c:	4602      	mov	r2, r0
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	675a      	str	r2, [r3, #116]	@ 0x74
 800c632:	e16c      	b.n	800c90e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c634:	2300      	movs	r3, #0
 800c636:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c63c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c63e:	e156      	b.n	800c8ee <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	4b41      	ldr	r3, [pc, #260]	@ (800c74c <tcp_receive+0xd00>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d11d      	bne.n	800c68a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c64e:	4b3e      	ldr	r3, [pc, #248]	@ (800c748 <tcp_receive+0xcfc>)
 800c650:	891a      	ldrh	r2, [r3, #8]
 800c652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c654:	891b      	ldrh	r3, [r3, #8]
 800c656:	429a      	cmp	r2, r3
 800c658:	f240 814e 	bls.w	800c8f8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c65c:	483a      	ldr	r0, [pc, #232]	@ (800c748 <tcp_receive+0xcfc>)
 800c65e:	f7fd fba1 	bl	8009da4 <tcp_seg_copy>
 800c662:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 8148 	beq.w	800c8fc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	e002      	b.n	800c680 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c680:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c682:	6978      	ldr	r0, [r7, #20]
 800c684:	f7ff f8de 	bl	800b844 <tcp_oos_insert_segment>
                }
                break;
 800c688:	e138      	b.n	800c8fc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d117      	bne.n	800c6c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c690:	4b2e      	ldr	r3, [pc, #184]	@ (800c74c <tcp_receive+0xd00>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da57      	bge.n	800c750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6a0:	4829      	ldr	r0, [pc, #164]	@ (800c748 <tcp_receive+0xcfc>)
 800c6a2:	f7fd fb7f 	bl	8009da4 <tcp_seg_copy>
 800c6a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 8128 	beq.w	800c900 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c6b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c6b8:	69b8      	ldr	r0, [r7, #24]
 800c6ba:	f7ff f8c3 	bl	800b844 <tcp_oos_insert_segment>
                  }
                  break;
 800c6be:	e11f      	b.n	800c900 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c6c0:	4b22      	ldr	r3, [pc, #136]	@ (800c74c <tcp_receive+0xd00>)
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	db3e      	blt.n	800c750 <tcp_receive+0xd04>
 800c6d2:	4b1e      	ldr	r3, [pc, #120]	@ (800c74c <tcp_receive+0xd00>)
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	3301      	adds	r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	dc35      	bgt.n	800c750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6e4:	4818      	ldr	r0, [pc, #96]	@ (800c748 <tcp_receive+0xcfc>)
 800c6e6:	f7fd fb5d 	bl	8009da4 <tcp_seg_copy>
 800c6ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 8108 	beq.w	800c904 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6fc:	8912      	ldrh	r2, [r2, #8]
 800c6fe:	441a      	add	r2, r3
 800c700:	4b12      	ldr	r3, [pc, #72]	@ (800c74c <tcp_receive+0xd00>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	dd12      	ble.n	800c730 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c70a:	4b10      	ldr	r3, [pc, #64]	@ (800c74c <tcp_receive+0xd00>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	b29a      	uxth	r2, r3
 800c710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	b29b      	uxth	r3, r3
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c71e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c726:	891b      	ldrh	r3, [r3, #8]
 800c728:	4619      	mov	r1, r3
 800c72a:	4610      	mov	r0, r2
 800c72c:	f7fb ff16 	bl	800855c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c736:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c738:	69f8      	ldr	r0, [r7, #28]
 800c73a:	f7ff f883 	bl	800b844 <tcp_oos_insert_segment>
                  }
                  break;
 800c73e:	e0e1      	b.n	800c904 <tcp_receive+0xeb8>
 800c740:	20007dbc 	.word	0x20007dbc
 800c744:	20007db9 	.word	0x20007db9
 800c748:	20007d8c 	.word	0x20007d8c
 800c74c:	20007dac 	.word	0x20007dac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c752:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f040 80c5 	bne.w	800c8e8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c75e:	4b7f      	ldr	r3, [pc, #508]	@ (800c95c <tcp_receive+0xf10>)
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f340 80bc 	ble.w	800c8e8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	899b      	ldrh	r3, [r3, #12]
 800c776:	b29b      	uxth	r3, r3
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f8 fa53 	bl	8004c24 <lwip_htons>
 800c77e:	4603      	mov	r3, r0
 800c780:	b2db      	uxtb	r3, r3
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b00      	cmp	r3, #0
 800c788:	f040 80be 	bne.w	800c908 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c78c:	4874      	ldr	r0, [pc, #464]	@ (800c960 <tcp_receive+0xf14>)
 800c78e:	f7fd fb09 	bl	8009da4 <tcp_seg_copy>
 800c792:	4602      	mov	r2, r0
 800c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c796:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 80b5 	beq.w	800c90c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7aa:	8912      	ldrh	r2, [r2, #8]
 800c7ac:	441a      	add	r2, r3
 800c7ae:	4b6b      	ldr	r3, [pc, #428]	@ (800c95c <tcp_receive+0xf10>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dd12      	ble.n	800c7de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c7b8:	4b68      	ldr	r3, [pc, #416]	@ (800c95c <tcp_receive+0xf10>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d4:	891b      	ldrh	r3, [r3, #8]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7fb febf 	bl	800855c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c7de:	4b61      	ldr	r3, [pc, #388]	@ (800c964 <tcp_receive+0xf18>)
 800c7e0:	881b      	ldrh	r3, [r3, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4b5d      	ldr	r3, [pc, #372]	@ (800c95c <tcp_receive+0xf10>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	441a      	add	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c7f2:	440b      	add	r3, r1
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f340 8088 	ble.w	800c90c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	899b      	ldrh	r3, [r3, #12]
 800c804:	b29b      	uxth	r3, r3
 800c806:	4618      	mov	r0, r3
 800c808:	f7f8 fa0c 	bl	8004c24 <lwip_htons>
 800c80c:	4603      	mov	r3, r0
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	d021      	beq.n	800c85c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	899b      	ldrh	r3, [r3, #12]
 800c820:	b29b      	uxth	r3, r3
 800c822:	b21b      	sxth	r3, r3
 800c824:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c828:	b21c      	sxth	r4, r3
 800c82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	899b      	ldrh	r3, [r3, #12]
 800c832:	b29b      	uxth	r3, r3
 800c834:	4618      	mov	r0, r3
 800c836:	f7f8 f9f5 	bl	8004c24 <lwip_htons>
 800c83a:	4603      	mov	r3, r0
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c842:	b29b      	uxth	r3, r3
 800c844:	4618      	mov	r0, r3
 800c846:	f7f8 f9ed 	bl	8004c24 <lwip_htons>
 800c84a:	4603      	mov	r3, r0
 800c84c:	b21b      	sxth	r3, r3
 800c84e:	4323      	orrs	r3, r4
 800c850:	b21a      	sxth	r2, r3
 800c852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	b292      	uxth	r2, r2
 800c85a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c866:	4413      	add	r3, r2
 800c868:	b299      	uxth	r1, r3
 800c86a:	4b3c      	ldr	r3, [pc, #240]	@ (800c95c <tcp_receive+0xf10>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	b29a      	uxth	r2, r3
 800c870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	1a8a      	subs	r2, r1, r2
 800c876:	b292      	uxth	r2, r2
 800c878:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	891b      	ldrh	r3, [r3, #8]
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fb fe67 	bl	800855c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	891c      	ldrh	r4, [r3, #8]
 800c894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	899b      	ldrh	r3, [r3, #12]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f8 f9c0 	bl	8004c24 <lwip_htons>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	f003 0303 	and.w	r3, r3, #3
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <tcp_receive+0xe68>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e000      	b.n	800c8b6 <tcp_receive+0xe6a>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4423      	add	r3, r4
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	4b2a      	ldr	r3, [pc, #168]	@ (800c964 <tcp_receive+0xf18>)
 800c8bc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c8be:	4b29      	ldr	r3, [pc, #164]	@ (800c964 <tcp_receive+0xf18>)
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4b25      	ldr	r3, [pc, #148]	@ (800c95c <tcp_receive+0xf10>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ce:	6879      	ldr	r1, [r7, #4]
 800c8d0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c8d2:	440b      	add	r3, r1
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d019      	beq.n	800c90c <tcp_receive+0xec0>
 800c8d8:	4b23      	ldr	r3, [pc, #140]	@ (800c968 <tcp_receive+0xf1c>)
 800c8da:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c8de:	4923      	ldr	r1, [pc, #140]	@ (800c96c <tcp_receive+0xf20>)
 800c8e0:	4823      	ldr	r0, [pc, #140]	@ (800c970 <tcp_receive+0xf24>)
 800c8e2:	f002 fa8f 	bl	800ee04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c8e6:	e011      	b.n	800c90c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f47f aea5 	bne.w	800c640 <tcp_receive+0xbf4>
 800c8f6:	e00a      	b.n	800c90e <tcp_receive+0xec2>
                break;
 800c8f8:	bf00      	nop
 800c8fa:	e008      	b.n	800c90e <tcp_receive+0xec2>
                break;
 800c8fc:	bf00      	nop
 800c8fe:	e006      	b.n	800c90e <tcp_receive+0xec2>
                  break;
 800c900:	bf00      	nop
 800c902:	e004      	b.n	800c90e <tcp_receive+0xec2>
                  break;
 800c904:	bf00      	nop
 800c906:	e002      	b.n	800c90e <tcp_receive+0xec2>
                  break;
 800c908:	bf00      	nop
 800c90a:	e000      	b.n	800c90e <tcp_receive+0xec2>
                break;
 800c90c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 fa30 	bl	800dd74 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c914:	e003      	b.n	800c91e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f001 fa2c 	bl	800dd74 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c91c:	e01a      	b.n	800c954 <tcp_receive+0xf08>
 800c91e:	e019      	b.n	800c954 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c920:	4b0e      	ldr	r3, [pc, #56]	@ (800c95c <tcp_receive+0xf10>)
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	db0a      	blt.n	800c944 <tcp_receive+0xef8>
 800c92e:	4b0b      	ldr	r3, [pc, #44]	@ (800c95c <tcp_receive+0xf10>)
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c93a:	440b      	add	r3, r1
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	3301      	adds	r3, #1
 800c940:	2b00      	cmp	r3, #0
 800c942:	dd07      	ble.n	800c954 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	8b5b      	ldrh	r3, [r3, #26]
 800c948:	f043 0302 	orr.w	r3, r3, #2
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c952:	e7ff      	b.n	800c954 <tcp_receive+0xf08>
 800c954:	bf00      	nop
 800c956:	3750      	adds	r7, #80	@ 0x50
 800c958:	46bd      	mov	sp, r7
 800c95a:	bdb0      	pop	{r4, r5, r7, pc}
 800c95c:	20007dac 	.word	0x20007dac
 800c960:	20007d8c 	.word	0x20007d8c
 800c964:	20007db6 	.word	0x20007db6
 800c968:	08011b04 	.word	0x08011b04
 800c96c:	08011ee4 	.word	0x08011ee4
 800c970:	08011b88 	.word	0x08011b88

0800c974 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c97a:	4b15      	ldr	r3, [pc, #84]	@ (800c9d0 <tcp_get_next_optbyte+0x5c>)
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	b291      	uxth	r1, r2
 800c982:	4a13      	ldr	r2, [pc, #76]	@ (800c9d0 <tcp_get_next_optbyte+0x5c>)
 800c984:	8011      	strh	r1, [r2, #0]
 800c986:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c988:	4b12      	ldr	r3, [pc, #72]	@ (800c9d4 <tcp_get_next_optbyte+0x60>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d004      	beq.n	800c99a <tcp_get_next_optbyte+0x26>
 800c990:	4b11      	ldr	r3, [pc, #68]	@ (800c9d8 <tcp_get_next_optbyte+0x64>)
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	88fa      	ldrh	r2, [r7, #6]
 800c996:	429a      	cmp	r2, r3
 800c998:	d208      	bcs.n	800c9ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c99a:	4b10      	ldr	r3, [pc, #64]	@ (800c9dc <tcp_get_next_optbyte+0x68>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3314      	adds	r3, #20
 800c9a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c9a2:	88fb      	ldrh	r3, [r7, #6]
 800c9a4:	683a      	ldr	r2, [r7, #0]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	e00b      	b.n	800c9c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c9ac:	88fb      	ldrh	r3, [r7, #6]
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	4b09      	ldr	r3, [pc, #36]	@ (800c9d8 <tcp_get_next_optbyte+0x64>)
 800c9b2:	881b      	ldrh	r3, [r3, #0]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c9ba:	4b06      	ldr	r3, [pc, #24]	@ (800c9d4 <tcp_get_next_optbyte+0x60>)
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	797b      	ldrb	r3, [r7, #5]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	20007da8 	.word	0x20007da8
 800c9d4:	20007da4 	.word	0x20007da4
 800c9d8:	20007da2 	.word	0x20007da2
 800c9dc:	20007d9c 	.word	0x20007d9c

0800c9e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <tcp_parseopt+0x1c>
 800c9ee:	4b32      	ldr	r3, [pc, #200]	@ (800cab8 <tcp_parseopt+0xd8>)
 800c9f0:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c9f4:	4931      	ldr	r1, [pc, #196]	@ (800cabc <tcp_parseopt+0xdc>)
 800c9f6:	4832      	ldr	r0, [pc, #200]	@ (800cac0 <tcp_parseopt+0xe0>)
 800c9f8:	f002 fa04 	bl	800ee04 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c9fc:	4b31      	ldr	r3, [pc, #196]	@ (800cac4 <tcp_parseopt+0xe4>)
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d056      	beq.n	800cab2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca04:	4b30      	ldr	r3, [pc, #192]	@ (800cac8 <tcp_parseopt+0xe8>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	801a      	strh	r2, [r3, #0]
 800ca0a:	e046      	b.n	800ca9a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800ca0c:	f7ff ffb2 	bl	800c974 <tcp_get_next_optbyte>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d006      	beq.n	800ca28 <tcp_parseopt+0x48>
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	dc2a      	bgt.n	800ca74 <tcp_parseopt+0x94>
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d042      	beq.n	800caa8 <tcp_parseopt+0xc8>
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d038      	beq.n	800ca98 <tcp_parseopt+0xb8>
 800ca26:	e025      	b.n	800ca74 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ca28:	f7ff ffa4 	bl	800c974 <tcp_get_next_optbyte>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d13c      	bne.n	800caac <tcp_parseopt+0xcc>
 800ca32:	4b25      	ldr	r3, [pc, #148]	@ (800cac8 <tcp_parseopt+0xe8>)
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	3301      	adds	r3, #1
 800ca38:	4a22      	ldr	r2, [pc, #136]	@ (800cac4 <tcp_parseopt+0xe4>)
 800ca3a:	8812      	ldrh	r2, [r2, #0]
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	da35      	bge.n	800caac <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ca40:	f7ff ff98 	bl	800c974 <tcp_get_next_optbyte>
 800ca44:	4603      	mov	r3, r0
 800ca46:	021b      	lsls	r3, r3, #8
 800ca48:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ca4a:	f7ff ff93 	bl	800c974 <tcp_get_next_optbyte>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	461a      	mov	r2, r3
 800ca52:	89bb      	ldrh	r3, [r7, #12]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ca58:	89bb      	ldrh	r3, [r7, #12]
 800ca5a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ca5e:	d804      	bhi.n	800ca6a <tcp_parseopt+0x8a>
 800ca60:	89bb      	ldrh	r3, [r7, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <tcp_parseopt+0x8a>
 800ca66:	89ba      	ldrh	r2, [r7, #12]
 800ca68:	e001      	b.n	800ca6e <tcp_parseopt+0x8e>
 800ca6a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ca72:	e012      	b.n	800ca9a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ca74:	f7ff ff7e 	bl	800c974 <tcp_get_next_optbyte>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ca7c:	7afb      	ldrb	r3, [r7, #11]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d916      	bls.n	800cab0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ca82:	7afb      	ldrb	r3, [r7, #11]
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	4b10      	ldr	r3, [pc, #64]	@ (800cac8 <tcp_parseopt+0xe8>)
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	3b02      	subs	r3, #2
 800ca90:	b29a      	uxth	r2, r3
 800ca92:	4b0d      	ldr	r3, [pc, #52]	@ (800cac8 <tcp_parseopt+0xe8>)
 800ca94:	801a      	strh	r2, [r3, #0]
 800ca96:	e000      	b.n	800ca9a <tcp_parseopt+0xba>
          break;
 800ca98:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cac8 <tcp_parseopt+0xe8>)
 800ca9c:	881a      	ldrh	r2, [r3, #0]
 800ca9e:	4b09      	ldr	r3, [pc, #36]	@ (800cac4 <tcp_parseopt+0xe4>)
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d3b2      	bcc.n	800ca0c <tcp_parseopt+0x2c>
 800caa6:	e004      	b.n	800cab2 <tcp_parseopt+0xd2>
          return;
 800caa8:	bf00      	nop
 800caaa:	e002      	b.n	800cab2 <tcp_parseopt+0xd2>
            return;
 800caac:	bf00      	nop
 800caae:	e000      	b.n	800cab2 <tcp_parseopt+0xd2>
            return;
 800cab0:	bf00      	nop
      }
    }
  }
}
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	08011b04 	.word	0x08011b04
 800cabc:	08011fa0 	.word	0x08011fa0
 800cac0:	08011b88 	.word	0x08011b88
 800cac4:	20007da0 	.word	0x20007da0
 800cac8:	20007da8 	.word	0x20007da8

0800cacc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cad0:	4b05      	ldr	r3, [pc, #20]	@ (800cae8 <tcp_trigger_input_pcb_close+0x1c>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	f043 0310 	orr.w	r3, r3, #16
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	4b03      	ldr	r3, [pc, #12]	@ (800cae8 <tcp_trigger_input_pcb_close+0x1c>)
 800cadc:	701a      	strb	r2, [r3, #0]
}
 800cade:	bf00      	nop
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	20007db9 	.word	0x20007db9

0800caec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00a      	beq.n	800cb14 <tcp_route+0x28>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	7a1b      	ldrb	r3, [r3, #8]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d006      	beq.n	800cb14 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	7a1b      	ldrb	r3, [r3, #8]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fb fb4c 	bl	80081a8 <netif_get_by_index>
 800cb10:	4603      	mov	r3, r0
 800cb12:	e003      	b.n	800cb1c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7f9 fa7b 	bl	8006010 <ip4_route>
 800cb1a:	4603      	mov	r3, r0
  }
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cb24:	b590      	push	{r4, r7, lr}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	603b      	str	r3, [r7, #0]
 800cb30:	4613      	mov	r3, r2
 800cb32:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d105      	bne.n	800cb46 <tcp_create_segment+0x22>
 800cb3a:	4b43      	ldr	r3, [pc, #268]	@ (800cc48 <tcp_create_segment+0x124>)
 800cb3c:	22a3      	movs	r2, #163	@ 0xa3
 800cb3e:	4943      	ldr	r1, [pc, #268]	@ (800cc4c <tcp_create_segment+0x128>)
 800cb40:	4843      	ldr	r0, [pc, #268]	@ (800cc50 <tcp_create_segment+0x12c>)
 800cb42:	f002 f95f 	bl	800ee04 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d105      	bne.n	800cb58 <tcp_create_segment+0x34>
 800cb4c:	4b3e      	ldr	r3, [pc, #248]	@ (800cc48 <tcp_create_segment+0x124>)
 800cb4e:	22a4      	movs	r2, #164	@ 0xa4
 800cb50:	4940      	ldr	r1, [pc, #256]	@ (800cc54 <tcp_create_segment+0x130>)
 800cb52:	483f      	ldr	r0, [pc, #252]	@ (800cc50 <tcp_create_segment+0x12c>)
 800cb54:	f002 f956 	bl	800ee04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cb66:	2003      	movs	r0, #3
 800cb68:	f7fa ff98 	bl	8007a9c <memp_malloc>
 800cb6c:	6138      	str	r0, [r7, #16]
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d104      	bne.n	800cb7e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cb74:	68b8      	ldr	r0, [r7, #8]
 800cb76:	f7fb fe77 	bl	8008868 <pbuf_free>
    return NULL;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e060      	b.n	800cc40 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cb84:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	891a      	ldrh	r2, [r3, #8]
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d205      	bcs.n	800cbaa <tcp_create_segment+0x86>
 800cb9e:	4b2a      	ldr	r3, [pc, #168]	@ (800cc48 <tcp_create_segment+0x124>)
 800cba0:	22b0      	movs	r2, #176	@ 0xb0
 800cba2:	492d      	ldr	r1, [pc, #180]	@ (800cc58 <tcp_create_segment+0x134>)
 800cba4:	482a      	ldr	r0, [pc, #168]	@ (800cc50 <tcp_create_segment+0x12c>)
 800cba6:	f002 f92d 	bl	800ee04 <iprintf>
  seg->len = p->tot_len - optlen;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	891a      	ldrh	r2, [r3, #8]
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cbba:	2114      	movs	r1, #20
 800cbbc:	68b8      	ldr	r0, [r7, #8]
 800cbbe:	f7fb fdbd 	bl	800873c <pbuf_add_header>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d004      	beq.n	800cbd2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cbc8:	6938      	ldr	r0, [r7, #16]
 800cbca:	f7fd f8d2 	bl	8009d72 <tcp_seg_free>
    return NULL;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e036      	b.n	800cc40 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8ada      	ldrh	r2, [r3, #22]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	68dc      	ldr	r4, [r3, #12]
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f7f8 f81d 	bl	8004c24 <lwip_htons>
 800cbea:	4603      	mov	r3, r0
 800cbec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	8b1a      	ldrh	r2, [r3, #24]
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	68dc      	ldr	r4, [r3, #12]
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	f7f8 f814 	bl	8004c24 <lwip_htons>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	68dc      	ldr	r4, [r3, #12]
 800cc04:	6838      	ldr	r0, [r7, #0]
 800cc06:	f7f8 f823 	bl	8004c50 <lwip_htonl>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	089b      	lsrs	r3, r3, #2
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	3305      	adds	r3, #5
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	031b      	lsls	r3, r3, #12
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	4313      	orrs	r3, r2
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	68dc      	ldr	r4, [r3, #12]
 800cc28:	4610      	mov	r0, r2
 800cc2a:	f7f7 fffb 	bl	8004c24 <lwip_htons>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	749a      	strb	r2, [r3, #18]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	74da      	strb	r2, [r3, #19]
  return seg;
 800cc3e:	693b      	ldr	r3, [r7, #16]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	371c      	adds	r7, #28
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}
 800cc48:	08011fbc 	.word	0x08011fbc
 800cc4c:	08012028 	.word	0x08012028
 800cc50:	08012048 	.word	0x08012048
 800cc54:	08012070 	.word	0x08012070
 800cc58:	08012094 	.word	0x08012094

0800cc5c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cc5c:	b590      	push	{r4, r7, lr}
 800cc5e:	b08b      	sub	sp, #44	@ 0x2c
 800cc60:	af02      	add	r7, sp, #8
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	61fb      	str	r3, [r7, #28]
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d106      	bne.n	800cc88 <tcp_split_unsent_seg+0x2c>
 800cc7a:	4b95      	ldr	r3, [pc, #596]	@ (800ced0 <tcp_split_unsent_seg+0x274>)
 800cc7c:	f240 324b 	movw	r2, #843	@ 0x34b
 800cc80:	4994      	ldr	r1, [pc, #592]	@ (800ced4 <tcp_split_unsent_seg+0x278>)
 800cc82:	4895      	ldr	r0, [pc, #596]	@ (800ced8 <tcp_split_unsent_seg+0x27c>)
 800cc84:	f002 f8be 	bl	800ee04 <iprintf>

  useg = pcb->unsent;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc8c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d102      	bne.n	800cc9a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cc94:	f04f 33ff 	mov.w	r3, #4294967295
 800cc98:	e116      	b.n	800cec8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cc9a:	887b      	ldrh	r3, [r7, #2]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d109      	bne.n	800ccb4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cca0:	4b8b      	ldr	r3, [pc, #556]	@ (800ced0 <tcp_split_unsent_seg+0x274>)
 800cca2:	f240 3253 	movw	r2, #851	@ 0x353
 800cca6:	498d      	ldr	r1, [pc, #564]	@ (800cedc <tcp_split_unsent_seg+0x280>)
 800cca8:	488b      	ldr	r0, [pc, #556]	@ (800ced8 <tcp_split_unsent_seg+0x27c>)
 800ccaa:	f002 f8ab 	bl	800ee04 <iprintf>
    return ERR_VAL;
 800ccae:	f06f 0305 	mvn.w	r3, #5
 800ccb2:	e109      	b.n	800cec8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	891b      	ldrh	r3, [r3, #8]
 800ccb8:	887a      	ldrh	r2, [r7, #2]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d301      	bcc.n	800ccc2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	e102      	b.n	800cec8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ccc6:	887a      	ldrh	r2, [r7, #2]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d906      	bls.n	800ccda <tcp_split_unsent_seg+0x7e>
 800cccc:	4b80      	ldr	r3, [pc, #512]	@ (800ced0 <tcp_split_unsent_seg+0x274>)
 800ccce:	f240 325b 	movw	r2, #859	@ 0x35b
 800ccd2:	4983      	ldr	r1, [pc, #524]	@ (800cee0 <tcp_split_unsent_seg+0x284>)
 800ccd4:	4880      	ldr	r0, [pc, #512]	@ (800ced8 <tcp_split_unsent_seg+0x27c>)
 800ccd6:	f002 f895 	bl	800ee04 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	891b      	ldrh	r3, [r3, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <tcp_split_unsent_seg+0x94>
 800cce2:	4b7b      	ldr	r3, [pc, #492]	@ (800ced0 <tcp_split_unsent_seg+0x274>)
 800cce4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800cce8:	497e      	ldr	r1, [pc, #504]	@ (800cee4 <tcp_split_unsent_seg+0x288>)
 800ccea:	487b      	ldr	r0, [pc, #492]	@ (800ced8 <tcp_split_unsent_seg+0x27c>)
 800ccec:	f002 f88a 	bl	800ee04 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	7a9b      	ldrb	r3, [r3, #10]
 800ccf4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 0304 	and.w	r3, r3, #4
 800cd00:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	891a      	ldrh	r2, [r3, #8]
 800cd06:	887b      	ldrh	r3, [r7, #2]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	89bb      	ldrh	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	2036      	movs	r0, #54	@ 0x36
 800cd1e:	f7fb fabf 	bl	80082a0 <pbuf_alloc>
 800cd22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 80b7 	beq.w	800ce9a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	891a      	ldrh	r2, [r3, #8]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	891b      	ldrh	r3, [r3, #8]
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	887b      	ldrh	r3, [r7, #2]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	6858      	ldr	r0, [r3, #4]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	685a      	ldr	r2, [r3, #4]
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
 800cd4a:	18d1      	adds	r1, r2, r3
 800cd4c:	897b      	ldrh	r3, [r7, #10]
 800cd4e:	89ba      	ldrh	r2, [r7, #12]
 800cd50:	f7fb ff84 	bl	8008c5c <pbuf_copy_partial>
 800cd54:	4603      	mov	r3, r0
 800cd56:	461a      	mov	r2, r3
 800cd58:	89bb      	ldrh	r3, [r7, #12]
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	f040 809f 	bne.w	800ce9e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	899b      	ldrh	r3, [r3, #12]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7f7 ff5b 	bl	8004c24 <lwip_htons>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd76:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cd78:	2300      	movs	r3, #0
 800cd7a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cd7c:	7efb      	ldrb	r3, [r7, #27]
 800cd7e:	f003 0308 	and.w	r3, r3, #8
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d007      	beq.n	800cd96 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cd86:	7efb      	ldrb	r3, [r7, #27]
 800cd88:	f023 0308 	bic.w	r3, r3, #8
 800cd8c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cd8e:	7ebb      	ldrb	r3, [r7, #26]
 800cd90:	f043 0308 	orr.w	r3, r3, #8
 800cd94:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cd96:	7efb      	ldrb	r3, [r7, #27]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d007      	beq.n	800cdb0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cda0:	7efb      	ldrb	r3, [r7, #27]
 800cda2:	f023 0301 	bic.w	r3, r3, #1
 800cda6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cda8:	7ebb      	ldrb	r3, [r7, #26]
 800cdaa:	f043 0301 	orr.w	r3, r3, #1
 800cdae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7f7 ff4a 	bl	8004c50 <lwip_htonl>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	887b      	ldrh	r3, [r7, #2]
 800cdc0:	18d1      	adds	r1, r2, r3
 800cdc2:	7eba      	ldrb	r2, [r7, #26]
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	6939      	ldr	r1, [r7, #16]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff fea9 	bl	800cb24 <tcp_create_segment>
 800cdd2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d063      	beq.n	800cea2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fb fdca 	bl	8008978 <pbuf_clen>
 800cde4:	4603      	mov	r3, r0
 800cde6:	461a      	mov	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdee:	1a9b      	subs	r3, r3, r2
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	6858      	ldr	r0, [r3, #4]
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	891a      	ldrh	r2, [r3, #8]
 800ce02:	89bb      	ldrh	r3, [r7, #12]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	4619      	mov	r1, r3
 800ce0a:	f7fb fba7 	bl	800855c <pbuf_realloc>
  useg->len -= remainder;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	891a      	ldrh	r2, [r3, #8]
 800ce12:	89bb      	ldrh	r3, [r7, #12]
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	899b      	ldrh	r3, [r3, #12]
 800ce22:	b29c      	uxth	r4, r3
 800ce24:	7efb      	ldrb	r3, [r7, #27]
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7f7 fefb 	bl	8004c24 <lwip_htons>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	461a      	mov	r2, r3
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	4322      	orrs	r2, r4
 800ce38:	b292      	uxth	r2, r2
 800ce3a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fb fd99 	bl	8008978 <pbuf_clen>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ce50:	4413      	add	r3, r2
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fb fd8a 	bl	8008978 <pbuf_clen>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ce6e:	4413      	add	r3, r2
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	69fa      	ldr	r2, [r7, #28]
 800ce84:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d103      	bne.n	800ce96 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ce96:	2300      	movs	r3, #0
 800ce98:	e016      	b.n	800cec8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ce9a:	bf00      	nop
 800ce9c:	e002      	b.n	800cea4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ce9e:	bf00      	nop
 800cea0:	e000      	b.n	800cea4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cea2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <tcp_split_unsent_seg+0x25c>
 800ceaa:	4b09      	ldr	r3, [pc, #36]	@ (800ced0 <tcp_split_unsent_seg+0x274>)
 800ceac:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ceb0:	490d      	ldr	r1, [pc, #52]	@ (800cee8 <tcp_split_unsent_seg+0x28c>)
 800ceb2:	4809      	ldr	r0, [pc, #36]	@ (800ced8 <tcp_split_unsent_seg+0x27c>)
 800ceb4:	f001 ffa6 	bl	800ee04 <iprintf>
  if (p != NULL) {
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d002      	beq.n	800cec4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cebe:	6938      	ldr	r0, [r7, #16]
 800cec0:	f7fb fcd2 	bl	8008868 <pbuf_free>
  }

  return ERR_MEM;
 800cec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3724      	adds	r7, #36	@ 0x24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}
 800ced0:	08011fbc 	.word	0x08011fbc
 800ced4:	08012388 	.word	0x08012388
 800ced8:	08012048 	.word	0x08012048
 800cedc:	080123ac 	.word	0x080123ac
 800cee0:	080123d0 	.word	0x080123d0
 800cee4:	080123e0 	.word	0x080123e0
 800cee8:	080123f0 	.word	0x080123f0

0800ceec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ceec:	b590      	push	{r4, r7, lr}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d106      	bne.n	800cf08 <tcp_send_fin+0x1c>
 800cefa:	4b21      	ldr	r3, [pc, #132]	@ (800cf80 <tcp_send_fin+0x94>)
 800cefc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cf00:	4920      	ldr	r1, [pc, #128]	@ (800cf84 <tcp_send_fin+0x98>)
 800cf02:	4821      	ldr	r0, [pc, #132]	@ (800cf88 <tcp_send_fin+0x9c>)
 800cf04:	f001 ff7e 	bl	800ee04 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d02e      	beq.n	800cf6e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	e002      	b.n	800cf1e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f8      	bne.n	800cf18 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	899b      	ldrh	r3, [r3, #12]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7f7 fe78 	bl	8004c24 <lwip_htons>
 800cf34:	4603      	mov	r3, r0
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	f003 0307 	and.w	r3, r3, #7
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d116      	bne.n	800cf6e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	899b      	ldrh	r3, [r3, #12]
 800cf46:	b29c      	uxth	r4, r3
 800cf48:	2001      	movs	r0, #1
 800cf4a:	f7f7 fe6b 	bl	8004c24 <lwip_htons>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	461a      	mov	r2, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	4322      	orrs	r2, r4
 800cf58:	b292      	uxth	r2, r2
 800cf5a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	8b5b      	ldrh	r3, [r3, #26]
 800cf60:	f043 0320 	orr.w	r3, r3, #32
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e004      	b.n	800cf78 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cf6e:	2101      	movs	r1, #1
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f80b 	bl	800cf8c <tcp_enqueue_flags>
 800cf76:	4603      	mov	r3, r0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd90      	pop	{r4, r7, pc}
 800cf80:	08011fbc 	.word	0x08011fbc
 800cf84:	080123fc 	.word	0x080123fc
 800cf88:	08012048 	.word	0x08012048

0800cf8c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b08a      	sub	sp, #40	@ 0x28
 800cf90:	af02      	add	r7, sp, #8
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cfa0:	78fb      	ldrb	r3, [r7, #3]
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <tcp_enqueue_flags+0x2c>
 800cfaa:	4b67      	ldr	r3, [pc, #412]	@ (800d148 <tcp_enqueue_flags+0x1bc>)
 800cfac:	f240 4211 	movw	r2, #1041	@ 0x411
 800cfb0:	4966      	ldr	r1, [pc, #408]	@ (800d14c <tcp_enqueue_flags+0x1c0>)
 800cfb2:	4867      	ldr	r0, [pc, #412]	@ (800d150 <tcp_enqueue_flags+0x1c4>)
 800cfb4:	f001 ff26 	bl	800ee04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <tcp_enqueue_flags+0x40>
 800cfbe:	4b62      	ldr	r3, [pc, #392]	@ (800d148 <tcp_enqueue_flags+0x1bc>)
 800cfc0:	f240 4213 	movw	r2, #1043	@ 0x413
 800cfc4:	4963      	ldr	r1, [pc, #396]	@ (800d154 <tcp_enqueue_flags+0x1c8>)
 800cfc6:	4862      	ldr	r0, [pc, #392]	@ (800d150 <tcp_enqueue_flags+0x1c4>)
 800cfc8:	f001 ff1c 	bl	800ee04 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cfcc:	78fb      	ldrb	r3, [r7, #3]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cfda:	7ffb      	ldrb	r3, [r7, #31]
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cfe6:	7dfb      	ldrb	r3, [r7, #23]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cfee:	4619      	mov	r1, r3
 800cff0:	2036      	movs	r0, #54	@ 0x36
 800cff2:	f7fb f955 	bl	80082a0 <pbuf_alloc>
 800cff6:	6138      	str	r0, [r7, #16]
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d109      	bne.n	800d012 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	8b5b      	ldrh	r3, [r3, #26]
 800d002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d006:	b29a      	uxth	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d00c:	f04f 33ff 	mov.w	r3, #4294967295
 800d010:	e095      	b.n	800d13e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	895a      	ldrh	r2, [r3, #10]
 800d016:	7dfb      	ldrb	r3, [r7, #23]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d206      	bcs.n	800d02c <tcp_enqueue_flags+0xa0>
 800d01e:	4b4a      	ldr	r3, [pc, #296]	@ (800d148 <tcp_enqueue_flags+0x1bc>)
 800d020:	f240 4239 	movw	r2, #1081	@ 0x439
 800d024:	494c      	ldr	r1, [pc, #304]	@ (800d158 <tcp_enqueue_flags+0x1cc>)
 800d026:	484a      	ldr	r0, [pc, #296]	@ (800d150 <tcp_enqueue_flags+0x1c4>)
 800d028:	f001 feec 	bl	800ee04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800d030:	78fa      	ldrb	r2, [r7, #3]
 800d032:	7ffb      	ldrb	r3, [r7, #31]
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	460b      	mov	r3, r1
 800d038:	6939      	ldr	r1, [r7, #16]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff fd72 	bl	800cb24 <tcp_create_segment>
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d109      	bne.n	800d05c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	8b5b      	ldrh	r3, [r3, #26]
 800d04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d056:	f04f 33ff 	mov.w	r3, #4294967295
 800d05a:	e070      	b.n	800d13e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f003 0303 	and.w	r3, r3, #3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <tcp_enqueue_flags+0xea>
 800d068:	4b37      	ldr	r3, [pc, #220]	@ (800d148 <tcp_enqueue_flags+0x1bc>)
 800d06a:	f240 4242 	movw	r2, #1090	@ 0x442
 800d06e:	493b      	ldr	r1, [pc, #236]	@ (800d15c <tcp_enqueue_flags+0x1d0>)
 800d070:	4837      	ldr	r0, [pc, #220]	@ (800d150 <tcp_enqueue_flags+0x1c4>)
 800d072:	f001 fec7 	bl	800ee04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	891b      	ldrh	r3, [r3, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d006      	beq.n	800d08c <tcp_enqueue_flags+0x100>
 800d07e:	4b32      	ldr	r3, [pc, #200]	@ (800d148 <tcp_enqueue_flags+0x1bc>)
 800d080:	f240 4243 	movw	r2, #1091	@ 0x443
 800d084:	4936      	ldr	r1, [pc, #216]	@ (800d160 <tcp_enqueue_flags+0x1d4>)
 800d086:	4832      	ldr	r0, [pc, #200]	@ (800d150 <tcp_enqueue_flags+0x1c4>)
 800d088:	f001 febc 	bl	800ee04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d09a:	e00d      	b.n	800d0b8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0a0:	61bb      	str	r3, [r7, #24]
 800d0a2:	e002      	b.n	800d0aa <tcp_enqueue_flags+0x11e>
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	61bb      	str	r3, [r7, #24]
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1f8      	bne.n	800d0a4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d0c0:	78fb      	ldrb	r3, [r7, #3]
 800d0c2:	f003 0302 	and.w	r3, r3, #2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d104      	bne.n	800d0d4 <tcp_enqueue_flags+0x148>
 800d0ca:	78fb      	ldrb	r3, [r7, #3]
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0d8:	1c5a      	adds	r2, r3, #1
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d0de:	78fb      	ldrb	r3, [r7, #3]
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d006      	beq.n	800d0f6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	8b5b      	ldrh	r3, [r3, #26]
 800d0ec:	f043 0320 	orr.w	r3, r3, #32
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fb fc3c 	bl	8008978 <pbuf_clen>
 800d100:	4603      	mov	r3, r0
 800d102:	461a      	mov	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d10a:	4413      	add	r3, r2
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00e      	beq.n	800d13c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10a      	bne.n	800d13c <tcp_enqueue_flags+0x1b0>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <tcp_enqueue_flags+0x1b0>
 800d12e:	4b06      	ldr	r3, [pc, #24]	@ (800d148 <tcp_enqueue_flags+0x1bc>)
 800d130:	f240 4265 	movw	r2, #1125	@ 0x465
 800d134:	490b      	ldr	r1, [pc, #44]	@ (800d164 <tcp_enqueue_flags+0x1d8>)
 800d136:	4806      	ldr	r0, [pc, #24]	@ (800d150 <tcp_enqueue_flags+0x1c4>)
 800d138:	f001 fe64 	bl	800ee04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3720      	adds	r7, #32
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	08011fbc 	.word	0x08011fbc
 800d14c:	08012418 	.word	0x08012418
 800d150:	08012048 	.word	0x08012048
 800d154:	08012470 	.word	0x08012470
 800d158:	08012490 	.word	0x08012490
 800d15c:	080124cc 	.word	0x080124cc
 800d160:	080124e4 	.word	0x080124e4
 800d164:	08012510 	.word	0x08012510

0800d168 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d168:	b5b0      	push	{r4, r5, r7, lr}
 800d16a:	b08a      	sub	sp, #40	@ 0x28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <tcp_output+0x1c>
 800d176:	4b8a      	ldr	r3, [pc, #552]	@ (800d3a0 <tcp_output+0x238>)
 800d178:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800d17c:	4989      	ldr	r1, [pc, #548]	@ (800d3a4 <tcp_output+0x23c>)
 800d17e:	488a      	ldr	r0, [pc, #552]	@ (800d3a8 <tcp_output+0x240>)
 800d180:	f001 fe40 	bl	800ee04 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	7d1b      	ldrb	r3, [r3, #20]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d106      	bne.n	800d19a <tcp_output+0x32>
 800d18c:	4b84      	ldr	r3, [pc, #528]	@ (800d3a0 <tcp_output+0x238>)
 800d18e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800d192:	4986      	ldr	r1, [pc, #536]	@ (800d3ac <tcp_output+0x244>)
 800d194:	4884      	ldr	r0, [pc, #528]	@ (800d3a8 <tcp_output+0x240>)
 800d196:	f001 fe35 	bl	800ee04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d19a:	4b85      	ldr	r3, [pc, #532]	@ (800d3b0 <tcp_output+0x248>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d101      	bne.n	800d1a8 <tcp_output+0x40>
    return ERR_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	e1ce      	b.n	800d546 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	bf28      	it	cs
 800d1b8:	4613      	movcs	r3, r2
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10b      	bne.n	800d1e2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	8b5b      	ldrh	r3, [r3, #26]
 800d1ce:	f003 0302 	and.w	r3, r3, #2
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 81aa 	beq.w	800d52c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 fdcb 	bl	800dd74 <tcp_send_empty_ack>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	e1b1      	b.n	800d546 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d1e2:	6879      	ldr	r1, [r7, #4]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7ff fc7e 	bl	800caec <tcp_route>
 800d1f0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d102      	bne.n	800d1fe <tcp_output+0x96>
    return ERR_RTE;
 800d1f8:	f06f 0303 	mvn.w	r3, #3
 800d1fc:	e1a3      	b.n	800d546 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d003      	beq.n	800d20c <tcp_output+0xa4>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d111      	bne.n	800d230 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d002      	beq.n	800d218 <tcp_output+0xb0>
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	3304      	adds	r3, #4
 800d216:	e000      	b.n	800d21a <tcp_output+0xb2>
 800d218:	2300      	movs	r3, #0
 800d21a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d102      	bne.n	800d228 <tcp_output+0xc0>
      return ERR_RTE;
 800d222:	f06f 0303 	mvn.w	r3, #3
 800d226:	e18e      	b.n	800d546 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	4618      	mov	r0, r3
 800d238:	f7f7 fd0a 	bl	8004c50 <lwip_htonl>
 800d23c:	4602      	mov	r2, r0
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d246:	8912      	ldrh	r2, [r2, #8]
 800d248:	4413      	add	r3, r2
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d227      	bcs.n	800d2a0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d256:	461a      	mov	r2, r3
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d114      	bne.n	800d288 <tcp_output+0x120>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d262:	2b00      	cmp	r3, #0
 800d264:	d110      	bne.n	800d288 <tcp_output+0x120>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10b      	bne.n	800d288 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8b5b      	ldrh	r3, [r3, #26]
 800d28c:	f003 0302 	and.w	r3, r3, #2
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 814d 	beq.w	800d530 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 fd6c 	bl	800dd74 <tcp_send_empty_ack>
 800d29c:	4603      	mov	r3, r0
 800d29e:	e152      	b.n	800d546 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2ac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f000 811c 	beq.w	800d4ee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d2b6:	e002      	b.n	800d2be <tcp_output+0x156>
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	623b      	str	r3, [r7, #32]
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1f8      	bne.n	800d2b8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d2c6:	e112      	b.n	800d4ee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	899b      	ldrh	r3, [r3, #12]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7f7 fca7 	bl	8004c24 <lwip_htons>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 0304 	and.w	r3, r3, #4
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d006      	beq.n	800d2f0 <tcp_output+0x188>
 800d2e2:	4b2f      	ldr	r3, [pc, #188]	@ (800d3a0 <tcp_output+0x238>)
 800d2e4:	f240 5236 	movw	r2, #1334	@ 0x536
 800d2e8:	4932      	ldr	r1, [pc, #200]	@ (800d3b4 <tcp_output+0x24c>)
 800d2ea:	482f      	ldr	r0, [pc, #188]	@ (800d3a8 <tcp_output+0x240>)
 800d2ec:	f001 fd8a 	bl	800ee04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d01f      	beq.n	800d338 <tcp_output+0x1d0>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	8b5b      	ldrh	r3, [r3, #26]
 800d2fc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800d300:	2b00      	cmp	r3, #0
 800d302:	d119      	bne.n	800d338 <tcp_output+0x1d0>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d00b      	beq.n	800d324 <tcp_output+0x1bc>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d110      	bne.n	800d338 <tcp_output+0x1d0>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d31a:	891a      	ldrh	r2, [r3, #8]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d320:	429a      	cmp	r2, r3
 800d322:	d209      	bcs.n	800d338 <tcp_output+0x1d0>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d004      	beq.n	800d338 <tcp_output+0x1d0>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d334:	2b08      	cmp	r3, #8
 800d336:	d901      	bls.n	800d33c <tcp_output+0x1d4>
 800d338:	2301      	movs	r3, #1
 800d33a:	e000      	b.n	800d33e <tcp_output+0x1d6>
 800d33c:	2300      	movs	r3, #0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	8b5b      	ldrh	r3, [r3, #26]
 800d346:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 80e4 	beq.w	800d518 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	7d1b      	ldrb	r3, [r3, #20]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d00d      	beq.n	800d374 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	899b      	ldrh	r3, [r3, #12]
 800d35e:	b29c      	uxth	r4, r3
 800d360:	2010      	movs	r0, #16
 800d362:	f7f7 fc5f 	bl	8004c24 <lwip_htons>
 800d366:	4603      	mov	r3, r0
 800d368:	461a      	mov	r2, r3
 800d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	4322      	orrs	r2, r4
 800d370:	b292      	uxth	r2, r2
 800d372:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	6879      	ldr	r1, [r7, #4]
 800d378:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d37a:	f000 f909 	bl	800d590 <tcp_output_segment>
 800d37e:	4603      	mov	r3, r0
 800d380:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d016      	beq.n	800d3b8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	8b5b      	ldrh	r3, [r3, #26]
 800d38e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d392:	b29a      	uxth	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	835a      	strh	r2, [r3, #26]
      return err;
 800d398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d39c:	e0d3      	b.n	800d546 <tcp_output+0x3de>
 800d39e:	bf00      	nop
 800d3a0:	08011fbc 	.word	0x08011fbc
 800d3a4:	08012538 	.word	0x08012538
 800d3a8:	08012048 	.word	0x08012048
 800d3ac:	08012550 	.word	0x08012550
 800d3b0:	20007dc0 	.word	0x20007dc0
 800d3b4:	08012578 	.word	0x08012578
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d006      	beq.n	800d3d6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	8b5b      	ldrh	r3, [r3, #26]
 800d3cc:	f023 0303 	bic.w	r3, r3, #3
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7f7 fc37 	bl	8004c50 <lwip_htonl>
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	891b      	ldrh	r3, [r3, #8]
 800d3e8:	461d      	mov	r5, r3
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	899b      	ldrh	r3, [r3, #12]
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7f7 fc16 	bl	8004c24 <lwip_htons>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 0303 	and.w	r3, r3, #3
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <tcp_output+0x2a0>
 800d404:	2301      	movs	r3, #1
 800d406:	e000      	b.n	800d40a <tcp_output+0x2a2>
 800d408:	2300      	movs	r3, #0
 800d40a:	442b      	add	r3, r5
 800d40c:	4423      	add	r3, r4
 800d40e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	da02      	bge.n	800d422 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	891b      	ldrh	r3, [r3, #8]
 800d426:	461c      	mov	r4, r3
 800d428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	899b      	ldrh	r3, [r3, #12]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4618      	mov	r0, r3
 800d432:	f7f7 fbf7 	bl	8004c24 <lwip_htons>
 800d436:	4603      	mov	r3, r0
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	f003 0303 	and.w	r3, r3, #3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d001      	beq.n	800d446 <tcp_output+0x2de>
 800d442:	2301      	movs	r3, #1
 800d444:	e000      	b.n	800d448 <tcp_output+0x2e0>
 800d446:	2300      	movs	r3, #0
 800d448:	4423      	add	r3, r4
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d049      	beq.n	800d4e2 <tcp_output+0x37a>
      seg->next = NULL;
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d105      	bne.n	800d468 <tcp_output+0x300>
        pcb->unacked = seg;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d460:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d464:	623b      	str	r3, [r7, #32]
 800d466:	e03f      	b.n	800d4e8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7f7 fbee 	bl	8004c50 <lwip_htonl>
 800d474:	4604      	mov	r4, r0
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7f7 fbe7 	bl	8004c50 <lwip_htonl>
 800d482:	4603      	mov	r3, r0
 800d484:	1ae3      	subs	r3, r4, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	da24      	bge.n	800d4d4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	3370      	adds	r3, #112	@ 0x70
 800d48e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d490:	e002      	b.n	800d498 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d011      	beq.n	800d4c4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7f7 fbd1 	bl	8004c50 <lwip_htonl>
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7f7 fbca 	bl	8004c50 <lwip_htonl>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dbe6      	blt.n	800d492 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	e009      	b.n	800d4e8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4d8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	623b      	str	r3, [r7, #32]
 800d4e0:	e002      	b.n	800d4e8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d4e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4e4:	f7fc fc45 	bl	8009d72 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d012      	beq.n	800d51a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f7 fba8 	bl	8004c50 <lwip_htonl>
 800d500:	4602      	mov	r2, r0
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d50a:	8912      	ldrh	r2, [r2, #8]
 800d50c:	4413      	add	r3, r2
  while (seg != NULL &&
 800d50e:	69ba      	ldr	r2, [r7, #24]
 800d510:	429a      	cmp	r2, r3
 800d512:	f4bf aed9 	bcs.w	800d2c8 <tcp_output+0x160>
 800d516:	e000      	b.n	800d51a <tcp_output+0x3b2>
      break;
 800d518:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d108      	bne.n	800d534 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d52a:	e004      	b.n	800d536 <tcp_output+0x3ce>
    goto output_done;
 800d52c:	bf00      	nop
 800d52e:	e002      	b.n	800d536 <tcp_output+0x3ce>
    goto output_done;
 800d530:	bf00      	nop
 800d532:	e000      	b.n	800d536 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d534:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8b5b      	ldrh	r3, [r3, #26]
 800d53a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d53e:	b29a      	uxth	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3728      	adds	r7, #40	@ 0x28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bdb0      	pop	{r4, r5, r7, pc}
 800d54e:	bf00      	nop

0800d550 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <tcp_output_segment_busy+0x1c>
 800d55e:	4b09      	ldr	r3, [pc, #36]	@ (800d584 <tcp_output_segment_busy+0x34>)
 800d560:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d564:	4908      	ldr	r1, [pc, #32]	@ (800d588 <tcp_output_segment_busy+0x38>)
 800d566:	4809      	ldr	r0, [pc, #36]	@ (800d58c <tcp_output_segment_busy+0x3c>)
 800d568:	f001 fc4c 	bl	800ee04 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	7b9b      	ldrb	r3, [r3, #14]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d001      	beq.n	800d57a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d576:	2301      	movs	r3, #1
 800d578:	e000      	b.n	800d57c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	08011fbc 	.word	0x08011fbc
 800d588:	08012590 	.word	0x08012590
 800d58c:	08012048 	.word	0x08012048

0800d590 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d590:	b5b0      	push	{r4, r5, r7, lr}
 800d592:	b08c      	sub	sp, #48	@ 0x30
 800d594:	af04      	add	r7, sp, #16
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d106      	bne.n	800d5b0 <tcp_output_segment+0x20>
 800d5a2:	4b64      	ldr	r3, [pc, #400]	@ (800d734 <tcp_output_segment+0x1a4>)
 800d5a4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d5a8:	4963      	ldr	r1, [pc, #396]	@ (800d738 <tcp_output_segment+0x1a8>)
 800d5aa:	4864      	ldr	r0, [pc, #400]	@ (800d73c <tcp_output_segment+0x1ac>)
 800d5ac:	f001 fc2a 	bl	800ee04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <tcp_output_segment+0x34>
 800d5b6:	4b5f      	ldr	r3, [pc, #380]	@ (800d734 <tcp_output_segment+0x1a4>)
 800d5b8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d5bc:	4960      	ldr	r1, [pc, #384]	@ (800d740 <tcp_output_segment+0x1b0>)
 800d5be:	485f      	ldr	r0, [pc, #380]	@ (800d73c <tcp_output_segment+0x1ac>)
 800d5c0:	f001 fc20 	bl	800ee04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d106      	bne.n	800d5d8 <tcp_output_segment+0x48>
 800d5ca:	4b5a      	ldr	r3, [pc, #360]	@ (800d734 <tcp_output_segment+0x1a4>)
 800d5cc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d5d0:	495c      	ldr	r1, [pc, #368]	@ (800d744 <tcp_output_segment+0x1b4>)
 800d5d2:	485a      	ldr	r0, [pc, #360]	@ (800d73c <tcp_output_segment+0x1ac>)
 800d5d4:	f001 fc16 	bl	800ee04 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f7ff ffb9 	bl	800d550 <tcp_output_segment_busy>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d001      	beq.n	800d5e8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	e0a1      	b.n	800d72c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	68dc      	ldr	r4, [r3, #12]
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f7f7 fb2d 	bl	8004c50 <lwip_htonl>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	68dc      	ldr	r4, [r3, #12]
 800d602:	4610      	mov	r0, r2
 800d604:	f7f7 fb0e 	bl	8004c24 <lwip_htons>
 800d608:	4603      	mov	r3, r0
 800d60a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d614:	441a      	add	r2, r3
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	3314      	adds	r3, #20
 800d620:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	7a9b      	ldrb	r3, [r3, #10]
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d015      	beq.n	800d65a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	3304      	adds	r3, #4
 800d632:	461a      	mov	r2, r3
 800d634:	6879      	ldr	r1, [r7, #4]
 800d636:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d63a:	f7fc fe91 	bl	800a360 <tcp_eff_send_mss_netif>
 800d63e:	4603      	mov	r3, r0
 800d640:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d642:	8b7b      	ldrh	r3, [r7, #26]
 800d644:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d648:	4618      	mov	r0, r3
 800d64a:	f7f7 fb01 	bl	8004c50 <lwip_htonl>
 800d64e:	4602      	mov	r2, r0
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	3304      	adds	r3, #4
 800d658:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d660:	2b00      	cmp	r3, #0
 800d662:	da02      	bge.n	800d66a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2200      	movs	r2, #0
 800d668:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10c      	bne.n	800d68c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d672:	4b35      	ldr	r3, [pc, #212]	@ (800d748 <tcp_output_segment+0x1b8>)
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	4618      	mov	r0, r3
 800d682:	f7f7 fae5 	bl	8004c50 <lwip_htonl>
 800d686:	4602      	mov	r2, r0
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	68da      	ldr	r2, [r3, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	8959      	ldrh	r1, [r3, #10]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	8b3a      	ldrh	r2, [r7, #24]
 800d6a6:	1a8a      	subs	r2, r1, r2
 800d6a8:	b292      	uxth	r2, r2
 800d6aa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	8919      	ldrh	r1, [r3, #8]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	8b3a      	ldrh	r2, [r7, #24]
 800d6b8:	1a8a      	subs	r2, r1, r2
 800d6ba:	b292      	uxth	r2, r2
 800d6bc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	68d2      	ldr	r2, [r2, #12]
 800d6c6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	741a      	strb	r2, [r3, #16]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	68da      	ldr	r2, [r3, #12]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	7a9b      	ldrb	r3, [r3, #10]
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <tcp_output_segment+0x158>
 800d6e4:	2318      	movs	r3, #24
 800d6e6:	e000      	b.n	800d6ea <tcp_output_segment+0x15a>
 800d6e8:	2314      	movs	r3, #20
 800d6ea:	4413      	add	r3, r2
 800d6ec:	69fa      	ldr	r2, [r7, #28]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d006      	beq.n	800d700 <tcp_output_segment+0x170>
 800d6f2:	4b10      	ldr	r3, [pc, #64]	@ (800d734 <tcp_output_segment+0x1a4>)
 800d6f4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d6f8:	4914      	ldr	r1, [pc, #80]	@ (800d74c <tcp_output_segment+0x1bc>)
 800d6fa:	4810      	ldr	r0, [pc, #64]	@ (800d73c <tcp_output_segment+0x1ac>)
 800d6fc:	f001 fb82 	bl	800ee04 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6858      	ldr	r0, [r3, #4]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	1d1c      	adds	r4, r3, #4
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	7add      	ldrb	r5, [r3, #11]
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	7a9b      	ldrb	r3, [r3, #10]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	9202      	str	r2, [sp, #8]
 800d716:	2206      	movs	r2, #6
 800d718:	9201      	str	r2, [sp, #4]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	462b      	mov	r3, r5
 800d71e:	4622      	mov	r2, r4
 800d720:	f7f8 fe34 	bl	800638c <ip4_output_if>
 800d724:	4603      	mov	r3, r0
 800d726:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3720      	adds	r7, #32
 800d730:	46bd      	mov	sp, r7
 800d732:	bdb0      	pop	{r4, r5, r7, pc}
 800d734:	08011fbc 	.word	0x08011fbc
 800d738:	080125b8 	.word	0x080125b8
 800d73c:	08012048 	.word	0x08012048
 800d740:	080125d8 	.word	0x080125d8
 800d744:	080125f8 	.word	0x080125f8
 800d748:	20007d74 	.word	0x20007d74
 800d74c:	0801261c 	.word	0x0801261c

0800d750 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d750:	b5b0      	push	{r4, r5, r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <tcp_rexmit_rto_prepare+0x1c>
 800d75e:	4b31      	ldr	r3, [pc, #196]	@ (800d824 <tcp_rexmit_rto_prepare+0xd4>)
 800d760:	f240 6263 	movw	r2, #1635	@ 0x663
 800d764:	4930      	ldr	r1, [pc, #192]	@ (800d828 <tcp_rexmit_rto_prepare+0xd8>)
 800d766:	4831      	ldr	r0, [pc, #196]	@ (800d82c <tcp_rexmit_rto_prepare+0xdc>)
 800d768:	f001 fb4c 	bl	800ee04 <iprintf>

  if (pcb->unacked == NULL) {
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d770:	2b00      	cmp	r3, #0
 800d772:	d102      	bne.n	800d77a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d774:	f06f 0305 	mvn.w	r3, #5
 800d778:	e050      	b.n	800d81c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	e00b      	b.n	800d79a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fee4 	bl	800d550 <tcp_output_segment_busy>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d002      	beq.n	800d794 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d78e:	f06f 0305 	mvn.w	r3, #5
 800d792:	e043      	b.n	800d81c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1ef      	bne.n	800d782 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f7ff fed4 	bl	800d550 <tcp_output_segment_busy>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d002      	beq.n	800d7b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d7ae:	f06f 0305 	mvn.w	r3, #5
 800d7b2:	e033      	b.n	800d81c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	8b5b      	ldrh	r3, [r3, #26]
 800d7ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7f7 fa36 	bl	8004c50 <lwip_htonl>
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	891b      	ldrh	r3, [r3, #8]
 800d7ea:	461d      	mov	r5, r3
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	899b      	ldrh	r3, [r3, #12]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7f7 fa15 	bl	8004c24 <lwip_htons>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f003 0303 	and.w	r3, r3, #3
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <tcp_rexmit_rto_prepare+0xba>
 800d806:	2301      	movs	r3, #1
 800d808:	e000      	b.n	800d80c <tcp_rexmit_rto_prepare+0xbc>
 800d80a:	2300      	movs	r3, #0
 800d80c:	442b      	add	r3, r5
 800d80e:	18e2      	adds	r2, r4, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bdb0      	pop	{r4, r5, r7, pc}
 800d824:	08011fbc 	.word	0x08011fbc
 800d828:	08012630 	.word	0x08012630
 800d82c:	08012048 	.word	0x08012048

0800d830 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <tcp_rexmit_rto_commit+0x1c>
 800d83e:	4b0d      	ldr	r3, [pc, #52]	@ (800d874 <tcp_rexmit_rto_commit+0x44>)
 800d840:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d844:	490c      	ldr	r1, [pc, #48]	@ (800d878 <tcp_rexmit_rto_commit+0x48>)
 800d846:	480d      	ldr	r0, [pc, #52]	@ (800d87c <tcp_rexmit_rto_commit+0x4c>)
 800d848:	f001 fadc 	bl	800ee04 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d852:	2bff      	cmp	r3, #255	@ 0xff
 800d854:	d007      	beq.n	800d866 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d85c:	3301      	adds	r3, #1
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff fc7e 	bl	800d168 <tcp_output>
}
 800d86c:	bf00      	nop
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	08011fbc 	.word	0x08011fbc
 800d878:	08012654 	.word	0x08012654
 800d87c:	08012048 	.word	0x08012048

0800d880 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_rexmit_rto+0x1c>
 800d88e:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b8 <tcp_rexmit_rto+0x38>)
 800d890:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d894:	4909      	ldr	r1, [pc, #36]	@ (800d8bc <tcp_rexmit_rto+0x3c>)
 800d896:	480a      	ldr	r0, [pc, #40]	@ (800d8c0 <tcp_rexmit_rto+0x40>)
 800d898:	f001 fab4 	bl	800ee04 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff ff57 	bl	800d750 <tcp_rexmit_rto_prepare>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff ffc1 	bl	800d830 <tcp_rexmit_rto_commit>
  }
}
 800d8ae:	bf00      	nop
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	08011fbc 	.word	0x08011fbc
 800d8bc:	08012678 	.word	0x08012678
 800d8c0:	08012048 	.word	0x08012048

0800d8c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d8c4:	b590      	push	{r4, r7, lr}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d106      	bne.n	800d8e0 <tcp_rexmit+0x1c>
 800d8d2:	4b2f      	ldr	r3, [pc, #188]	@ (800d990 <tcp_rexmit+0xcc>)
 800d8d4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d8d8:	492e      	ldr	r1, [pc, #184]	@ (800d994 <tcp_rexmit+0xd0>)
 800d8da:	482f      	ldr	r0, [pc, #188]	@ (800d998 <tcp_rexmit+0xd4>)
 800d8dc:	f001 fa92 	bl	800ee04 <iprintf>

  if (pcb->unacked == NULL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d102      	bne.n	800d8ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d8e8:	f06f 0305 	mvn.w	r3, #5
 800d8ec:	e04c      	b.n	800d988 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d8f4:	68b8      	ldr	r0, [r7, #8]
 800d8f6:	f7ff fe2b 	bl	800d550 <tcp_output_segment_busy>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d900:	f06f 0305 	mvn.w	r3, #5
 800d904:	e040      	b.n	800d988 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	336c      	adds	r3, #108	@ 0x6c
 800d912:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d914:	e002      	b.n	800d91c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d011      	beq.n	800d948 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f7 f98f 	bl	8004c50 <lwip_htonl>
 800d932:	4604      	mov	r4, r0
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f7 f988 	bl	8004c50 <lwip_htonl>
 800d940:	4603      	mov	r3, r0
 800d942:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d944:	2b00      	cmp	r3, #0
 800d946:	dbe6      	blt.n	800d916 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d103      	bne.n	800d966 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d96c:	2bff      	cmp	r3, #255	@ 0xff
 800d96e:	d007      	beq.n	800d980 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d976:	3301      	adds	r3, #1
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd90      	pop	{r4, r7, pc}
 800d990:	08011fbc 	.word	0x08011fbc
 800d994:	08012694 	.word	0x08012694
 800d998:	08012048 	.word	0x08012048

0800d99c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d106      	bne.n	800d9b8 <tcp_rexmit_fast+0x1c>
 800d9aa:	4b2a      	ldr	r3, [pc, #168]	@ (800da54 <tcp_rexmit_fast+0xb8>)
 800d9ac:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d9b0:	4929      	ldr	r1, [pc, #164]	@ (800da58 <tcp_rexmit_fast+0xbc>)
 800d9b2:	482a      	ldr	r0, [pc, #168]	@ (800da5c <tcp_rexmit_fast+0xc0>)
 800d9b4:	f001 fa26 	bl	800ee04 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d045      	beq.n	800da4c <tcp_rexmit_fast+0xb0>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	8b5b      	ldrh	r3, [r3, #26]
 800d9c4:	f003 0304 	and.w	r3, r3, #4
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d13f      	bne.n	800da4c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7ff ff79 	bl	800d8c4 <tcp_rexmit>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d139      	bne.n	800da4c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	bf28      	it	cs
 800d9e8:	4613      	movcs	r3, r2
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da00      	bge.n	800d9f2 <tcp_rexmit_fast+0x56>
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	105b      	asrs	r3, r3, #1
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800da02:	461a      	mov	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d206      	bcs.n	800da1c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da12:	005b      	lsls	r3, r3, #1
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da26:	4619      	mov	r1, r3
 800da28:	0049      	lsls	r1, r1, #1
 800da2a:	440b      	add	r3, r1
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	4413      	add	r3, r2
 800da30:	b29a      	uxth	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	8b5b      	ldrh	r3, [r3, #26]
 800da3c:	f043 0304 	orr.w	r3, r3, #4
 800da40:	b29a      	uxth	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800da4c:	bf00      	nop
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	08011fbc 	.word	0x08011fbc
 800da58:	080126ac 	.word	0x080126ac
 800da5c:	08012048 	.word	0x08012048

0800da60 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	607b      	str	r3, [r7, #4]
 800da6a:	460b      	mov	r3, r1
 800da6c:	817b      	strh	r3, [r7, #10]
 800da6e:	4613      	mov	r3, r2
 800da70:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800da72:	897a      	ldrh	r2, [r7, #10]
 800da74:	893b      	ldrh	r3, [r7, #8]
 800da76:	4413      	add	r3, r2
 800da78:	b29b      	uxth	r3, r3
 800da7a:	3314      	adds	r3, #20
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800da82:	4619      	mov	r1, r3
 800da84:	2022      	movs	r0, #34	@ 0x22
 800da86:	f7fa fc0b 	bl	80082a0 <pbuf_alloc>
 800da8a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d04d      	beq.n	800db2e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800da92:	897b      	ldrh	r3, [r7, #10]
 800da94:	3313      	adds	r3, #19
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	8952      	ldrh	r2, [r2, #10]
 800da9a:	4293      	cmp	r3, r2
 800da9c:	db06      	blt.n	800daac <tcp_output_alloc_header_common+0x4c>
 800da9e:	4b26      	ldr	r3, [pc, #152]	@ (800db38 <tcp_output_alloc_header_common+0xd8>)
 800daa0:	f240 7223 	movw	r2, #1827	@ 0x723
 800daa4:	4925      	ldr	r1, [pc, #148]	@ (800db3c <tcp_output_alloc_header_common+0xdc>)
 800daa6:	4826      	ldr	r0, [pc, #152]	@ (800db40 <tcp_output_alloc_header_common+0xe0>)
 800daa8:	f001 f9ac 	bl	800ee04 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dab2:	8c3b      	ldrh	r3, [r7, #32]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7f7 f8b5 	bl	8004c24 <lwip_htons>
 800daba:	4603      	mov	r3, r0
 800dabc:	461a      	mov	r2, r3
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f7 f8ad 	bl	8004c24 <lwip_htons>
 800daca:	4603      	mov	r3, r0
 800dacc:	461a      	mov	r2, r3
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7f7 f8b9 	bl	8004c50 <lwip_htonl>
 800dade:	4602      	mov	r2, r0
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dae4:	897b      	ldrh	r3, [r7, #10]
 800dae6:	089b      	lsrs	r3, r3, #2
 800dae8:	b29b      	uxth	r3, r3
 800daea:	3305      	adds	r3, #5
 800daec:	b29b      	uxth	r3, r3
 800daee:	031b      	lsls	r3, r3, #12
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	4313      	orrs	r3, r2
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7f7 f891 	bl	8004c24 <lwip_htons>
 800db02:	4603      	mov	r3, r0
 800db04:	461a      	mov	r2, r3
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800db0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7f7 f889 	bl	8004c24 <lwip_htons>
 800db12:	4603      	mov	r3, r0
 800db14:	461a      	mov	r2, r3
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2200      	movs	r2, #0
 800db1e:	741a      	strb	r2, [r3, #16]
 800db20:	2200      	movs	r2, #0
 800db22:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	2200      	movs	r2, #0
 800db28:	749a      	strb	r2, [r3, #18]
 800db2a:	2200      	movs	r2, #0
 800db2c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800db2e:	697b      	ldr	r3, [r7, #20]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	08011fbc 	.word	0x08011fbc
 800db3c:	080126cc 	.word	0x080126cc
 800db40:	08012048 	.word	0x08012048

0800db44 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800db44:	b5b0      	push	{r4, r5, r7, lr}
 800db46:	b08a      	sub	sp, #40	@ 0x28
 800db48:	af04      	add	r7, sp, #16
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	607b      	str	r3, [r7, #4]
 800db4e:	460b      	mov	r3, r1
 800db50:	817b      	strh	r3, [r7, #10]
 800db52:	4613      	mov	r3, r2
 800db54:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d106      	bne.n	800db6a <tcp_output_alloc_header+0x26>
 800db5c:	4b15      	ldr	r3, [pc, #84]	@ (800dbb4 <tcp_output_alloc_header+0x70>)
 800db5e:	f240 7242 	movw	r2, #1858	@ 0x742
 800db62:	4915      	ldr	r1, [pc, #84]	@ (800dbb8 <tcp_output_alloc_header+0x74>)
 800db64:	4815      	ldr	r0, [pc, #84]	@ (800dbbc <tcp_output_alloc_header+0x78>)
 800db66:	f001 f94d 	bl	800ee04 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	8adb      	ldrh	r3, [r3, #22]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	8b12      	ldrh	r2, [r2, #24]
 800db76:	68f9      	ldr	r1, [r7, #12]
 800db78:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800db7a:	893d      	ldrh	r5, [r7, #8]
 800db7c:	897c      	ldrh	r4, [r7, #10]
 800db7e:	9103      	str	r1, [sp, #12]
 800db80:	2110      	movs	r1, #16
 800db82:	9102      	str	r1, [sp, #8]
 800db84:	9201      	str	r2, [sp, #4]
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	462a      	mov	r2, r5
 800db8c:	4621      	mov	r1, r4
 800db8e:	f7ff ff67 	bl	800da60 <tcp_output_alloc_header_common>
 800db92:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d006      	beq.n	800dba8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800dba2:	441a      	add	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800dba8:	697b      	ldr	r3, [r7, #20]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bdb0      	pop	{r4, r5, r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	08011fbc 	.word	0x08011fbc
 800dbb8:	080126fc 	.word	0x080126fc
 800dbbc:	08012048 	.word	0x08012048

0800dbc0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b088      	sub	sp, #32
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	4611      	mov	r1, r2
 800dbcc:	461a      	mov	r2, r3
 800dbce:	460b      	mov	r3, r1
 800dbd0:	71fb      	strb	r3, [r7, #7]
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d106      	bne.n	800dbee <tcp_output_fill_options+0x2e>
 800dbe0:	4b12      	ldr	r3, [pc, #72]	@ (800dc2c <tcp_output_fill_options+0x6c>)
 800dbe2:	f240 7256 	movw	r2, #1878	@ 0x756
 800dbe6:	4912      	ldr	r1, [pc, #72]	@ (800dc30 <tcp_output_fill_options+0x70>)
 800dbe8:	4812      	ldr	r0, [pc, #72]	@ (800dc34 <tcp_output_fill_options+0x74>)
 800dbea:	f001 f90b 	bl	800ee04 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	3314      	adds	r3, #20
 800dbf8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dbfa:	8bfb      	ldrh	r3, [r7, #30]
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	461a      	mov	r2, r3
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	f003 0304 	and.w	r3, r3, #4
 800dc08:	4413      	add	r3, r2
 800dc0a:	3314      	adds	r3, #20
 800dc0c:	69ba      	ldr	r2, [r7, #24]
 800dc0e:	4413      	add	r3, r2
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d006      	beq.n	800dc24 <tcp_output_fill_options+0x64>
 800dc16:	4b05      	ldr	r3, [pc, #20]	@ (800dc2c <tcp_output_fill_options+0x6c>)
 800dc18:	f240 7275 	movw	r2, #1909	@ 0x775
 800dc1c:	4906      	ldr	r1, [pc, #24]	@ (800dc38 <tcp_output_fill_options+0x78>)
 800dc1e:	4805      	ldr	r0, [pc, #20]	@ (800dc34 <tcp_output_fill_options+0x74>)
 800dc20:	f001 f8f0 	bl	800ee04 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dc24:	bf00      	nop
 800dc26:	3720      	adds	r7, #32
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	08011fbc 	.word	0x08011fbc
 800dc30:	08012724 	.word	0x08012724
 800dc34:	08012048 	.word	0x08012048
 800dc38:	0801261c 	.word	0x0801261c

0800dc3c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08a      	sub	sp, #40	@ 0x28
 800dc40:	af04      	add	r7, sp, #16
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d106      	bne.n	800dc5e <tcp_output_control_segment+0x22>
 800dc50:	4b1c      	ldr	r3, [pc, #112]	@ (800dcc4 <tcp_output_control_segment+0x88>)
 800dc52:	f240 7287 	movw	r2, #1927	@ 0x787
 800dc56:	491c      	ldr	r1, [pc, #112]	@ (800dcc8 <tcp_output_control_segment+0x8c>)
 800dc58:	481c      	ldr	r0, [pc, #112]	@ (800dccc <tcp_output_control_segment+0x90>)
 800dc5a:	f001 f8d3 	bl	800ee04 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	6879      	ldr	r1, [r7, #4]
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7fe ff42 	bl	800caec <tcp_route>
 800dc68:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dc70:	23fc      	movs	r3, #252	@ 0xfc
 800dc72:	75fb      	strb	r3, [r7, #23]
 800dc74:	e01c      	b.n	800dcb0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d006      	beq.n	800dc8a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	7adb      	ldrb	r3, [r3, #11]
 800dc80:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	7a9b      	ldrb	r3, [r3, #10]
 800dc86:	757b      	strb	r3, [r7, #21]
 800dc88:	e003      	b.n	800dc92 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dc8a:	23ff      	movs	r3, #255	@ 0xff
 800dc8c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dc92:	7dba      	ldrb	r2, [r7, #22]
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	9302      	str	r3, [sp, #8]
 800dc98:	2306      	movs	r3, #6
 800dc9a:	9301      	str	r3, [sp, #4]
 800dc9c:	7d7b      	ldrb	r3, [r7, #21]
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	4613      	mov	r3, r2
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	6879      	ldr	r1, [r7, #4]
 800dca6:	68b8      	ldr	r0, [r7, #8]
 800dca8:	f7f8 fb70 	bl	800638c <ip4_output_if>
 800dcac:	4603      	mov	r3, r0
 800dcae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dcb0:	68b8      	ldr	r0, [r7, #8]
 800dcb2:	f7fa fdd9 	bl	8008868 <pbuf_free>
  return err;
 800dcb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3718      	adds	r7, #24
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	08011fbc 	.word	0x08011fbc
 800dcc8:	0801274c 	.word	0x0801274c
 800dccc:	08012048 	.word	0x08012048

0800dcd0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dcd0:	b590      	push	{r4, r7, lr}
 800dcd2:	b08b      	sub	sp, #44	@ 0x2c
 800dcd4:	af04      	add	r7, sp, #16
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
 800dcdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d106      	bne.n	800dcf2 <tcp_rst+0x22>
 800dce4:	4b1f      	ldr	r3, [pc, #124]	@ (800dd64 <tcp_rst+0x94>)
 800dce6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800dcea:	491f      	ldr	r1, [pc, #124]	@ (800dd68 <tcp_rst+0x98>)
 800dcec:	481f      	ldr	r0, [pc, #124]	@ (800dd6c <tcp_rst+0x9c>)
 800dcee:	f001 f889 	bl	800ee04 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d106      	bne.n	800dd06 <tcp_rst+0x36>
 800dcf8:	4b1a      	ldr	r3, [pc, #104]	@ (800dd64 <tcp_rst+0x94>)
 800dcfa:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800dcfe:	491c      	ldr	r1, [pc, #112]	@ (800dd70 <tcp_rst+0xa0>)
 800dd00:	481a      	ldr	r0, [pc, #104]	@ (800dd6c <tcp_rst+0x9c>)
 800dd02:	f001 f87f 	bl	800ee04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd06:	2300      	movs	r3, #0
 800dd08:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dd0a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800dd0e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
 800dd12:	b29c      	uxth	r4, r3
 800dd14:	68b8      	ldr	r0, [r7, #8]
 800dd16:	f7f6 ff9b 	bl	8004c50 <lwip_htonl>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	8abb      	ldrh	r3, [r7, #20]
 800dd1e:	9303      	str	r3, [sp, #12]
 800dd20:	2314      	movs	r3, #20
 800dd22:	9302      	str	r3, [sp, #8]
 800dd24:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	2200      	movs	r2, #0
 800dd30:	4621      	mov	r1, r4
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff fe94 	bl	800da60 <tcp_output_alloc_header_common>
 800dd38:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00c      	beq.n	800dd5a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd40:	7dfb      	ldrb	r3, [r7, #23]
 800dd42:	2200      	movs	r2, #0
 800dd44:	6939      	ldr	r1, [r7, #16]
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f7ff ff3a 	bl	800dbc0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	6939      	ldr	r1, [r7, #16]
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f7ff ff72 	bl	800dc3c <tcp_output_control_segment>
 800dd58:	e000      	b.n	800dd5c <tcp_rst+0x8c>
    return;
 800dd5a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dd5c:	371c      	adds	r7, #28
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd90      	pop	{r4, r7, pc}
 800dd62:	bf00      	nop
 800dd64:	08011fbc 	.word	0x08011fbc
 800dd68:	08012778 	.word	0x08012778
 800dd6c:	08012048 	.word	0x08012048
 800dd70:	08012794 	.word	0x08012794

0800dd74 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dd74:	b590      	push	{r4, r7, lr}
 800dd76:	b087      	sub	sp, #28
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <tcp_send_empty_ack+0x24>
 800dd8a:	4b28      	ldr	r3, [pc, #160]	@ (800de2c <tcp_send_empty_ack+0xb8>)
 800dd8c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800dd90:	4927      	ldr	r1, [pc, #156]	@ (800de30 <tcp_send_empty_ack+0xbc>)
 800dd92:	4828      	ldr	r0, [pc, #160]	@ (800de34 <tcp_send_empty_ack+0xc0>)
 800dd94:	f001 f836 	bl	800ee04 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd98:	7dfb      	ldrb	r3, [r7, #23]
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	f003 0304 	and.w	r3, r3, #4
 800dda2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dda4:	7d7b      	ldrb	r3, [r7, #21]
 800dda6:	b29c      	uxth	r4, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7f6 ff4f 	bl	8004c50 <lwip_htonl>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff fec3 	bl	800db44 <tcp_output_alloc_header>
 800ddbe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d109      	bne.n	800ddda <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8b5b      	ldrh	r3, [r3, #26]
 800ddca:	f043 0303 	orr.w	r3, r3, #3
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ddd4:	f06f 0301 	mvn.w	r3, #1
 800ddd8:	e023      	b.n	800de22 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ddda:	7dbb      	ldrb	r3, [r7, #22]
 800dddc:	7dfa      	ldrb	r2, [r7, #23]
 800ddde:	6939      	ldr	r1, [r7, #16]
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff feed 	bl	800dbc0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	3304      	adds	r3, #4
 800ddec:	6939      	ldr	r1, [r7, #16]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff ff24 	bl	800dc3c <tcp_output_control_segment>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ddf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d007      	beq.n	800de10 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	8b5b      	ldrh	r3, [r3, #26]
 800de04:	f043 0303 	orr.w	r3, r3, #3
 800de08:	b29a      	uxth	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	835a      	strh	r2, [r3, #26]
 800de0e:	e006      	b.n	800de1e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	8b5b      	ldrh	r3, [r3, #26]
 800de14:	f023 0303 	bic.w	r3, r3, #3
 800de18:	b29a      	uxth	r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800de1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de22:	4618      	mov	r0, r3
 800de24:	371c      	adds	r7, #28
 800de26:	46bd      	mov	sp, r7
 800de28:	bd90      	pop	{r4, r7, pc}
 800de2a:	bf00      	nop
 800de2c:	08011fbc 	.word	0x08011fbc
 800de30:	080127b0 	.word	0x080127b0
 800de34:	08012048 	.word	0x08012048

0800de38 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800de38:	b590      	push	{r4, r7, lr}
 800de3a:	b087      	sub	sp, #28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de40:	2300      	movs	r3, #0
 800de42:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d106      	bne.n	800de58 <tcp_keepalive+0x20>
 800de4a:	4b18      	ldr	r3, [pc, #96]	@ (800deac <tcp_keepalive+0x74>)
 800de4c:	f640 0224 	movw	r2, #2084	@ 0x824
 800de50:	4917      	ldr	r1, [pc, #92]	@ (800deb0 <tcp_keepalive+0x78>)
 800de52:	4818      	ldr	r0, [pc, #96]	@ (800deb4 <tcp_keepalive+0x7c>)
 800de54:	f000 ffd6 	bl	800ee04 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	b29c      	uxth	r4, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de60:	3b01      	subs	r3, #1
 800de62:	4618      	mov	r0, r3
 800de64:	f7f6 fef4 	bl	8004c50 <lwip_htonl>
 800de68:	4603      	mov	r3, r0
 800de6a:	2200      	movs	r2, #0
 800de6c:	4621      	mov	r1, r4
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff fe68 	bl	800db44 <tcp_output_alloc_header>
 800de74:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800de7c:	f04f 33ff 	mov.w	r3, #4294967295
 800de80:	e010      	b.n	800dea4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	2200      	movs	r2, #0
 800de86:	6939      	ldr	r1, [r7, #16]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fe99 	bl	800dbc0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3304      	adds	r3, #4
 800de94:	6939      	ldr	r1, [r7, #16]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff fed0 	bl	800dc3c <tcp_output_control_segment>
 800de9c:	4603      	mov	r3, r0
 800de9e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	371c      	adds	r7, #28
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd90      	pop	{r4, r7, pc}
 800deac:	08011fbc 	.word	0x08011fbc
 800deb0:	080127d0 	.word	0x080127d0
 800deb4:	08012048 	.word	0x08012048

0800deb8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800deb8:	b590      	push	{r4, r7, lr}
 800deba:	b08b      	sub	sp, #44	@ 0x2c
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dec0:	2300      	movs	r3, #0
 800dec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d106      	bne.n	800deda <tcp_zero_window_probe+0x22>
 800decc:	4b4c      	ldr	r3, [pc, #304]	@ (800e000 <tcp_zero_window_probe+0x148>)
 800dece:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ded2:	494c      	ldr	r1, [pc, #304]	@ (800e004 <tcp_zero_window_probe+0x14c>)
 800ded4:	484c      	ldr	r0, [pc, #304]	@ (800e008 <tcp_zero_window_probe+0x150>)
 800ded6:	f000 ff95 	bl	800ee04 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dede:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	e086      	b.n	800dff8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800def0:	2bff      	cmp	r3, #255	@ 0xff
 800def2:	d007      	beq.n	800df04 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800defa:	3301      	adds	r3, #1
 800defc:	b2da      	uxtb	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	899b      	ldrh	r3, [r3, #12]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7f6 fe89 	bl	8004c24 <lwip_htons>
 800df12:	4603      	mov	r3, r0
 800df14:	b2db      	uxtb	r3, r3
 800df16:	f003 0301 	and.w	r3, r3, #1
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d005      	beq.n	800df2a <tcp_zero_window_probe+0x72>
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	891b      	ldrh	r3, [r3, #8]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <tcp_zero_window_probe+0x72>
 800df26:	2301      	movs	r3, #1
 800df28:	e000      	b.n	800df2c <tcp_zero_window_probe+0x74>
 800df2a:	2300      	movs	r3, #0
 800df2c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800df2e:	7ffb      	ldrb	r3, [r7, #31]
 800df30:	2b00      	cmp	r3, #0
 800df32:	bf0c      	ite	eq
 800df34:	2301      	moveq	r3, #1
 800df36:	2300      	movne	r3, #0
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800df3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df40:	b299      	uxth	r1, r3
 800df42:	6a3b      	ldr	r3, [r7, #32]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	8bba      	ldrh	r2, [r7, #28]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7ff fdfa 	bl	800db44 <tcp_output_alloc_header>
 800df50:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800df58:	f04f 33ff 	mov.w	r3, #4294967295
 800df5c:	e04c      	b.n	800dff8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800df64:	7ffb      	ldrb	r3, [r7, #31]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d011      	beq.n	800df8e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	b29b      	uxth	r3, r3
 800df70:	b21b      	sxth	r3, r3
 800df72:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800df76:	b21c      	sxth	r4, r3
 800df78:	2011      	movs	r0, #17
 800df7a:	f7f6 fe53 	bl	8004c24 <lwip_htons>
 800df7e:	4603      	mov	r3, r0
 800df80:	b21b      	sxth	r3, r3
 800df82:	4323      	orrs	r3, r4
 800df84:	b21b      	sxth	r3, r3
 800df86:	b29a      	uxth	r2, r3
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	819a      	strh	r2, [r3, #12]
 800df8c:	e010      	b.n	800dfb0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	3314      	adds	r3, #20
 800df94:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800df96:	6a3b      	ldr	r3, [r7, #32]
 800df98:	6858      	ldr	r0, [r3, #4]
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	891a      	ldrh	r2, [r3, #8]
 800dfa0:	6a3b      	ldr	r3, [r7, #32]
 800dfa2:	891b      	ldrh	r3, [r3, #8]
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	6939      	ldr	r1, [r7, #16]
 800dfac:	f7fa fe56 	bl	8008c5c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dfb0:	6a3b      	ldr	r3, [r7, #32]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7f6 fe4a 	bl	8004c50 <lwip_htonl>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	da02      	bge.n	800dfd4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfd8:	2200      	movs	r2, #0
 800dfda:	69b9      	ldr	r1, [r7, #24]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7ff fdef 	bl	800dbc0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	69b9      	ldr	r1, [r7, #24]
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff fe26 	bl	800dc3c <tcp_output_control_segment>
 800dff0:	4603      	mov	r3, r0
 800dff2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dff4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	372c      	adds	r7, #44	@ 0x2c
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd90      	pop	{r4, r7, pc}
 800e000:	08011fbc 	.word	0x08011fbc
 800e004:	080127ec 	.word	0x080127ec
 800e008:	08012048 	.word	0x08012048

0800e00c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e014:	f7fa ff10 	bl	8008e38 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e018:	4b0a      	ldr	r3, [pc, #40]	@ (800e044 <tcpip_tcp_timer+0x38>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d103      	bne.n	800e028 <tcpip_tcp_timer+0x1c>
 800e020:	4b09      	ldr	r3, [pc, #36]	@ (800e048 <tcpip_tcp_timer+0x3c>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e028:	2200      	movs	r2, #0
 800e02a:	4908      	ldr	r1, [pc, #32]	@ (800e04c <tcpip_tcp_timer+0x40>)
 800e02c:	20fa      	movs	r0, #250	@ 0xfa
 800e02e:	f000 f8f3 	bl	800e218 <sys_timeout>
 800e032:	e003      	b.n	800e03c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e034:	4b06      	ldr	r3, [pc, #24]	@ (800e050 <tcpip_tcp_timer+0x44>)
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
  }
}
 800e03a:	bf00      	nop
 800e03c:	bf00      	nop
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	20007d80 	.word	0x20007d80
 800e048:	20007d84 	.word	0x20007d84
 800e04c:	0800e00d 	.word	0x0800e00d
 800e050:	20007dcc 	.word	0x20007dcc

0800e054 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e058:	4b0a      	ldr	r3, [pc, #40]	@ (800e084 <tcp_timer_needed+0x30>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10f      	bne.n	800e080 <tcp_timer_needed+0x2c>
 800e060:	4b09      	ldr	r3, [pc, #36]	@ (800e088 <tcp_timer_needed+0x34>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d103      	bne.n	800e070 <tcp_timer_needed+0x1c>
 800e068:	4b08      	ldr	r3, [pc, #32]	@ (800e08c <tcp_timer_needed+0x38>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d007      	beq.n	800e080 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e070:	4b04      	ldr	r3, [pc, #16]	@ (800e084 <tcp_timer_needed+0x30>)
 800e072:	2201      	movs	r2, #1
 800e074:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e076:	2200      	movs	r2, #0
 800e078:	4905      	ldr	r1, [pc, #20]	@ (800e090 <tcp_timer_needed+0x3c>)
 800e07a:	20fa      	movs	r0, #250	@ 0xfa
 800e07c:	f000 f8cc 	bl	800e218 <sys_timeout>
  }
}
 800e080:	bf00      	nop
 800e082:	bd80      	pop	{r7, pc}
 800e084:	20007dcc 	.word	0x20007dcc
 800e088:	20007d80 	.word	0x20007d80
 800e08c:	20007d84 	.word	0x20007d84
 800e090:	0800e00d 	.word	0x0800e00d

0800e094 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e0a0:	2006      	movs	r0, #6
 800e0a2:	f7f9 fcfb 	bl	8007a9c <memp_malloc>
 800e0a6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d109      	bne.n	800e0c2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d151      	bne.n	800e158 <sys_timeout_abs+0xc4>
 800e0b4:	4b2a      	ldr	r3, [pc, #168]	@ (800e160 <sys_timeout_abs+0xcc>)
 800e0b6:	22be      	movs	r2, #190	@ 0xbe
 800e0b8:	492a      	ldr	r1, [pc, #168]	@ (800e164 <sys_timeout_abs+0xd0>)
 800e0ba:	482b      	ldr	r0, [pc, #172]	@ (800e168 <sys_timeout_abs+0xd4>)
 800e0bc:	f000 fea2 	bl	800ee04 <iprintf>
    return;
 800e0c0:	e04a      	b.n	800e158 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e0da:	4b24      	ldr	r3, [pc, #144]	@ (800e16c <sys_timeout_abs+0xd8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d103      	bne.n	800e0ea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e0e2:	4a22      	ldr	r2, [pc, #136]	@ (800e16c <sys_timeout_abs+0xd8>)
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	6013      	str	r3, [r2, #0]
    return;
 800e0e8:	e037      	b.n	800e15a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	4b1f      	ldr	r3, [pc, #124]	@ (800e16c <sys_timeout_abs+0xd8>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	0fdb      	lsrs	r3, r3, #31
 800e0f8:	f003 0301 	and.w	r3, r3, #1
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d007      	beq.n	800e112 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e102:	4b1a      	ldr	r3, [pc, #104]	@ (800e16c <sys_timeout_abs+0xd8>)
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e10a:	4a18      	ldr	r2, [pc, #96]	@ (800e16c <sys_timeout_abs+0xd8>)
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6013      	str	r3, [r2, #0]
 800e110:	e023      	b.n	800e15a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e112:	4b16      	ldr	r3, [pc, #88]	@ (800e16c <sys_timeout_abs+0xd8>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	617b      	str	r3, [r7, #20]
 800e118:	e01a      	b.n	800e150 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00b      	beq.n	800e13a <sys_timeout_abs+0xa6>
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	0fdb      	lsrs	r3, r3, #31
 800e130:	f003 0301 	and.w	r3, r3, #1
 800e134:	b2db      	uxtb	r3, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	d007      	beq.n	800e14a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	693a      	ldr	r2, [r7, #16]
 800e146:	601a      	str	r2, [r3, #0]
        break;
 800e148:	e007      	b.n	800e15a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	617b      	str	r3, [r7, #20]
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1e1      	bne.n	800e11a <sys_timeout_abs+0x86>
 800e156:	e000      	b.n	800e15a <sys_timeout_abs+0xc6>
    return;
 800e158:	bf00      	nop
      }
    }
  }
}
 800e15a:	3718      	adds	r7, #24
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	08012810 	.word	0x08012810
 800e164:	08012880 	.word	0x08012880
 800e168:	080128c0 	.word	0x080128c0
 800e16c:	20007dc4 	.word	0x20007dc4

0800e170 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	4798      	blx	r3

  now = sys_now();
 800e182:	f7f6 fb63 	bl	800484c <sys_now>
 800e186:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	4b0f      	ldr	r3, [pc, #60]	@ (800e1cc <lwip_cyclic_timer+0x5c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4413      	add	r3, r2
 800e192:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	0fdb      	lsrs	r3, r3, #31
 800e19c:	f003 0301 	and.w	r3, r3, #1
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d009      	beq.n	800e1ba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	4907      	ldr	r1, [pc, #28]	@ (800e1d0 <lwip_cyclic_timer+0x60>)
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7ff ff6e 	bl	800e094 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e1b8:	e004      	b.n	800e1c4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	4904      	ldr	r1, [pc, #16]	@ (800e1d0 <lwip_cyclic_timer+0x60>)
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f7ff ff68 	bl	800e094 <sys_timeout_abs>
}
 800e1c4:	bf00      	nop
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	20007dc8 	.word	0x20007dc8
 800e1d0:	0800e171 	.word	0x0800e171

0800e1d4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e1da:	2301      	movs	r3, #1
 800e1dc:	607b      	str	r3, [r7, #4]
 800e1de:	e00e      	b.n	800e1fe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e1e0:	4a0b      	ldr	r2, [pc, #44]	@ (800e210 <sys_timeouts_init+0x3c>)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	00db      	lsls	r3, r3, #3
 800e1ec:	4a08      	ldr	r2, [pc, #32]	@ (800e210 <sys_timeouts_init+0x3c>)
 800e1ee:	4413      	add	r3, r2
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	4908      	ldr	r1, [pc, #32]	@ (800e214 <sys_timeouts_init+0x40>)
 800e1f4:	f000 f810 	bl	800e218 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	607b      	str	r3, [r7, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b02      	cmp	r3, #2
 800e202:	d9ed      	bls.n	800e1e0 <sys_timeouts_init+0xc>
  }
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	08012dc0 	.word	0x08012dc0
 800e214:	0800e171 	.word	0x0800e171

0800e218 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e22a:	d306      	bcc.n	800e23a <sys_timeout+0x22>
 800e22c:	4b0a      	ldr	r3, [pc, #40]	@ (800e258 <sys_timeout+0x40>)
 800e22e:	f240 1229 	movw	r2, #297	@ 0x129
 800e232:	490a      	ldr	r1, [pc, #40]	@ (800e25c <sys_timeout+0x44>)
 800e234:	480a      	ldr	r0, [pc, #40]	@ (800e260 <sys_timeout+0x48>)
 800e236:	f000 fde5 	bl	800ee04 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e23a:	f7f6 fb07 	bl	800484c <sys_now>
 800e23e:	4602      	mov	r2, r0
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	4413      	add	r3, r2
 800e244:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	68b9      	ldr	r1, [r7, #8]
 800e24a:	6978      	ldr	r0, [r7, #20]
 800e24c:	f7ff ff22 	bl	800e094 <sys_timeout_abs>
#endif
}
 800e250:	bf00      	nop
 800e252:	3718      	adds	r7, #24
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	08012810 	.word	0x08012810
 800e25c:	080128e8 	.word	0x080128e8
 800e260:	080128c0 	.word	0x080128c0

0800e264 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e26a:	f7f6 faef 	bl	800484c <sys_now>
 800e26e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e270:	4b1a      	ldr	r3, [pc, #104]	@ (800e2dc <sys_check_timeouts+0x78>)
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <sys_check_timeouts+0x1a>
 800e27a:	f7f9 ffbb 	bl	80081f4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e27e:	4b18      	ldr	r3, [pc, #96]	@ (800e2e0 <sys_check_timeouts+0x7c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d022      	beq.n	800e2d0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	0fdb      	lsrs	r3, r3, #31
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d11a      	bne.n	800e2d4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a0f      	ldr	r2, [pc, #60]	@ (800e2e0 <sys_check_timeouts+0x7c>)
 800e2a4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	4a0b      	ldr	r2, [pc, #44]	@ (800e2e4 <sys_check_timeouts+0x80>)
 800e2b8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e2ba:	68b9      	ldr	r1, [r7, #8]
 800e2bc:	2006      	movs	r0, #6
 800e2be:	f7f9 fc5d 	bl	8007b7c <memp_free>
    if (handler != NULL) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d0d3      	beq.n	800e270 <sys_check_timeouts+0xc>
      handler(arg);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6838      	ldr	r0, [r7, #0]
 800e2cc:	4798      	blx	r3
  do {
 800e2ce:	e7cf      	b.n	800e270 <sys_check_timeouts+0xc>
      return;
 800e2d0:	bf00      	nop
 800e2d2:	e000      	b.n	800e2d6 <sys_check_timeouts+0x72>
      return;
 800e2d4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20007d71 	.word	0x20007d71
 800e2e0:	20007dc4 	.word	0x20007dc4
 800e2e4:	20007dc8 	.word	0x20007dc8

0800e2e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2ec:	f000 fc8a 	bl	800ec04 <rand>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	4b01      	ldr	r3, [pc, #4]	@ (800e308 <udp_init+0x20>)
 800e302:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e304:	bf00      	nop
 800e306:	bd80      	pop	{r7, pc}
 800e308:	20000028 	.word	0x20000028

0800e30c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e312:	2300      	movs	r3, #0
 800e314:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e316:	4b17      	ldr	r3, [pc, #92]	@ (800e374 <udp_new_port+0x68>)
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	b291      	uxth	r1, r2
 800e31e:	4a15      	ldr	r2, [pc, #84]	@ (800e374 <udp_new_port+0x68>)
 800e320:	8011      	strh	r1, [r2, #0]
 800e322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e326:	4293      	cmp	r3, r2
 800e328:	d103      	bne.n	800e332 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e32a:	4b12      	ldr	r3, [pc, #72]	@ (800e374 <udp_new_port+0x68>)
 800e32c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e330:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e332:	4b11      	ldr	r3, [pc, #68]	@ (800e378 <udp_new_port+0x6c>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	603b      	str	r3, [r7, #0]
 800e338:	e011      	b.n	800e35e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	8a5a      	ldrh	r2, [r3, #18]
 800e33e:	4b0d      	ldr	r3, [pc, #52]	@ (800e374 <udp_new_port+0x68>)
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d108      	bne.n	800e358 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e346:	88fb      	ldrh	r3, [r7, #6]
 800e348:	3301      	adds	r3, #1
 800e34a:	80fb      	strh	r3, [r7, #6]
 800e34c:	88fb      	ldrh	r3, [r7, #6]
 800e34e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e352:	d3e0      	bcc.n	800e316 <udp_new_port+0xa>
        return 0;
 800e354:	2300      	movs	r3, #0
 800e356:	e007      	b.n	800e368 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	603b      	str	r3, [r7, #0]
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1ea      	bne.n	800e33a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e364:	4b03      	ldr	r3, [pc, #12]	@ (800e374 <udp_new_port+0x68>)
 800e366:	881b      	ldrh	r3, [r3, #0]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	20000028 	.word	0x20000028
 800e378:	20007dd0 	.word	0x20007dd0

0800e37c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	4613      	mov	r3, r2
 800e388:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d105      	bne.n	800e39c <udp_input_local_match+0x20>
 800e390:	4b27      	ldr	r3, [pc, #156]	@ (800e430 <udp_input_local_match+0xb4>)
 800e392:	2287      	movs	r2, #135	@ 0x87
 800e394:	4927      	ldr	r1, [pc, #156]	@ (800e434 <udp_input_local_match+0xb8>)
 800e396:	4828      	ldr	r0, [pc, #160]	@ (800e438 <udp_input_local_match+0xbc>)
 800e398:	f000 fd34 	bl	800ee04 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d105      	bne.n	800e3ae <udp_input_local_match+0x32>
 800e3a2:	4b23      	ldr	r3, [pc, #140]	@ (800e430 <udp_input_local_match+0xb4>)
 800e3a4:	2288      	movs	r2, #136	@ 0x88
 800e3a6:	4925      	ldr	r1, [pc, #148]	@ (800e43c <udp_input_local_match+0xc0>)
 800e3a8:	4823      	ldr	r0, [pc, #140]	@ (800e438 <udp_input_local_match+0xbc>)
 800e3aa:	f000 fd2b 	bl	800ee04 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	7a1b      	ldrb	r3, [r3, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00b      	beq.n	800e3ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	7a1a      	ldrb	r2, [r3, #8]
 800e3ba:	4b21      	ldr	r3, [pc, #132]	@ (800e440 <udp_input_local_match+0xc4>)
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d001      	beq.n	800e3ce <udp_input_local_match+0x52>
    return 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e02b      	b.n	800e426 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e3ce:	79fb      	ldrb	r3, [r7, #7]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d018      	beq.n	800e406 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d013      	beq.n	800e402 <udp_input_local_match+0x86>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00f      	beq.n	800e402 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e3e2:	4b17      	ldr	r3, [pc, #92]	@ (800e440 <udp_input_local_match+0xc4>)
 800e3e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ea:	d00a      	beq.n	800e402 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	4b13      	ldr	r3, [pc, #76]	@ (800e440 <udp_input_local_match+0xc4>)
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	405a      	eors	r2, r3
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d110      	bne.n	800e424 <udp_input_local_match+0xa8>
          return 1;
 800e402:	2301      	movs	r3, #1
 800e404:	e00f      	b.n	800e426 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d009      	beq.n	800e420 <udp_input_local_match+0xa4>
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d005      	beq.n	800e420 <udp_input_local_match+0xa4>
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	4b09      	ldr	r3, [pc, #36]	@ (800e440 <udp_input_local_match+0xc4>)
 800e41a:	695b      	ldr	r3, [r3, #20]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d101      	bne.n	800e424 <udp_input_local_match+0xa8>
        return 1;
 800e420:	2301      	movs	r3, #1
 800e422:	e000      	b.n	800e426 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e424:	2300      	movs	r3, #0
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	08012934 	.word	0x08012934
 800e434:	0801299c 	.word	0x0801299c
 800e438:	080129c0 	.word	0x080129c0
 800e43c:	080129e8 	.word	0x080129e8
 800e440:	20004e4c 	.word	0x20004e4c

0800e444 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e444:	b590      	push	{r4, r7, lr}
 800e446:	b08d      	sub	sp, #52	@ 0x34
 800e448:	af02      	add	r7, sp, #8
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d105      	bne.n	800e464 <udp_input+0x20>
 800e458:	4b7c      	ldr	r3, [pc, #496]	@ (800e64c <udp_input+0x208>)
 800e45a:	22cf      	movs	r2, #207	@ 0xcf
 800e45c:	497c      	ldr	r1, [pc, #496]	@ (800e650 <udp_input+0x20c>)
 800e45e:	487d      	ldr	r0, [pc, #500]	@ (800e654 <udp_input+0x210>)
 800e460:	f000 fcd0 	bl	800ee04 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d105      	bne.n	800e476 <udp_input+0x32>
 800e46a:	4b78      	ldr	r3, [pc, #480]	@ (800e64c <udp_input+0x208>)
 800e46c:	22d0      	movs	r2, #208	@ 0xd0
 800e46e:	497a      	ldr	r1, [pc, #488]	@ (800e658 <udp_input+0x214>)
 800e470:	4878      	ldr	r0, [pc, #480]	@ (800e654 <udp_input+0x210>)
 800e472:	f000 fcc7 	bl	800ee04 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	895b      	ldrh	r3, [r3, #10]
 800e47a:	2b07      	cmp	r3, #7
 800e47c:	d803      	bhi.n	800e486 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7fa f9f2 	bl	8008868 <pbuf_free>
    goto end;
 800e484:	e0de      	b.n	800e644 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e48c:	4b73      	ldr	r3, [pc, #460]	@ (800e65c <udp_input+0x218>)
 800e48e:	695b      	ldr	r3, [r3, #20]
 800e490:	4a72      	ldr	r2, [pc, #456]	@ (800e65c <udp_input+0x218>)
 800e492:	6812      	ldr	r2, [r2, #0]
 800e494:	4611      	mov	r1, r2
 800e496:	4618      	mov	r0, r3
 800e498:	f7f8 f850 	bl	800653c <ip4_addr_isbroadcast_u32>
 800e49c:	4603      	mov	r3, r0
 800e49e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	881b      	ldrh	r3, [r3, #0]
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f6 fbbc 	bl	8004c24 <lwip_htons>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	885b      	ldrh	r3, [r3, #2]
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7f6 fbb4 	bl	8004c24 <lwip_htons>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4cc:	4b64      	ldr	r3, [pc, #400]	@ (800e660 <udp_input+0x21c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4d2:	e054      	b.n	800e57e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d6:	8a5b      	ldrh	r3, [r3, #18]
 800e4d8:	89fa      	ldrh	r2, [r7, #14]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d14a      	bne.n	800e574 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e4de:	7cfb      	ldrb	r3, [r7, #19]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	6839      	ldr	r1, [r7, #0]
 800e4e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4e6:	f7ff ff49 	bl	800e37c <udp_input_local_match>
 800e4ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d041      	beq.n	800e574 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f2:	7c1b      	ldrb	r3, [r3, #16]
 800e4f4:	f003 0304 	and.w	r3, r3, #4
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d11d      	bne.n	800e538 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d102      	bne.n	800e508 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e504:	61fb      	str	r3, [r7, #28]
 800e506:	e017      	b.n	800e538 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e508:	7cfb      	ldrb	r3, [r7, #19]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d014      	beq.n	800e538 <udp_input+0xf4>
 800e50e:	4b53      	ldr	r3, [pc, #332]	@ (800e65c <udp_input+0x218>)
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e516:	d10f      	bne.n	800e538 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	3304      	adds	r3, #4
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	429a      	cmp	r2, r3
 800e524:	d008      	beq.n	800e538 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	3304      	adds	r3, #4
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	429a      	cmp	r2, r3
 800e532:	d101      	bne.n	800e538 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e536:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53a:	8a9b      	ldrh	r3, [r3, #20]
 800e53c:	8a3a      	ldrh	r2, [r7, #16]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d118      	bne.n	800e574 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e544:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e546:	2b00      	cmp	r3, #0
 800e548:	d005      	beq.n	800e556 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	4b43      	ldr	r3, [pc, #268]	@ (800e65c <udp_input+0x218>)
 800e550:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e552:	429a      	cmp	r2, r3
 800e554:	d10e      	bne.n	800e574 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d014      	beq.n	800e586 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55e:	68da      	ldr	r2, [r3, #12]
 800e560:	6a3b      	ldr	r3, [r7, #32]
 800e562:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e564:	4b3e      	ldr	r3, [pc, #248]	@ (800e660 <udp_input+0x21c>)
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e56c:	4a3c      	ldr	r2, [pc, #240]	@ (800e660 <udp_input+0x21c>)
 800e56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e570:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e572:	e008      	b.n	800e586 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e576:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1a7      	bne.n	800e4d4 <udp_input+0x90>
 800e584:	e000      	b.n	800e588 <udp_input+0x144>
        break;
 800e586:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d101      	bne.n	800e592 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <udp_input+0x15a>
    for_us = 1;
 800e598:	2301      	movs	r3, #1
 800e59a:	76fb      	strb	r3, [r7, #27]
 800e59c:	e00a      	b.n	800e5b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	3304      	adds	r3, #4
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	4b2d      	ldr	r3, [pc, #180]	@ (800e65c <udp_input+0x218>)
 800e5a6:	695b      	ldr	r3, [r3, #20]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	bf0c      	ite	eq
 800e5ac:	2301      	moveq	r3, #1
 800e5ae:	2300      	movne	r3, #0
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e5b4:	7efb      	ldrb	r3, [r7, #27]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d041      	beq.n	800e63e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e5ba:	2108      	movs	r1, #8
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7fa f8cd 	bl	800875c <pbuf_remove_header>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00a      	beq.n	800e5de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e5c8:	4b20      	ldr	r3, [pc, #128]	@ (800e64c <udp_input+0x208>)
 800e5ca:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e5ce:	4925      	ldr	r1, [pc, #148]	@ (800e664 <udp_input+0x220>)
 800e5d0:	4820      	ldr	r0, [pc, #128]	@ (800e654 <udp_input+0x210>)
 800e5d2:	f000 fc17 	bl	800ee04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7fa f946 	bl	8008868 <pbuf_free>
      goto end;
 800e5dc:	e032      	b.n	800e644 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d012      	beq.n	800e60a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e6:	699b      	ldr	r3, [r3, #24]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00a      	beq.n	800e602 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ee:	699c      	ldr	r4, [r3, #24]
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f2:	69d8      	ldr	r0, [r3, #28]
 800e5f4:	8a3b      	ldrh	r3, [r7, #16]
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e668 <udp_input+0x224>)
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e5fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e600:	e021      	b.n	800e646 <udp_input+0x202>
        pbuf_free(p);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7fa f930 	bl	8008868 <pbuf_free>
        goto end;
 800e608:	e01c      	b.n	800e644 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e60a:	7cfb      	ldrb	r3, [r7, #19]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d112      	bne.n	800e636 <udp_input+0x1f2>
 800e610:	4b12      	ldr	r3, [pc, #72]	@ (800e65c <udp_input+0x218>)
 800e612:	695b      	ldr	r3, [r3, #20]
 800e614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e618:	2be0      	cmp	r3, #224	@ 0xe0
 800e61a:	d00c      	beq.n	800e636 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e61c:	4b0f      	ldr	r3, [pc, #60]	@ (800e65c <udp_input+0x218>)
 800e61e:	899b      	ldrh	r3, [r3, #12]
 800e620:	3308      	adds	r3, #8
 800e622:	b29b      	uxth	r3, r3
 800e624:	b21b      	sxth	r3, r3
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7fa f90a 	bl	8008842 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e62e:	2103      	movs	r1, #3
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7f7 fc4d 	bl	8005ed0 <icmp_dest_unreach>
      pbuf_free(p);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7fa f916 	bl	8008868 <pbuf_free>
  return;
 800e63c:	e003      	b.n	800e646 <udp_input+0x202>
    pbuf_free(p);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f7fa f912 	bl	8008868 <pbuf_free>
  return;
 800e644:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e646:	372c      	adds	r7, #44	@ 0x2c
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd90      	pop	{r4, r7, pc}
 800e64c:	08012934 	.word	0x08012934
 800e650:	08012a10 	.word	0x08012a10
 800e654:	080129c0 	.word	0x080129c0
 800e658:	08012a28 	.word	0x08012a28
 800e65c:	20004e4c 	.word	0x20004e4c
 800e660:	20007dd0 	.word	0x20007dd0
 800e664:	08012a44 	.word	0x08012a44
 800e668:	20004e5c 	.word	0x20004e5c

0800e66c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b088      	sub	sp, #32
 800e670:	af02      	add	r7, sp, #8
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
 800e678:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d109      	bne.n	800e694 <udp_sendto+0x28>
 800e680:	4b23      	ldr	r3, [pc, #140]	@ (800e710 <udp_sendto+0xa4>)
 800e682:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e686:	4923      	ldr	r1, [pc, #140]	@ (800e714 <udp_sendto+0xa8>)
 800e688:	4823      	ldr	r0, [pc, #140]	@ (800e718 <udp_sendto+0xac>)
 800e68a:	f000 fbbb 	bl	800ee04 <iprintf>
 800e68e:	f06f 030f 	mvn.w	r3, #15
 800e692:	e038      	b.n	800e706 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d109      	bne.n	800e6ae <udp_sendto+0x42>
 800e69a:	4b1d      	ldr	r3, [pc, #116]	@ (800e710 <udp_sendto+0xa4>)
 800e69c:	f240 2219 	movw	r2, #537	@ 0x219
 800e6a0:	491e      	ldr	r1, [pc, #120]	@ (800e71c <udp_sendto+0xb0>)
 800e6a2:	481d      	ldr	r0, [pc, #116]	@ (800e718 <udp_sendto+0xac>)
 800e6a4:	f000 fbae 	bl	800ee04 <iprintf>
 800e6a8:	f06f 030f 	mvn.w	r3, #15
 800e6ac:	e02b      	b.n	800e706 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d109      	bne.n	800e6c8 <udp_sendto+0x5c>
 800e6b4:	4b16      	ldr	r3, [pc, #88]	@ (800e710 <udp_sendto+0xa4>)
 800e6b6:	f240 221a 	movw	r2, #538	@ 0x21a
 800e6ba:	4919      	ldr	r1, [pc, #100]	@ (800e720 <udp_sendto+0xb4>)
 800e6bc:	4816      	ldr	r0, [pc, #88]	@ (800e718 <udp_sendto+0xac>)
 800e6be:	f000 fba1 	bl	800ee04 <iprintf>
 800e6c2:	f06f 030f 	mvn.w	r3, #15
 800e6c6:	e01e      	b.n	800e706 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	7a1b      	ldrb	r3, [r3, #8]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d006      	beq.n	800e6de <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	7a1b      	ldrb	r3, [r3, #8]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f9 fd67 	bl	80081a8 <netif_get_by_index>
 800e6da:	6178      	str	r0, [r7, #20]
 800e6dc:	e003      	b.n	800e6e6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7f7 fc96 	bl	8006010 <ip4_route>
 800e6e4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d102      	bne.n	800e6f2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800e6ec:	f06f 0303 	mvn.w	r3, #3
 800e6f0:	e009      	b.n	800e706 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e6f2:	887a      	ldrh	r2, [r7, #2]
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	68b9      	ldr	r1, [r7, #8]
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f000 f810 	bl	800e724 <udp_sendto_if>
 800e704:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e706:	4618      	mov	r0, r3
 800e708:	3718      	adds	r7, #24
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	08012934 	.word	0x08012934
 800e714:	08012a90 	.word	0x08012a90
 800e718:	080129c0 	.word	0x080129c0
 800e71c:	08012aa8 	.word	0x08012aa8
 800e720:	08012ac4 	.word	0x08012ac4

0800e724 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af02      	add	r7, sp, #8
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
 800e730:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d109      	bne.n	800e74c <udp_sendto_if+0x28>
 800e738:	4b2e      	ldr	r3, [pc, #184]	@ (800e7f4 <udp_sendto_if+0xd0>)
 800e73a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e73e:	492e      	ldr	r1, [pc, #184]	@ (800e7f8 <udp_sendto_if+0xd4>)
 800e740:	482e      	ldr	r0, [pc, #184]	@ (800e7fc <udp_sendto_if+0xd8>)
 800e742:	f000 fb5f 	bl	800ee04 <iprintf>
 800e746:	f06f 030f 	mvn.w	r3, #15
 800e74a:	e04f      	b.n	800e7ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d109      	bne.n	800e766 <udp_sendto_if+0x42>
 800e752:	4b28      	ldr	r3, [pc, #160]	@ (800e7f4 <udp_sendto_if+0xd0>)
 800e754:	f240 2281 	movw	r2, #641	@ 0x281
 800e758:	4929      	ldr	r1, [pc, #164]	@ (800e800 <udp_sendto_if+0xdc>)
 800e75a:	4828      	ldr	r0, [pc, #160]	@ (800e7fc <udp_sendto_if+0xd8>)
 800e75c:	f000 fb52 	bl	800ee04 <iprintf>
 800e760:	f06f 030f 	mvn.w	r3, #15
 800e764:	e042      	b.n	800e7ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d109      	bne.n	800e780 <udp_sendto_if+0x5c>
 800e76c:	4b21      	ldr	r3, [pc, #132]	@ (800e7f4 <udp_sendto_if+0xd0>)
 800e76e:	f240 2282 	movw	r2, #642	@ 0x282
 800e772:	4924      	ldr	r1, [pc, #144]	@ (800e804 <udp_sendto_if+0xe0>)
 800e774:	4821      	ldr	r0, [pc, #132]	@ (800e7fc <udp_sendto_if+0xd8>)
 800e776:	f000 fb45 	bl	800ee04 <iprintf>
 800e77a:	f06f 030f 	mvn.w	r3, #15
 800e77e:	e035      	b.n	800e7ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d109      	bne.n	800e79a <udp_sendto_if+0x76>
 800e786:	4b1b      	ldr	r3, [pc, #108]	@ (800e7f4 <udp_sendto_if+0xd0>)
 800e788:	f240 2283 	movw	r2, #643	@ 0x283
 800e78c:	491e      	ldr	r1, [pc, #120]	@ (800e808 <udp_sendto_if+0xe4>)
 800e78e:	481b      	ldr	r0, [pc, #108]	@ (800e7fc <udp_sendto_if+0xd8>)
 800e790:	f000 fb38 	bl	800ee04 <iprintf>
 800e794:	f06f 030f 	mvn.w	r3, #15
 800e798:	e028      	b.n	800e7ec <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d009      	beq.n	800e7b4 <udp_sendto_if+0x90>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d005      	beq.n	800e7b4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e7b0:	2be0      	cmp	r3, #224	@ 0xe0
 800e7b2:	d103      	bne.n	800e7bc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e7b4:	6a3b      	ldr	r3, [r7, #32]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	617b      	str	r3, [r7, #20]
 800e7ba:	e00b      	b.n	800e7d4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	6a3b      	ldr	r3, [r7, #32]
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d002      	beq.n	800e7d0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e7ca:	f06f 0303 	mvn.w	r3, #3
 800e7ce:	e00d      	b.n	800e7ec <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e7d4:	887a      	ldrh	r2, [r7, #2]
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	9301      	str	r3, [sp, #4]
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f000 f811 	bl	800e80c <udp_sendto_if_src>
 800e7ea:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	08012934 	.word	0x08012934
 800e7f8:	08012ae0 	.word	0x08012ae0
 800e7fc:	080129c0 	.word	0x080129c0
 800e800:	08012afc 	.word	0x08012afc
 800e804:	08012b18 	.word	0x08012b18
 800e808:	08012b38 	.word	0x08012b38

0800e80c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b08c      	sub	sp, #48	@ 0x30
 800e810:	af04      	add	r7, sp, #16
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d109      	bne.n	800e834 <udp_sendto_if_src+0x28>
 800e820:	4b65      	ldr	r3, [pc, #404]	@ (800e9b8 <udp_sendto_if_src+0x1ac>)
 800e822:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e826:	4965      	ldr	r1, [pc, #404]	@ (800e9bc <udp_sendto_if_src+0x1b0>)
 800e828:	4865      	ldr	r0, [pc, #404]	@ (800e9c0 <udp_sendto_if_src+0x1b4>)
 800e82a:	f000 faeb 	bl	800ee04 <iprintf>
 800e82e:	f06f 030f 	mvn.w	r3, #15
 800e832:	e0bc      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d109      	bne.n	800e84e <udp_sendto_if_src+0x42>
 800e83a:	4b5f      	ldr	r3, [pc, #380]	@ (800e9b8 <udp_sendto_if_src+0x1ac>)
 800e83c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800e840:	4960      	ldr	r1, [pc, #384]	@ (800e9c4 <udp_sendto_if_src+0x1b8>)
 800e842:	485f      	ldr	r0, [pc, #380]	@ (800e9c0 <udp_sendto_if_src+0x1b4>)
 800e844:	f000 fade 	bl	800ee04 <iprintf>
 800e848:	f06f 030f 	mvn.w	r3, #15
 800e84c:	e0af      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d109      	bne.n	800e868 <udp_sendto_if_src+0x5c>
 800e854:	4b58      	ldr	r3, [pc, #352]	@ (800e9b8 <udp_sendto_if_src+0x1ac>)
 800e856:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800e85a:	495b      	ldr	r1, [pc, #364]	@ (800e9c8 <udp_sendto_if_src+0x1bc>)
 800e85c:	4858      	ldr	r0, [pc, #352]	@ (800e9c0 <udp_sendto_if_src+0x1b4>)
 800e85e:	f000 fad1 	bl	800ee04 <iprintf>
 800e862:	f06f 030f 	mvn.w	r3, #15
 800e866:	e0a2      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d109      	bne.n	800e882 <udp_sendto_if_src+0x76>
 800e86e:	4b52      	ldr	r3, [pc, #328]	@ (800e9b8 <udp_sendto_if_src+0x1ac>)
 800e870:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800e874:	4955      	ldr	r1, [pc, #340]	@ (800e9cc <udp_sendto_if_src+0x1c0>)
 800e876:	4852      	ldr	r0, [pc, #328]	@ (800e9c0 <udp_sendto_if_src+0x1b4>)
 800e878:	f000 fac4 	bl	800ee04 <iprintf>
 800e87c:	f06f 030f 	mvn.w	r3, #15
 800e880:	e095      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e884:	2b00      	cmp	r3, #0
 800e886:	d109      	bne.n	800e89c <udp_sendto_if_src+0x90>
 800e888:	4b4b      	ldr	r3, [pc, #300]	@ (800e9b8 <udp_sendto_if_src+0x1ac>)
 800e88a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e88e:	4950      	ldr	r1, [pc, #320]	@ (800e9d0 <udp_sendto_if_src+0x1c4>)
 800e890:	484b      	ldr	r0, [pc, #300]	@ (800e9c0 <udp_sendto_if_src+0x1b4>)
 800e892:	f000 fab7 	bl	800ee04 <iprintf>
 800e896:	f06f 030f 	mvn.w	r3, #15
 800e89a:	e088      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	8a5b      	ldrh	r3, [r3, #18]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d10f      	bne.n	800e8c4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e8a4:	68f9      	ldr	r1, [r7, #12]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	8a5b      	ldrh	r3, [r3, #18]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f000 f893 	bl	800e9d8 <udp_bind>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e8b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d002      	beq.n	800e8c4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e8be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e8c2:	e074      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	891b      	ldrh	r3, [r3, #8]
 800e8c8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d902      	bls.n	800e8d6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d4:	e06b      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e8d6:	2108      	movs	r1, #8
 800e8d8:	68b8      	ldr	r0, [r7, #8]
 800e8da:	f7f9 ff2f 	bl	800873c <pbuf_add_header>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d015      	beq.n	800e910 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e8e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e8e8:	2108      	movs	r1, #8
 800e8ea:	2022      	movs	r0, #34	@ 0x22
 800e8ec:	f7f9 fcd8 	bl	80082a0 <pbuf_alloc>
 800e8f0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d102      	bne.n	800e8fe <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fc:	e057      	b.n	800e9ae <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	891b      	ldrh	r3, [r3, #8]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d006      	beq.n	800e914 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e906:	68b9      	ldr	r1, [r7, #8]
 800e908:	69f8      	ldr	r0, [r7, #28]
 800e90a:	f7fa f8c5 	bl	8008a98 <pbuf_chain>
 800e90e:	e001      	b.n	800e914 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	895b      	ldrh	r3, [r3, #10]
 800e918:	2b07      	cmp	r3, #7
 800e91a:	d806      	bhi.n	800e92a <udp_sendto_if_src+0x11e>
 800e91c:	4b26      	ldr	r3, [pc, #152]	@ (800e9b8 <udp_sendto_if_src+0x1ac>)
 800e91e:	f240 320d 	movw	r2, #781	@ 0x30d
 800e922:	492c      	ldr	r1, [pc, #176]	@ (800e9d4 <udp_sendto_if_src+0x1c8>)
 800e924:	4826      	ldr	r0, [pc, #152]	@ (800e9c0 <udp_sendto_if_src+0x1b4>)
 800e926:	f000 fa6d 	bl	800ee04 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	8a5b      	ldrh	r3, [r3, #18]
 800e934:	4618      	mov	r0, r3
 800e936:	f7f6 f975 	bl	8004c24 <lwip_htons>
 800e93a:	4603      	mov	r3, r0
 800e93c:	461a      	mov	r2, r3
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e942:	887b      	ldrh	r3, [r7, #2]
 800e944:	4618      	mov	r0, r3
 800e946:	f7f6 f96d 	bl	8004c24 <lwip_htons>
 800e94a:	4603      	mov	r3, r0
 800e94c:	461a      	mov	r2, r3
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2200      	movs	r2, #0
 800e956:	719a      	strb	r2, [r3, #6]
 800e958:	2200      	movs	r2, #0
 800e95a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	891b      	ldrh	r3, [r3, #8]
 800e960:	4618      	mov	r0, r3
 800e962:	f7f6 f95f 	bl	8004c24 <lwip_htons>
 800e966:	4603      	mov	r3, r0
 800e968:	461a      	mov	r2, r3
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e96e:	2311      	movs	r3, #17
 800e970:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	7adb      	ldrb	r3, [r3, #11]
 800e976:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	7a9b      	ldrb	r3, [r3, #10]
 800e97c:	7cb9      	ldrb	r1, [r7, #18]
 800e97e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e980:	9202      	str	r2, [sp, #8]
 800e982:	7cfa      	ldrb	r2, [r7, #19]
 800e984:	9201      	str	r2, [sp, #4]
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	460b      	mov	r3, r1
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e98e:	69f8      	ldr	r0, [r7, #28]
 800e990:	f7f7 fd26 	bl	80063e0 <ip4_output_if_src>
 800e994:	4603      	mov	r3, r0
 800e996:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e998:	69fa      	ldr	r2, [r7, #28]
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d004      	beq.n	800e9aa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e9a0:	69f8      	ldr	r0, [r7, #28]
 800e9a2:	f7f9 ff61 	bl	8008868 <pbuf_free>
    q = NULL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e9aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3720      	adds	r7, #32
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	08012934 	.word	0x08012934
 800e9bc:	08012b58 	.word	0x08012b58
 800e9c0:	080129c0 	.word	0x080129c0
 800e9c4:	08012b78 	.word	0x08012b78
 800e9c8:	08012b98 	.word	0x08012b98
 800e9cc:	08012bbc 	.word	0x08012bbc
 800e9d0:	08012be0 	.word	0x08012be0
 800e9d4:	08012c04 	.word	0x08012c04

0800e9d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b086      	sub	sp, #24
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d101      	bne.n	800e9f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e9ec:	4b39      	ldr	r3, [pc, #228]	@ (800ead4 <udp_bind+0xfc>)
 800e9ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d109      	bne.n	800ea0a <udp_bind+0x32>
 800e9f6:	4b38      	ldr	r3, [pc, #224]	@ (800ead8 <udp_bind+0x100>)
 800e9f8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800e9fc:	4937      	ldr	r1, [pc, #220]	@ (800eadc <udp_bind+0x104>)
 800e9fe:	4838      	ldr	r0, [pc, #224]	@ (800eae0 <udp_bind+0x108>)
 800ea00:	f000 fa00 	bl	800ee04 <iprintf>
 800ea04:	f06f 030f 	mvn.w	r3, #15
 800ea08:	e060      	b.n	800eacc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea0e:	4b35      	ldr	r3, [pc, #212]	@ (800eae4 <udp_bind+0x10c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	617b      	str	r3, [r7, #20]
 800ea14:	e009      	b.n	800ea2a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d102      	bne.n	800ea24 <udp_bind+0x4c>
      rebind = 1;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	74fb      	strb	r3, [r7, #19]
      break;
 800ea22:	e005      	b.n	800ea30 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	617b      	str	r3, [r7, #20]
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1f2      	bne.n	800ea16 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ea30:	88fb      	ldrh	r3, [r7, #6]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d109      	bne.n	800ea4a <udp_bind+0x72>
    port = udp_new_port();
 800ea36:	f7ff fc69 	bl	800e30c <udp_new_port>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea3e:	88fb      	ldrh	r3, [r7, #6]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d12c      	bne.n	800ea9e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ea44:	f06f 0307 	mvn.w	r3, #7
 800ea48:	e040      	b.n	800eacc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea4a:	4b26      	ldr	r3, [pc, #152]	@ (800eae4 <udp_bind+0x10c>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	617b      	str	r3, [r7, #20]
 800ea50:	e022      	b.n	800ea98 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d01b      	beq.n	800ea92 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	8a5b      	ldrh	r3, [r3, #18]
 800ea5e:	88fa      	ldrh	r2, [r7, #6]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d116      	bne.n	800ea92 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d00d      	beq.n	800ea8c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00a      	beq.n	800ea8c <udp_bind+0xb4>
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d006      	beq.n	800ea8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ea7e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d003      	beq.n	800ea8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d102      	bne.n	800ea92 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ea8c:	f06f 0307 	mvn.w	r3, #7
 800ea90:	e01c      	b.n	800eacc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	617b      	str	r3, [r7, #20]
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1d9      	bne.n	800ea52 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <udp_bind+0xd2>
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	e000      	b.n	800eaac <udp_bind+0xd4>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	88fa      	ldrh	r2, [r7, #6]
 800eab4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800eab6:	7cfb      	ldrb	r3, [r7, #19]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d106      	bne.n	800eaca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800eabc:	4b09      	ldr	r3, [pc, #36]	@ (800eae4 <udp_bind+0x10c>)
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800eac4:	4a07      	ldr	r2, [pc, #28]	@ (800eae4 <udp_bind+0x10c>)
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	08012d04 	.word	0x08012d04
 800ead8:	08012934 	.word	0x08012934
 800eadc:	08012c34 	.word	0x08012c34
 800eae0:	080129c0 	.word	0x080129c0
 800eae4:	20007dd0 	.word	0x20007dd0

0800eae8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800eaee:	2000      	movs	r0, #0
 800eaf0:	f7f8 ffd4 	bl	8007a9c <memp_malloc>
 800eaf4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d007      	beq.n	800eb0c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800eafc:	2220      	movs	r2, #32
 800eafe:	2100      	movs	r1, #0
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 fa20 	bl	800ef46 <memset>
    pcb->ttl = UDP_TTL;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	22ff      	movs	r2, #255	@ 0xff
 800eb0a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800eb0c:	687b      	ldr	r3, [r7, #4]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
	...

0800eb18 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d01e      	beq.n	800eb66 <udp_netif_ip_addr_changed+0x4e>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d01a      	beq.n	800eb66 <udp_netif_ip_addr_changed+0x4e>
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d017      	beq.n	800eb66 <udp_netif_ip_addr_changed+0x4e>
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d013      	beq.n	800eb66 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eb3e:	4b0d      	ldr	r3, [pc, #52]	@ (800eb74 <udp_netif_ip_addr_changed+0x5c>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	e00c      	b.n	800eb60 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d103      	bne.n	800eb5a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	60fb      	str	r3, [r7, #12]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1ef      	bne.n	800eb46 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800eb66:	bf00      	nop
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	20007dd0 	.word	0x20007dd0

0800eb78 <udp_send_packet>:
#include "lwip/udp.h"
#include "lwip/ip_addr.h"
#include "udp_sender.h"
#include <string.h>

void udp_send_packet(const char *msg) {
 800eb78:	b590      	push	{r4, r7, lr}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
    static ip_addr_t dest_ip;
    struct pbuf *p;

    if (!pcb) {
 800eb80:	4b1d      	ldr	r3, [pc, #116]	@ (800ebf8 <udp_send_packet+0x80>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10b      	bne.n	800eba0 <udp_send_packet+0x28>
        pcb = udp_new();
 800eb88:	f7ff ffae 	bl	800eae8 <udp_new>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	4a1a      	ldr	r2, [pc, #104]	@ (800ebf8 <udp_send_packet+0x80>)
 800eb90:	6013      	str	r3, [r2, #0]
        if (!pcb) return;
 800eb92:	4b19      	ldr	r3, [pc, #100]	@ (800ebf8 <udp_send_packet+0x80>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d028      	beq.n	800ebec <udp_send_packet+0x74>
        IP4_ADDR(&dest_ip, 192, 168, 1, 35);
 800eb9a:	4b18      	ldr	r3, [pc, #96]	@ (800ebfc <udp_send_packet+0x84>)
 800eb9c:	4a18      	ldr	r2, [pc, #96]	@ (800ec00 <udp_send_packet+0x88>)
 800eb9e:	601a      	str	r2, [r3, #0]
    }

    p = pbuf_alloc(PBUF_TRANSPORT, strlen(msg), PBUF_RAM);
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7f1 fb35 	bl	8000210 <strlen>
 800eba6:	4603      	mov	r3, r0
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ebae:	4619      	mov	r1, r3
 800ebb0:	2036      	movs	r0, #54	@ 0x36
 800ebb2:	f7f9 fb75 	bl	80082a0 <pbuf_alloc>
 800ebb6:	60f8      	str	r0, [r7, #12]
    if (!p) return;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d018      	beq.n	800ebf0 <udp_send_packet+0x78>

    memcpy(p->payload, msg, strlen(msg));
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	685c      	ldr	r4, [r3, #4]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7f1 fb24 	bl	8000210 <strlen>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 fa2f 	bl	800f032 <memcpy>
    udp_sendto(pcb, p, &dest_ip, 5005);
 800ebd4:	4b08      	ldr	r3, [pc, #32]	@ (800ebf8 <udp_send_packet+0x80>)
 800ebd6:	6818      	ldr	r0, [r3, #0]
 800ebd8:	f241 338d 	movw	r3, #5005	@ 0x138d
 800ebdc:	4a07      	ldr	r2, [pc, #28]	@ (800ebfc <udp_send_packet+0x84>)
 800ebde:	68f9      	ldr	r1, [r7, #12]
 800ebe0:	f7ff fd44 	bl	800e66c <udp_sendto>
    pbuf_free(p);
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f7f9 fe3f 	bl	8008868 <pbuf_free>
 800ebea:	e002      	b.n	800ebf2 <udp_send_packet+0x7a>
        if (!pcb) return;
 800ebec:	bf00      	nop
 800ebee:	e000      	b.n	800ebf2 <udp_send_packet+0x7a>
    if (!p) return;
 800ebf0:	bf00      	nop
}
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd90      	pop	{r4, r7, pc}
 800ebf8:	20007dd4 	.word	0x20007dd4
 800ebfc:	20007dd8 	.word	0x20007dd8
 800ec00:	2301a8c0 	.word	0x2301a8c0

0800ec04 <rand>:
 800ec04:	4b16      	ldr	r3, [pc, #88]	@ (800ec60 <rand+0x5c>)
 800ec06:	b510      	push	{r4, lr}
 800ec08:	681c      	ldr	r4, [r3, #0]
 800ec0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ec0c:	b9b3      	cbnz	r3, 800ec3c <rand+0x38>
 800ec0e:	2018      	movs	r0, #24
 800ec10:	f000 fa86 	bl	800f120 <malloc>
 800ec14:	4602      	mov	r2, r0
 800ec16:	6320      	str	r0, [r4, #48]	@ 0x30
 800ec18:	b920      	cbnz	r0, 800ec24 <rand+0x20>
 800ec1a:	4b12      	ldr	r3, [pc, #72]	@ (800ec64 <rand+0x60>)
 800ec1c:	4812      	ldr	r0, [pc, #72]	@ (800ec68 <rand+0x64>)
 800ec1e:	2152      	movs	r1, #82	@ 0x52
 800ec20:	f000 fa16 	bl	800f050 <__assert_func>
 800ec24:	4911      	ldr	r1, [pc, #68]	@ (800ec6c <rand+0x68>)
 800ec26:	4b12      	ldr	r3, [pc, #72]	@ (800ec70 <rand+0x6c>)
 800ec28:	e9c0 1300 	strd	r1, r3, [r0]
 800ec2c:	4b11      	ldr	r3, [pc, #68]	@ (800ec74 <rand+0x70>)
 800ec2e:	6083      	str	r3, [r0, #8]
 800ec30:	230b      	movs	r3, #11
 800ec32:	8183      	strh	r3, [r0, #12]
 800ec34:	2100      	movs	r1, #0
 800ec36:	2001      	movs	r0, #1
 800ec38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ec3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ec3e:	480e      	ldr	r0, [pc, #56]	@ (800ec78 <rand+0x74>)
 800ec40:	690b      	ldr	r3, [r1, #16]
 800ec42:	694c      	ldr	r4, [r1, #20]
 800ec44:	4a0d      	ldr	r2, [pc, #52]	@ (800ec7c <rand+0x78>)
 800ec46:	4358      	muls	r0, r3
 800ec48:	fb02 0004 	mla	r0, r2, r4, r0
 800ec4c:	fba3 3202 	umull	r3, r2, r3, r2
 800ec50:	3301      	adds	r3, #1
 800ec52:	eb40 0002 	adc.w	r0, r0, r2
 800ec56:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ec5a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ec5e:	bd10      	pop	{r4, pc}
 800ec60:	20000038 	.word	0x20000038
 800ec64:	08012dd8 	.word	0x08012dd8
 800ec68:	08012def 	.word	0x08012def
 800ec6c:	abcd330e 	.word	0xabcd330e
 800ec70:	e66d1234 	.word	0xe66d1234
 800ec74:	0005deec 	.word	0x0005deec
 800ec78:	5851f42d 	.word	0x5851f42d
 800ec7c:	4c957f2d 	.word	0x4c957f2d

0800ec80 <std>:
 800ec80:	2300      	movs	r3, #0
 800ec82:	b510      	push	{r4, lr}
 800ec84:	4604      	mov	r4, r0
 800ec86:	e9c0 3300 	strd	r3, r3, [r0]
 800ec8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec8e:	6083      	str	r3, [r0, #8]
 800ec90:	8181      	strh	r1, [r0, #12]
 800ec92:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec94:	81c2      	strh	r2, [r0, #14]
 800ec96:	6183      	str	r3, [r0, #24]
 800ec98:	4619      	mov	r1, r3
 800ec9a:	2208      	movs	r2, #8
 800ec9c:	305c      	adds	r0, #92	@ 0x5c
 800ec9e:	f000 f952 	bl	800ef46 <memset>
 800eca2:	4b0d      	ldr	r3, [pc, #52]	@ (800ecd8 <std+0x58>)
 800eca4:	6263      	str	r3, [r4, #36]	@ 0x24
 800eca6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecdc <std+0x5c>)
 800eca8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ece0 <std+0x60>)
 800ecac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecae:	4b0d      	ldr	r3, [pc, #52]	@ (800ece4 <std+0x64>)
 800ecb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ece8 <std+0x68>)
 800ecb4:	6224      	str	r4, [r4, #32]
 800ecb6:	429c      	cmp	r4, r3
 800ecb8:	d006      	beq.n	800ecc8 <std+0x48>
 800ecba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecbe:	4294      	cmp	r4, r2
 800ecc0:	d002      	beq.n	800ecc8 <std+0x48>
 800ecc2:	33d0      	adds	r3, #208	@ 0xd0
 800ecc4:	429c      	cmp	r4, r3
 800ecc6:	d105      	bne.n	800ecd4 <std+0x54>
 800ecc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd0:	f000 b9ac 	b.w	800f02c <__retarget_lock_init_recursive>
 800ecd4:	bd10      	pop	{r4, pc}
 800ecd6:	bf00      	nop
 800ecd8:	0800ee6d 	.word	0x0800ee6d
 800ecdc:	0800ee8f 	.word	0x0800ee8f
 800ece0:	0800eec7 	.word	0x0800eec7
 800ece4:	0800eeeb 	.word	0x0800eeeb
 800ece8:	20007ddc 	.word	0x20007ddc

0800ecec <stdio_exit_handler>:
 800ecec:	4a02      	ldr	r2, [pc, #8]	@ (800ecf8 <stdio_exit_handler+0xc>)
 800ecee:	4903      	ldr	r1, [pc, #12]	@ (800ecfc <stdio_exit_handler+0x10>)
 800ecf0:	4803      	ldr	r0, [pc, #12]	@ (800ed00 <stdio_exit_handler+0x14>)
 800ecf2:	f000 b869 	b.w	800edc8 <_fwalk_sglue>
 800ecf6:	bf00      	nop
 800ecf8:	2000002c 	.word	0x2000002c
 800ecfc:	0800fbe1 	.word	0x0800fbe1
 800ed00:	2000003c 	.word	0x2000003c

0800ed04 <cleanup_stdio>:
 800ed04:	6841      	ldr	r1, [r0, #4]
 800ed06:	4b0c      	ldr	r3, [pc, #48]	@ (800ed38 <cleanup_stdio+0x34>)
 800ed08:	4299      	cmp	r1, r3
 800ed0a:	b510      	push	{r4, lr}
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	d001      	beq.n	800ed14 <cleanup_stdio+0x10>
 800ed10:	f000 ff66 	bl	800fbe0 <_fflush_r>
 800ed14:	68a1      	ldr	r1, [r4, #8]
 800ed16:	4b09      	ldr	r3, [pc, #36]	@ (800ed3c <cleanup_stdio+0x38>)
 800ed18:	4299      	cmp	r1, r3
 800ed1a:	d002      	beq.n	800ed22 <cleanup_stdio+0x1e>
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 ff5f 	bl	800fbe0 <_fflush_r>
 800ed22:	68e1      	ldr	r1, [r4, #12]
 800ed24:	4b06      	ldr	r3, [pc, #24]	@ (800ed40 <cleanup_stdio+0x3c>)
 800ed26:	4299      	cmp	r1, r3
 800ed28:	d004      	beq.n	800ed34 <cleanup_stdio+0x30>
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed30:	f000 bf56 	b.w	800fbe0 <_fflush_r>
 800ed34:	bd10      	pop	{r4, pc}
 800ed36:	bf00      	nop
 800ed38:	20007ddc 	.word	0x20007ddc
 800ed3c:	20007e44 	.word	0x20007e44
 800ed40:	20007eac 	.word	0x20007eac

0800ed44 <global_stdio_init.part.0>:
 800ed44:	b510      	push	{r4, lr}
 800ed46:	4b0b      	ldr	r3, [pc, #44]	@ (800ed74 <global_stdio_init.part.0+0x30>)
 800ed48:	4c0b      	ldr	r4, [pc, #44]	@ (800ed78 <global_stdio_init.part.0+0x34>)
 800ed4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ed7c <global_stdio_init.part.0+0x38>)
 800ed4c:	601a      	str	r2, [r3, #0]
 800ed4e:	4620      	mov	r0, r4
 800ed50:	2200      	movs	r2, #0
 800ed52:	2104      	movs	r1, #4
 800ed54:	f7ff ff94 	bl	800ec80 <std>
 800ed58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	2109      	movs	r1, #9
 800ed60:	f7ff ff8e 	bl	800ec80 <std>
 800ed64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed68:	2202      	movs	r2, #2
 800ed6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed6e:	2112      	movs	r1, #18
 800ed70:	f7ff bf86 	b.w	800ec80 <std>
 800ed74:	20007f14 	.word	0x20007f14
 800ed78:	20007ddc 	.word	0x20007ddc
 800ed7c:	0800eced 	.word	0x0800eced

0800ed80 <__sfp_lock_acquire>:
 800ed80:	4801      	ldr	r0, [pc, #4]	@ (800ed88 <__sfp_lock_acquire+0x8>)
 800ed82:	f000 b954 	b.w	800f02e <__retarget_lock_acquire_recursive>
 800ed86:	bf00      	nop
 800ed88:	20007f1d 	.word	0x20007f1d

0800ed8c <__sfp_lock_release>:
 800ed8c:	4801      	ldr	r0, [pc, #4]	@ (800ed94 <__sfp_lock_release+0x8>)
 800ed8e:	f000 b94f 	b.w	800f030 <__retarget_lock_release_recursive>
 800ed92:	bf00      	nop
 800ed94:	20007f1d 	.word	0x20007f1d

0800ed98 <__sinit>:
 800ed98:	b510      	push	{r4, lr}
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	f7ff fff0 	bl	800ed80 <__sfp_lock_acquire>
 800eda0:	6a23      	ldr	r3, [r4, #32]
 800eda2:	b11b      	cbz	r3, 800edac <__sinit+0x14>
 800eda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eda8:	f7ff bff0 	b.w	800ed8c <__sfp_lock_release>
 800edac:	4b04      	ldr	r3, [pc, #16]	@ (800edc0 <__sinit+0x28>)
 800edae:	6223      	str	r3, [r4, #32]
 800edb0:	4b04      	ldr	r3, [pc, #16]	@ (800edc4 <__sinit+0x2c>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1f5      	bne.n	800eda4 <__sinit+0xc>
 800edb8:	f7ff ffc4 	bl	800ed44 <global_stdio_init.part.0>
 800edbc:	e7f2      	b.n	800eda4 <__sinit+0xc>
 800edbe:	bf00      	nop
 800edc0:	0800ed05 	.word	0x0800ed05
 800edc4:	20007f14 	.word	0x20007f14

0800edc8 <_fwalk_sglue>:
 800edc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edcc:	4607      	mov	r7, r0
 800edce:	4688      	mov	r8, r1
 800edd0:	4614      	mov	r4, r2
 800edd2:	2600      	movs	r6, #0
 800edd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edd8:	f1b9 0901 	subs.w	r9, r9, #1
 800eddc:	d505      	bpl.n	800edea <_fwalk_sglue+0x22>
 800edde:	6824      	ldr	r4, [r4, #0]
 800ede0:	2c00      	cmp	r4, #0
 800ede2:	d1f7      	bne.n	800edd4 <_fwalk_sglue+0xc>
 800ede4:	4630      	mov	r0, r6
 800ede6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edea:	89ab      	ldrh	r3, [r5, #12]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d907      	bls.n	800ee00 <_fwalk_sglue+0x38>
 800edf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edf4:	3301      	adds	r3, #1
 800edf6:	d003      	beq.n	800ee00 <_fwalk_sglue+0x38>
 800edf8:	4629      	mov	r1, r5
 800edfa:	4638      	mov	r0, r7
 800edfc:	47c0      	blx	r8
 800edfe:	4306      	orrs	r6, r0
 800ee00:	3568      	adds	r5, #104	@ 0x68
 800ee02:	e7e9      	b.n	800edd8 <_fwalk_sglue+0x10>

0800ee04 <iprintf>:
 800ee04:	b40f      	push	{r0, r1, r2, r3}
 800ee06:	b507      	push	{r0, r1, r2, lr}
 800ee08:	4906      	ldr	r1, [pc, #24]	@ (800ee24 <iprintf+0x20>)
 800ee0a:	ab04      	add	r3, sp, #16
 800ee0c:	6808      	ldr	r0, [r1, #0]
 800ee0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee12:	6881      	ldr	r1, [r0, #8]
 800ee14:	9301      	str	r3, [sp, #4]
 800ee16:	f000 fbbb 	bl	800f590 <_vfiprintf_r>
 800ee1a:	b003      	add	sp, #12
 800ee1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee20:	b004      	add	sp, #16
 800ee22:	4770      	bx	lr
 800ee24:	20000038 	.word	0x20000038

0800ee28 <siprintf>:
 800ee28:	b40e      	push	{r1, r2, r3}
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	b09d      	sub	sp, #116	@ 0x74
 800ee2e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ee30:	9002      	str	r0, [sp, #8]
 800ee32:	9006      	str	r0, [sp, #24]
 800ee34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ee38:	480a      	ldr	r0, [pc, #40]	@ (800ee64 <siprintf+0x3c>)
 800ee3a:	9107      	str	r1, [sp, #28]
 800ee3c:	9104      	str	r1, [sp, #16]
 800ee3e:	490a      	ldr	r1, [pc, #40]	@ (800ee68 <siprintf+0x40>)
 800ee40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee44:	9105      	str	r1, [sp, #20]
 800ee46:	2400      	movs	r4, #0
 800ee48:	a902      	add	r1, sp, #8
 800ee4a:	6800      	ldr	r0, [r0, #0]
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ee50:	f000 fa78 	bl	800f344 <_svfiprintf_r>
 800ee54:	9b02      	ldr	r3, [sp, #8]
 800ee56:	701c      	strb	r4, [r3, #0]
 800ee58:	b01d      	add	sp, #116	@ 0x74
 800ee5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee5e:	b003      	add	sp, #12
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	20000038 	.word	0x20000038
 800ee68:	ffff0208 	.word	0xffff0208

0800ee6c <__sread>:
 800ee6c:	b510      	push	{r4, lr}
 800ee6e:	460c      	mov	r4, r1
 800ee70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee74:	f000 f892 	bl	800ef9c <_read_r>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	bfab      	itete	ge
 800ee7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee80:	181b      	addge	r3, r3, r0
 800ee82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee86:	bfac      	ite	ge
 800ee88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee8a:	81a3      	strhlt	r3, [r4, #12]
 800ee8c:	bd10      	pop	{r4, pc}

0800ee8e <__swrite>:
 800ee8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee92:	461f      	mov	r7, r3
 800ee94:	898b      	ldrh	r3, [r1, #12]
 800ee96:	05db      	lsls	r3, r3, #23
 800ee98:	4605      	mov	r5, r0
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	4616      	mov	r6, r2
 800ee9e:	d505      	bpl.n	800eeac <__swrite+0x1e>
 800eea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea4:	2302      	movs	r3, #2
 800eea6:	2200      	movs	r2, #0
 800eea8:	f000 f866 	bl	800ef78 <_lseek_r>
 800eeac:	89a3      	ldrh	r3, [r4, #12]
 800eeae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eeb6:	81a3      	strh	r3, [r4, #12]
 800eeb8:	4632      	mov	r2, r6
 800eeba:	463b      	mov	r3, r7
 800eebc:	4628      	mov	r0, r5
 800eebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eec2:	f000 b87d 	b.w	800efc0 <_write_r>

0800eec6 <__sseek>:
 800eec6:	b510      	push	{r4, lr}
 800eec8:	460c      	mov	r4, r1
 800eeca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eece:	f000 f853 	bl	800ef78 <_lseek_r>
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	bf15      	itete	ne
 800eed8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eeda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eede:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eee2:	81a3      	strheq	r3, [r4, #12]
 800eee4:	bf18      	it	ne
 800eee6:	81a3      	strhne	r3, [r4, #12]
 800eee8:	bd10      	pop	{r4, pc}

0800eeea <__sclose>:
 800eeea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeee:	f000 b833 	b.w	800ef58 <_close_r>

0800eef2 <memcmp>:
 800eef2:	b510      	push	{r4, lr}
 800eef4:	3901      	subs	r1, #1
 800eef6:	4402      	add	r2, r0
 800eef8:	4290      	cmp	r0, r2
 800eefa:	d101      	bne.n	800ef00 <memcmp+0xe>
 800eefc:	2000      	movs	r0, #0
 800eefe:	e005      	b.n	800ef0c <memcmp+0x1a>
 800ef00:	7803      	ldrb	r3, [r0, #0]
 800ef02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	d001      	beq.n	800ef0e <memcmp+0x1c>
 800ef0a:	1b18      	subs	r0, r3, r4
 800ef0c:	bd10      	pop	{r4, pc}
 800ef0e:	3001      	adds	r0, #1
 800ef10:	e7f2      	b.n	800eef8 <memcmp+0x6>

0800ef12 <memmove>:
 800ef12:	4288      	cmp	r0, r1
 800ef14:	b510      	push	{r4, lr}
 800ef16:	eb01 0402 	add.w	r4, r1, r2
 800ef1a:	d902      	bls.n	800ef22 <memmove+0x10>
 800ef1c:	4284      	cmp	r4, r0
 800ef1e:	4623      	mov	r3, r4
 800ef20:	d807      	bhi.n	800ef32 <memmove+0x20>
 800ef22:	1e43      	subs	r3, r0, #1
 800ef24:	42a1      	cmp	r1, r4
 800ef26:	d008      	beq.n	800ef3a <memmove+0x28>
 800ef28:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef30:	e7f8      	b.n	800ef24 <memmove+0x12>
 800ef32:	4402      	add	r2, r0
 800ef34:	4601      	mov	r1, r0
 800ef36:	428a      	cmp	r2, r1
 800ef38:	d100      	bne.n	800ef3c <memmove+0x2a>
 800ef3a:	bd10      	pop	{r4, pc}
 800ef3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef44:	e7f7      	b.n	800ef36 <memmove+0x24>

0800ef46 <memset>:
 800ef46:	4402      	add	r2, r0
 800ef48:	4603      	mov	r3, r0
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d100      	bne.n	800ef50 <memset+0xa>
 800ef4e:	4770      	bx	lr
 800ef50:	f803 1b01 	strb.w	r1, [r3], #1
 800ef54:	e7f9      	b.n	800ef4a <memset+0x4>
	...

0800ef58 <_close_r>:
 800ef58:	b538      	push	{r3, r4, r5, lr}
 800ef5a:	4d06      	ldr	r5, [pc, #24]	@ (800ef74 <_close_r+0x1c>)
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4604      	mov	r4, r0
 800ef60:	4608      	mov	r0, r1
 800ef62:	602b      	str	r3, [r5, #0]
 800ef64:	f7f1 fd0c 	bl	8000980 <_close>
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	d102      	bne.n	800ef72 <_close_r+0x1a>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b103      	cbz	r3, 800ef72 <_close_r+0x1a>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
 800ef74:	20007f18 	.word	0x20007f18

0800ef78 <_lseek_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	@ (800ef98 <_lseek_r+0x20>)
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	602a      	str	r2, [r5, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f7f1 fd21 	bl	80009ce <_lseek>
 800ef8c:	1c43      	adds	r3, r0, #1
 800ef8e:	d102      	bne.n	800ef96 <_lseek_r+0x1e>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b103      	cbz	r3, 800ef96 <_lseek_r+0x1e>
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	20007f18 	.word	0x20007f18

0800ef9c <_read_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	4d07      	ldr	r5, [pc, #28]	@ (800efbc <_read_r+0x20>)
 800efa0:	4604      	mov	r4, r0
 800efa2:	4608      	mov	r0, r1
 800efa4:	4611      	mov	r1, r2
 800efa6:	2200      	movs	r2, #0
 800efa8:	602a      	str	r2, [r5, #0]
 800efaa:	461a      	mov	r2, r3
 800efac:	f7f1 fcaf 	bl	800090e <_read>
 800efb0:	1c43      	adds	r3, r0, #1
 800efb2:	d102      	bne.n	800efba <_read_r+0x1e>
 800efb4:	682b      	ldr	r3, [r5, #0]
 800efb6:	b103      	cbz	r3, 800efba <_read_r+0x1e>
 800efb8:	6023      	str	r3, [r4, #0]
 800efba:	bd38      	pop	{r3, r4, r5, pc}
 800efbc:	20007f18 	.word	0x20007f18

0800efc0 <_write_r>:
 800efc0:	b538      	push	{r3, r4, r5, lr}
 800efc2:	4d07      	ldr	r5, [pc, #28]	@ (800efe0 <_write_r+0x20>)
 800efc4:	4604      	mov	r4, r0
 800efc6:	4608      	mov	r0, r1
 800efc8:	4611      	mov	r1, r2
 800efca:	2200      	movs	r2, #0
 800efcc:	602a      	str	r2, [r5, #0]
 800efce:	461a      	mov	r2, r3
 800efd0:	f7f1 fcba 	bl	8000948 <_write>
 800efd4:	1c43      	adds	r3, r0, #1
 800efd6:	d102      	bne.n	800efde <_write_r+0x1e>
 800efd8:	682b      	ldr	r3, [r5, #0]
 800efda:	b103      	cbz	r3, 800efde <_write_r+0x1e>
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	20007f18 	.word	0x20007f18

0800efe4 <__libc_init_array>:
 800efe4:	b570      	push	{r4, r5, r6, lr}
 800efe6:	4d0d      	ldr	r5, [pc, #52]	@ (800f01c <__libc_init_array+0x38>)
 800efe8:	4c0d      	ldr	r4, [pc, #52]	@ (800f020 <__libc_init_array+0x3c>)
 800efea:	1b64      	subs	r4, r4, r5
 800efec:	10a4      	asrs	r4, r4, #2
 800efee:	2600      	movs	r6, #0
 800eff0:	42a6      	cmp	r6, r4
 800eff2:	d109      	bne.n	800f008 <__libc_init_array+0x24>
 800eff4:	4d0b      	ldr	r5, [pc, #44]	@ (800f024 <__libc_init_array+0x40>)
 800eff6:	4c0c      	ldr	r4, [pc, #48]	@ (800f028 <__libc_init_array+0x44>)
 800eff8:	f000 ffd6 	bl	800ffa8 <_init>
 800effc:	1b64      	subs	r4, r4, r5
 800effe:	10a4      	asrs	r4, r4, #2
 800f000:	2600      	movs	r6, #0
 800f002:	42a6      	cmp	r6, r4
 800f004:	d105      	bne.n	800f012 <__libc_init_array+0x2e>
 800f006:	bd70      	pop	{r4, r5, r6, pc}
 800f008:	f855 3b04 	ldr.w	r3, [r5], #4
 800f00c:	4798      	blx	r3
 800f00e:	3601      	adds	r6, #1
 800f010:	e7ee      	b.n	800eff0 <__libc_init_array+0xc>
 800f012:	f855 3b04 	ldr.w	r3, [r5], #4
 800f016:	4798      	blx	r3
 800f018:	3601      	adds	r6, #1
 800f01a:	e7f2      	b.n	800f002 <__libc_init_array+0x1e>
 800f01c:	08012ec0 	.word	0x08012ec0
 800f020:	08012ec0 	.word	0x08012ec0
 800f024:	08012ec0 	.word	0x08012ec0
 800f028:	08012ec4 	.word	0x08012ec4

0800f02c <__retarget_lock_init_recursive>:
 800f02c:	4770      	bx	lr

0800f02e <__retarget_lock_acquire_recursive>:
 800f02e:	4770      	bx	lr

0800f030 <__retarget_lock_release_recursive>:
 800f030:	4770      	bx	lr

0800f032 <memcpy>:
 800f032:	440a      	add	r2, r1
 800f034:	4291      	cmp	r1, r2
 800f036:	f100 33ff 	add.w	r3, r0, #4294967295
 800f03a:	d100      	bne.n	800f03e <memcpy+0xc>
 800f03c:	4770      	bx	lr
 800f03e:	b510      	push	{r4, lr}
 800f040:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f044:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f048:	4291      	cmp	r1, r2
 800f04a:	d1f9      	bne.n	800f040 <memcpy+0xe>
 800f04c:	bd10      	pop	{r4, pc}
	...

0800f050 <__assert_func>:
 800f050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f052:	4614      	mov	r4, r2
 800f054:	461a      	mov	r2, r3
 800f056:	4b09      	ldr	r3, [pc, #36]	@ (800f07c <__assert_func+0x2c>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4605      	mov	r5, r0
 800f05c:	68d8      	ldr	r0, [r3, #12]
 800f05e:	b14c      	cbz	r4, 800f074 <__assert_func+0x24>
 800f060:	4b07      	ldr	r3, [pc, #28]	@ (800f080 <__assert_func+0x30>)
 800f062:	9100      	str	r1, [sp, #0]
 800f064:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f068:	4906      	ldr	r1, [pc, #24]	@ (800f084 <__assert_func+0x34>)
 800f06a:	462b      	mov	r3, r5
 800f06c:	f000 fde0 	bl	800fc30 <fiprintf>
 800f070:	f000 fe94 	bl	800fd9c <abort>
 800f074:	4b04      	ldr	r3, [pc, #16]	@ (800f088 <__assert_func+0x38>)
 800f076:	461c      	mov	r4, r3
 800f078:	e7f3      	b.n	800f062 <__assert_func+0x12>
 800f07a:	bf00      	nop
 800f07c:	20000038 	.word	0x20000038
 800f080:	08012e47 	.word	0x08012e47
 800f084:	08012e54 	.word	0x08012e54
 800f088:	08012e82 	.word	0x08012e82

0800f08c <_free_r>:
 800f08c:	b538      	push	{r3, r4, r5, lr}
 800f08e:	4605      	mov	r5, r0
 800f090:	2900      	cmp	r1, #0
 800f092:	d041      	beq.n	800f118 <_free_r+0x8c>
 800f094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f098:	1f0c      	subs	r4, r1, #4
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	bfb8      	it	lt
 800f09e:	18e4      	addlt	r4, r4, r3
 800f0a0:	f000 f8e8 	bl	800f274 <__malloc_lock>
 800f0a4:	4a1d      	ldr	r2, [pc, #116]	@ (800f11c <_free_r+0x90>)
 800f0a6:	6813      	ldr	r3, [r2, #0]
 800f0a8:	b933      	cbnz	r3, 800f0b8 <_free_r+0x2c>
 800f0aa:	6063      	str	r3, [r4, #4]
 800f0ac:	6014      	str	r4, [r2, #0]
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0b4:	f000 b8e4 	b.w	800f280 <__malloc_unlock>
 800f0b8:	42a3      	cmp	r3, r4
 800f0ba:	d908      	bls.n	800f0ce <_free_r+0x42>
 800f0bc:	6820      	ldr	r0, [r4, #0]
 800f0be:	1821      	adds	r1, r4, r0
 800f0c0:	428b      	cmp	r3, r1
 800f0c2:	bf01      	itttt	eq
 800f0c4:	6819      	ldreq	r1, [r3, #0]
 800f0c6:	685b      	ldreq	r3, [r3, #4]
 800f0c8:	1809      	addeq	r1, r1, r0
 800f0ca:	6021      	streq	r1, [r4, #0]
 800f0cc:	e7ed      	b.n	800f0aa <_free_r+0x1e>
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	b10b      	cbz	r3, 800f0d8 <_free_r+0x4c>
 800f0d4:	42a3      	cmp	r3, r4
 800f0d6:	d9fa      	bls.n	800f0ce <_free_r+0x42>
 800f0d8:	6811      	ldr	r1, [r2, #0]
 800f0da:	1850      	adds	r0, r2, r1
 800f0dc:	42a0      	cmp	r0, r4
 800f0de:	d10b      	bne.n	800f0f8 <_free_r+0x6c>
 800f0e0:	6820      	ldr	r0, [r4, #0]
 800f0e2:	4401      	add	r1, r0
 800f0e4:	1850      	adds	r0, r2, r1
 800f0e6:	4283      	cmp	r3, r0
 800f0e8:	6011      	str	r1, [r2, #0]
 800f0ea:	d1e0      	bne.n	800f0ae <_free_r+0x22>
 800f0ec:	6818      	ldr	r0, [r3, #0]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	6053      	str	r3, [r2, #4]
 800f0f2:	4408      	add	r0, r1
 800f0f4:	6010      	str	r0, [r2, #0]
 800f0f6:	e7da      	b.n	800f0ae <_free_r+0x22>
 800f0f8:	d902      	bls.n	800f100 <_free_r+0x74>
 800f0fa:	230c      	movs	r3, #12
 800f0fc:	602b      	str	r3, [r5, #0]
 800f0fe:	e7d6      	b.n	800f0ae <_free_r+0x22>
 800f100:	6820      	ldr	r0, [r4, #0]
 800f102:	1821      	adds	r1, r4, r0
 800f104:	428b      	cmp	r3, r1
 800f106:	bf04      	itt	eq
 800f108:	6819      	ldreq	r1, [r3, #0]
 800f10a:	685b      	ldreq	r3, [r3, #4]
 800f10c:	6063      	str	r3, [r4, #4]
 800f10e:	bf04      	itt	eq
 800f110:	1809      	addeq	r1, r1, r0
 800f112:	6021      	streq	r1, [r4, #0]
 800f114:	6054      	str	r4, [r2, #4]
 800f116:	e7ca      	b.n	800f0ae <_free_r+0x22>
 800f118:	bd38      	pop	{r3, r4, r5, pc}
 800f11a:	bf00      	nop
 800f11c:	20007f24 	.word	0x20007f24

0800f120 <malloc>:
 800f120:	4b02      	ldr	r3, [pc, #8]	@ (800f12c <malloc+0xc>)
 800f122:	4601      	mov	r1, r0
 800f124:	6818      	ldr	r0, [r3, #0]
 800f126:	f000 b825 	b.w	800f174 <_malloc_r>
 800f12a:	bf00      	nop
 800f12c:	20000038 	.word	0x20000038

0800f130 <sbrk_aligned>:
 800f130:	b570      	push	{r4, r5, r6, lr}
 800f132:	4e0f      	ldr	r6, [pc, #60]	@ (800f170 <sbrk_aligned+0x40>)
 800f134:	460c      	mov	r4, r1
 800f136:	6831      	ldr	r1, [r6, #0]
 800f138:	4605      	mov	r5, r0
 800f13a:	b911      	cbnz	r1, 800f142 <sbrk_aligned+0x12>
 800f13c:	f000 fe1e 	bl	800fd7c <_sbrk_r>
 800f140:	6030      	str	r0, [r6, #0]
 800f142:	4621      	mov	r1, r4
 800f144:	4628      	mov	r0, r5
 800f146:	f000 fe19 	bl	800fd7c <_sbrk_r>
 800f14a:	1c43      	adds	r3, r0, #1
 800f14c:	d103      	bne.n	800f156 <sbrk_aligned+0x26>
 800f14e:	f04f 34ff 	mov.w	r4, #4294967295
 800f152:	4620      	mov	r0, r4
 800f154:	bd70      	pop	{r4, r5, r6, pc}
 800f156:	1cc4      	adds	r4, r0, #3
 800f158:	f024 0403 	bic.w	r4, r4, #3
 800f15c:	42a0      	cmp	r0, r4
 800f15e:	d0f8      	beq.n	800f152 <sbrk_aligned+0x22>
 800f160:	1a21      	subs	r1, r4, r0
 800f162:	4628      	mov	r0, r5
 800f164:	f000 fe0a 	bl	800fd7c <_sbrk_r>
 800f168:	3001      	adds	r0, #1
 800f16a:	d1f2      	bne.n	800f152 <sbrk_aligned+0x22>
 800f16c:	e7ef      	b.n	800f14e <sbrk_aligned+0x1e>
 800f16e:	bf00      	nop
 800f170:	20007f20 	.word	0x20007f20

0800f174 <_malloc_r>:
 800f174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f178:	1ccd      	adds	r5, r1, #3
 800f17a:	f025 0503 	bic.w	r5, r5, #3
 800f17e:	3508      	adds	r5, #8
 800f180:	2d0c      	cmp	r5, #12
 800f182:	bf38      	it	cc
 800f184:	250c      	movcc	r5, #12
 800f186:	2d00      	cmp	r5, #0
 800f188:	4606      	mov	r6, r0
 800f18a:	db01      	blt.n	800f190 <_malloc_r+0x1c>
 800f18c:	42a9      	cmp	r1, r5
 800f18e:	d904      	bls.n	800f19a <_malloc_r+0x26>
 800f190:	230c      	movs	r3, #12
 800f192:	6033      	str	r3, [r6, #0]
 800f194:	2000      	movs	r0, #0
 800f196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f270 <_malloc_r+0xfc>
 800f19e:	f000 f869 	bl	800f274 <__malloc_lock>
 800f1a2:	f8d8 3000 	ldr.w	r3, [r8]
 800f1a6:	461c      	mov	r4, r3
 800f1a8:	bb44      	cbnz	r4, 800f1fc <_malloc_r+0x88>
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f7ff ffbf 	bl	800f130 <sbrk_aligned>
 800f1b2:	1c43      	adds	r3, r0, #1
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	d158      	bne.n	800f26a <_malloc_r+0xf6>
 800f1b8:	f8d8 4000 	ldr.w	r4, [r8]
 800f1bc:	4627      	mov	r7, r4
 800f1be:	2f00      	cmp	r7, #0
 800f1c0:	d143      	bne.n	800f24a <_malloc_r+0xd6>
 800f1c2:	2c00      	cmp	r4, #0
 800f1c4:	d04b      	beq.n	800f25e <_malloc_r+0xea>
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	eb04 0903 	add.w	r9, r4, r3
 800f1d0:	f000 fdd4 	bl	800fd7c <_sbrk_r>
 800f1d4:	4581      	cmp	r9, r0
 800f1d6:	d142      	bne.n	800f25e <_malloc_r+0xea>
 800f1d8:	6821      	ldr	r1, [r4, #0]
 800f1da:	1a6d      	subs	r5, r5, r1
 800f1dc:	4629      	mov	r1, r5
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f7ff ffa6 	bl	800f130 <sbrk_aligned>
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d03a      	beq.n	800f25e <_malloc_r+0xea>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	442b      	add	r3, r5
 800f1ec:	6023      	str	r3, [r4, #0]
 800f1ee:	f8d8 3000 	ldr.w	r3, [r8]
 800f1f2:	685a      	ldr	r2, [r3, #4]
 800f1f4:	bb62      	cbnz	r2, 800f250 <_malloc_r+0xdc>
 800f1f6:	f8c8 7000 	str.w	r7, [r8]
 800f1fa:	e00f      	b.n	800f21c <_malloc_r+0xa8>
 800f1fc:	6822      	ldr	r2, [r4, #0]
 800f1fe:	1b52      	subs	r2, r2, r5
 800f200:	d420      	bmi.n	800f244 <_malloc_r+0xd0>
 800f202:	2a0b      	cmp	r2, #11
 800f204:	d917      	bls.n	800f236 <_malloc_r+0xc2>
 800f206:	1961      	adds	r1, r4, r5
 800f208:	42a3      	cmp	r3, r4
 800f20a:	6025      	str	r5, [r4, #0]
 800f20c:	bf18      	it	ne
 800f20e:	6059      	strne	r1, [r3, #4]
 800f210:	6863      	ldr	r3, [r4, #4]
 800f212:	bf08      	it	eq
 800f214:	f8c8 1000 	streq.w	r1, [r8]
 800f218:	5162      	str	r2, [r4, r5]
 800f21a:	604b      	str	r3, [r1, #4]
 800f21c:	4630      	mov	r0, r6
 800f21e:	f000 f82f 	bl	800f280 <__malloc_unlock>
 800f222:	f104 000b 	add.w	r0, r4, #11
 800f226:	1d23      	adds	r3, r4, #4
 800f228:	f020 0007 	bic.w	r0, r0, #7
 800f22c:	1ac2      	subs	r2, r0, r3
 800f22e:	bf1c      	itt	ne
 800f230:	1a1b      	subne	r3, r3, r0
 800f232:	50a3      	strne	r3, [r4, r2]
 800f234:	e7af      	b.n	800f196 <_malloc_r+0x22>
 800f236:	6862      	ldr	r2, [r4, #4]
 800f238:	42a3      	cmp	r3, r4
 800f23a:	bf0c      	ite	eq
 800f23c:	f8c8 2000 	streq.w	r2, [r8]
 800f240:	605a      	strne	r2, [r3, #4]
 800f242:	e7eb      	b.n	800f21c <_malloc_r+0xa8>
 800f244:	4623      	mov	r3, r4
 800f246:	6864      	ldr	r4, [r4, #4]
 800f248:	e7ae      	b.n	800f1a8 <_malloc_r+0x34>
 800f24a:	463c      	mov	r4, r7
 800f24c:	687f      	ldr	r7, [r7, #4]
 800f24e:	e7b6      	b.n	800f1be <_malloc_r+0x4a>
 800f250:	461a      	mov	r2, r3
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	42a3      	cmp	r3, r4
 800f256:	d1fb      	bne.n	800f250 <_malloc_r+0xdc>
 800f258:	2300      	movs	r3, #0
 800f25a:	6053      	str	r3, [r2, #4]
 800f25c:	e7de      	b.n	800f21c <_malloc_r+0xa8>
 800f25e:	230c      	movs	r3, #12
 800f260:	6033      	str	r3, [r6, #0]
 800f262:	4630      	mov	r0, r6
 800f264:	f000 f80c 	bl	800f280 <__malloc_unlock>
 800f268:	e794      	b.n	800f194 <_malloc_r+0x20>
 800f26a:	6005      	str	r5, [r0, #0]
 800f26c:	e7d6      	b.n	800f21c <_malloc_r+0xa8>
 800f26e:	bf00      	nop
 800f270:	20007f24 	.word	0x20007f24

0800f274 <__malloc_lock>:
 800f274:	4801      	ldr	r0, [pc, #4]	@ (800f27c <__malloc_lock+0x8>)
 800f276:	f7ff beda 	b.w	800f02e <__retarget_lock_acquire_recursive>
 800f27a:	bf00      	nop
 800f27c:	20007f1c 	.word	0x20007f1c

0800f280 <__malloc_unlock>:
 800f280:	4801      	ldr	r0, [pc, #4]	@ (800f288 <__malloc_unlock+0x8>)
 800f282:	f7ff bed5 	b.w	800f030 <__retarget_lock_release_recursive>
 800f286:	bf00      	nop
 800f288:	20007f1c 	.word	0x20007f1c

0800f28c <__ssputs_r>:
 800f28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f290:	688e      	ldr	r6, [r1, #8]
 800f292:	461f      	mov	r7, r3
 800f294:	42be      	cmp	r6, r7
 800f296:	680b      	ldr	r3, [r1, #0]
 800f298:	4682      	mov	sl, r0
 800f29a:	460c      	mov	r4, r1
 800f29c:	4690      	mov	r8, r2
 800f29e:	d82d      	bhi.n	800f2fc <__ssputs_r+0x70>
 800f2a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f2a8:	d026      	beq.n	800f2f8 <__ssputs_r+0x6c>
 800f2aa:	6965      	ldr	r5, [r4, #20]
 800f2ac:	6909      	ldr	r1, [r1, #16]
 800f2ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2b2:	eba3 0901 	sub.w	r9, r3, r1
 800f2b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2ba:	1c7b      	adds	r3, r7, #1
 800f2bc:	444b      	add	r3, r9
 800f2be:	106d      	asrs	r5, r5, #1
 800f2c0:	429d      	cmp	r5, r3
 800f2c2:	bf38      	it	cc
 800f2c4:	461d      	movcc	r5, r3
 800f2c6:	0553      	lsls	r3, r2, #21
 800f2c8:	d527      	bpl.n	800f31a <__ssputs_r+0x8e>
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	f7ff ff52 	bl	800f174 <_malloc_r>
 800f2d0:	4606      	mov	r6, r0
 800f2d2:	b360      	cbz	r0, 800f32e <__ssputs_r+0xa2>
 800f2d4:	6921      	ldr	r1, [r4, #16]
 800f2d6:	464a      	mov	r2, r9
 800f2d8:	f7ff feab 	bl	800f032 <memcpy>
 800f2dc:	89a3      	ldrh	r3, [r4, #12]
 800f2de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f2e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2e6:	81a3      	strh	r3, [r4, #12]
 800f2e8:	6126      	str	r6, [r4, #16]
 800f2ea:	6165      	str	r5, [r4, #20]
 800f2ec:	444e      	add	r6, r9
 800f2ee:	eba5 0509 	sub.w	r5, r5, r9
 800f2f2:	6026      	str	r6, [r4, #0]
 800f2f4:	60a5      	str	r5, [r4, #8]
 800f2f6:	463e      	mov	r6, r7
 800f2f8:	42be      	cmp	r6, r7
 800f2fa:	d900      	bls.n	800f2fe <__ssputs_r+0x72>
 800f2fc:	463e      	mov	r6, r7
 800f2fe:	6820      	ldr	r0, [r4, #0]
 800f300:	4632      	mov	r2, r6
 800f302:	4641      	mov	r1, r8
 800f304:	f7ff fe05 	bl	800ef12 <memmove>
 800f308:	68a3      	ldr	r3, [r4, #8]
 800f30a:	1b9b      	subs	r3, r3, r6
 800f30c:	60a3      	str	r3, [r4, #8]
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	4433      	add	r3, r6
 800f312:	6023      	str	r3, [r4, #0]
 800f314:	2000      	movs	r0, #0
 800f316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f31a:	462a      	mov	r2, r5
 800f31c:	f000 fd45 	bl	800fdaa <_realloc_r>
 800f320:	4606      	mov	r6, r0
 800f322:	2800      	cmp	r0, #0
 800f324:	d1e0      	bne.n	800f2e8 <__ssputs_r+0x5c>
 800f326:	6921      	ldr	r1, [r4, #16]
 800f328:	4650      	mov	r0, sl
 800f32a:	f7ff feaf 	bl	800f08c <_free_r>
 800f32e:	230c      	movs	r3, #12
 800f330:	f8ca 3000 	str.w	r3, [sl]
 800f334:	89a3      	ldrh	r3, [r4, #12]
 800f336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f33a:	81a3      	strh	r3, [r4, #12]
 800f33c:	f04f 30ff 	mov.w	r0, #4294967295
 800f340:	e7e9      	b.n	800f316 <__ssputs_r+0x8a>
	...

0800f344 <_svfiprintf_r>:
 800f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	4698      	mov	r8, r3
 800f34a:	898b      	ldrh	r3, [r1, #12]
 800f34c:	061b      	lsls	r3, r3, #24
 800f34e:	b09d      	sub	sp, #116	@ 0x74
 800f350:	4607      	mov	r7, r0
 800f352:	460d      	mov	r5, r1
 800f354:	4614      	mov	r4, r2
 800f356:	d510      	bpl.n	800f37a <_svfiprintf_r+0x36>
 800f358:	690b      	ldr	r3, [r1, #16]
 800f35a:	b973      	cbnz	r3, 800f37a <_svfiprintf_r+0x36>
 800f35c:	2140      	movs	r1, #64	@ 0x40
 800f35e:	f7ff ff09 	bl	800f174 <_malloc_r>
 800f362:	6028      	str	r0, [r5, #0]
 800f364:	6128      	str	r0, [r5, #16]
 800f366:	b930      	cbnz	r0, 800f376 <_svfiprintf_r+0x32>
 800f368:	230c      	movs	r3, #12
 800f36a:	603b      	str	r3, [r7, #0]
 800f36c:	f04f 30ff 	mov.w	r0, #4294967295
 800f370:	b01d      	add	sp, #116	@ 0x74
 800f372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f376:	2340      	movs	r3, #64	@ 0x40
 800f378:	616b      	str	r3, [r5, #20]
 800f37a:	2300      	movs	r3, #0
 800f37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f37e:	2320      	movs	r3, #32
 800f380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f384:	f8cd 800c 	str.w	r8, [sp, #12]
 800f388:	2330      	movs	r3, #48	@ 0x30
 800f38a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f528 <_svfiprintf_r+0x1e4>
 800f38e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f392:	f04f 0901 	mov.w	r9, #1
 800f396:	4623      	mov	r3, r4
 800f398:	469a      	mov	sl, r3
 800f39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f39e:	b10a      	cbz	r2, 800f3a4 <_svfiprintf_r+0x60>
 800f3a0:	2a25      	cmp	r2, #37	@ 0x25
 800f3a2:	d1f9      	bne.n	800f398 <_svfiprintf_r+0x54>
 800f3a4:	ebba 0b04 	subs.w	fp, sl, r4
 800f3a8:	d00b      	beq.n	800f3c2 <_svfiprintf_r+0x7e>
 800f3aa:	465b      	mov	r3, fp
 800f3ac:	4622      	mov	r2, r4
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	f7ff ff6b 	bl	800f28c <__ssputs_r>
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	f000 80a7 	beq.w	800f50a <_svfiprintf_r+0x1c6>
 800f3bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3be:	445a      	add	r2, fp
 800f3c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	f000 809f 	beq.w	800f50a <_svfiprintf_r+0x1c6>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3d6:	f10a 0a01 	add.w	sl, sl, #1
 800f3da:	9304      	str	r3, [sp, #16]
 800f3dc:	9307      	str	r3, [sp, #28]
 800f3de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3e4:	4654      	mov	r4, sl
 800f3e6:	2205      	movs	r2, #5
 800f3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ec:	484e      	ldr	r0, [pc, #312]	@ (800f528 <_svfiprintf_r+0x1e4>)
 800f3ee:	f7f0 ff17 	bl	8000220 <memchr>
 800f3f2:	9a04      	ldr	r2, [sp, #16]
 800f3f4:	b9d8      	cbnz	r0, 800f42e <_svfiprintf_r+0xea>
 800f3f6:	06d0      	lsls	r0, r2, #27
 800f3f8:	bf44      	itt	mi
 800f3fa:	2320      	movmi	r3, #32
 800f3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f400:	0711      	lsls	r1, r2, #28
 800f402:	bf44      	itt	mi
 800f404:	232b      	movmi	r3, #43	@ 0x2b
 800f406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f40a:	f89a 3000 	ldrb.w	r3, [sl]
 800f40e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f410:	d015      	beq.n	800f43e <_svfiprintf_r+0xfa>
 800f412:	9a07      	ldr	r2, [sp, #28]
 800f414:	4654      	mov	r4, sl
 800f416:	2000      	movs	r0, #0
 800f418:	f04f 0c0a 	mov.w	ip, #10
 800f41c:	4621      	mov	r1, r4
 800f41e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f422:	3b30      	subs	r3, #48	@ 0x30
 800f424:	2b09      	cmp	r3, #9
 800f426:	d94b      	bls.n	800f4c0 <_svfiprintf_r+0x17c>
 800f428:	b1b0      	cbz	r0, 800f458 <_svfiprintf_r+0x114>
 800f42a:	9207      	str	r2, [sp, #28]
 800f42c:	e014      	b.n	800f458 <_svfiprintf_r+0x114>
 800f42e:	eba0 0308 	sub.w	r3, r0, r8
 800f432:	fa09 f303 	lsl.w	r3, r9, r3
 800f436:	4313      	orrs	r3, r2
 800f438:	9304      	str	r3, [sp, #16]
 800f43a:	46a2      	mov	sl, r4
 800f43c:	e7d2      	b.n	800f3e4 <_svfiprintf_r+0xa0>
 800f43e:	9b03      	ldr	r3, [sp, #12]
 800f440:	1d19      	adds	r1, r3, #4
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	9103      	str	r1, [sp, #12]
 800f446:	2b00      	cmp	r3, #0
 800f448:	bfbb      	ittet	lt
 800f44a:	425b      	neglt	r3, r3
 800f44c:	f042 0202 	orrlt.w	r2, r2, #2
 800f450:	9307      	strge	r3, [sp, #28]
 800f452:	9307      	strlt	r3, [sp, #28]
 800f454:	bfb8      	it	lt
 800f456:	9204      	strlt	r2, [sp, #16]
 800f458:	7823      	ldrb	r3, [r4, #0]
 800f45a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f45c:	d10a      	bne.n	800f474 <_svfiprintf_r+0x130>
 800f45e:	7863      	ldrb	r3, [r4, #1]
 800f460:	2b2a      	cmp	r3, #42	@ 0x2a
 800f462:	d132      	bne.n	800f4ca <_svfiprintf_r+0x186>
 800f464:	9b03      	ldr	r3, [sp, #12]
 800f466:	1d1a      	adds	r2, r3, #4
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	9203      	str	r2, [sp, #12]
 800f46c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f470:	3402      	adds	r4, #2
 800f472:	9305      	str	r3, [sp, #20]
 800f474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f538 <_svfiprintf_r+0x1f4>
 800f478:	7821      	ldrb	r1, [r4, #0]
 800f47a:	2203      	movs	r2, #3
 800f47c:	4650      	mov	r0, sl
 800f47e:	f7f0 fecf 	bl	8000220 <memchr>
 800f482:	b138      	cbz	r0, 800f494 <_svfiprintf_r+0x150>
 800f484:	9b04      	ldr	r3, [sp, #16]
 800f486:	eba0 000a 	sub.w	r0, r0, sl
 800f48a:	2240      	movs	r2, #64	@ 0x40
 800f48c:	4082      	lsls	r2, r0
 800f48e:	4313      	orrs	r3, r2
 800f490:	3401      	adds	r4, #1
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f498:	4824      	ldr	r0, [pc, #144]	@ (800f52c <_svfiprintf_r+0x1e8>)
 800f49a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f49e:	2206      	movs	r2, #6
 800f4a0:	f7f0 febe 	bl	8000220 <memchr>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d036      	beq.n	800f516 <_svfiprintf_r+0x1d2>
 800f4a8:	4b21      	ldr	r3, [pc, #132]	@ (800f530 <_svfiprintf_r+0x1ec>)
 800f4aa:	bb1b      	cbnz	r3, 800f4f4 <_svfiprintf_r+0x1b0>
 800f4ac:	9b03      	ldr	r3, [sp, #12]
 800f4ae:	3307      	adds	r3, #7
 800f4b0:	f023 0307 	bic.w	r3, r3, #7
 800f4b4:	3308      	adds	r3, #8
 800f4b6:	9303      	str	r3, [sp, #12]
 800f4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ba:	4433      	add	r3, r6
 800f4bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4be:	e76a      	b.n	800f396 <_svfiprintf_r+0x52>
 800f4c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4c4:	460c      	mov	r4, r1
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	e7a8      	b.n	800f41c <_svfiprintf_r+0xd8>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	3401      	adds	r4, #1
 800f4ce:	9305      	str	r3, [sp, #20]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	f04f 0c0a 	mov.w	ip, #10
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4dc:	3a30      	subs	r2, #48	@ 0x30
 800f4de:	2a09      	cmp	r2, #9
 800f4e0:	d903      	bls.n	800f4ea <_svfiprintf_r+0x1a6>
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d0c6      	beq.n	800f474 <_svfiprintf_r+0x130>
 800f4e6:	9105      	str	r1, [sp, #20]
 800f4e8:	e7c4      	b.n	800f474 <_svfiprintf_r+0x130>
 800f4ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e7f0      	b.n	800f4d6 <_svfiprintf_r+0x192>
 800f4f4:	ab03      	add	r3, sp, #12
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	462a      	mov	r2, r5
 800f4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f534 <_svfiprintf_r+0x1f0>)
 800f4fc:	a904      	add	r1, sp, #16
 800f4fe:	4638      	mov	r0, r7
 800f500:	f3af 8000 	nop.w
 800f504:	1c42      	adds	r2, r0, #1
 800f506:	4606      	mov	r6, r0
 800f508:	d1d6      	bne.n	800f4b8 <_svfiprintf_r+0x174>
 800f50a:	89ab      	ldrh	r3, [r5, #12]
 800f50c:	065b      	lsls	r3, r3, #25
 800f50e:	f53f af2d 	bmi.w	800f36c <_svfiprintf_r+0x28>
 800f512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f514:	e72c      	b.n	800f370 <_svfiprintf_r+0x2c>
 800f516:	ab03      	add	r3, sp, #12
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	462a      	mov	r2, r5
 800f51c:	4b05      	ldr	r3, [pc, #20]	@ (800f534 <_svfiprintf_r+0x1f0>)
 800f51e:	a904      	add	r1, sp, #16
 800f520:	4638      	mov	r0, r7
 800f522:	f000 f9bb 	bl	800f89c <_printf_i>
 800f526:	e7ed      	b.n	800f504 <_svfiprintf_r+0x1c0>
 800f528:	08012e83 	.word	0x08012e83
 800f52c:	08012e8d 	.word	0x08012e8d
 800f530:	00000000 	.word	0x00000000
 800f534:	0800f28d 	.word	0x0800f28d
 800f538:	08012e89 	.word	0x08012e89

0800f53c <__sfputc_r>:
 800f53c:	6893      	ldr	r3, [r2, #8]
 800f53e:	3b01      	subs	r3, #1
 800f540:	2b00      	cmp	r3, #0
 800f542:	b410      	push	{r4}
 800f544:	6093      	str	r3, [r2, #8]
 800f546:	da08      	bge.n	800f55a <__sfputc_r+0x1e>
 800f548:	6994      	ldr	r4, [r2, #24]
 800f54a:	42a3      	cmp	r3, r4
 800f54c:	db01      	blt.n	800f552 <__sfputc_r+0x16>
 800f54e:	290a      	cmp	r1, #10
 800f550:	d103      	bne.n	800f55a <__sfputc_r+0x1e>
 800f552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f556:	f000 bb7d 	b.w	800fc54 <__swbuf_r>
 800f55a:	6813      	ldr	r3, [r2, #0]
 800f55c:	1c58      	adds	r0, r3, #1
 800f55e:	6010      	str	r0, [r2, #0]
 800f560:	7019      	strb	r1, [r3, #0]
 800f562:	4608      	mov	r0, r1
 800f564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f568:	4770      	bx	lr

0800f56a <__sfputs_r>:
 800f56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56c:	4606      	mov	r6, r0
 800f56e:	460f      	mov	r7, r1
 800f570:	4614      	mov	r4, r2
 800f572:	18d5      	adds	r5, r2, r3
 800f574:	42ac      	cmp	r4, r5
 800f576:	d101      	bne.n	800f57c <__sfputs_r+0x12>
 800f578:	2000      	movs	r0, #0
 800f57a:	e007      	b.n	800f58c <__sfputs_r+0x22>
 800f57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f580:	463a      	mov	r2, r7
 800f582:	4630      	mov	r0, r6
 800f584:	f7ff ffda 	bl	800f53c <__sfputc_r>
 800f588:	1c43      	adds	r3, r0, #1
 800f58a:	d1f3      	bne.n	800f574 <__sfputs_r+0xa>
 800f58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f590 <_vfiprintf_r>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	460d      	mov	r5, r1
 800f596:	b09d      	sub	sp, #116	@ 0x74
 800f598:	4614      	mov	r4, r2
 800f59a:	4698      	mov	r8, r3
 800f59c:	4606      	mov	r6, r0
 800f59e:	b118      	cbz	r0, 800f5a8 <_vfiprintf_r+0x18>
 800f5a0:	6a03      	ldr	r3, [r0, #32]
 800f5a2:	b90b      	cbnz	r3, 800f5a8 <_vfiprintf_r+0x18>
 800f5a4:	f7ff fbf8 	bl	800ed98 <__sinit>
 800f5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5aa:	07d9      	lsls	r1, r3, #31
 800f5ac:	d405      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5ae:	89ab      	ldrh	r3, [r5, #12]
 800f5b0:	059a      	lsls	r2, r3, #22
 800f5b2:	d402      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5b6:	f7ff fd3a 	bl	800f02e <__retarget_lock_acquire_recursive>
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	071b      	lsls	r3, r3, #28
 800f5be:	d501      	bpl.n	800f5c4 <_vfiprintf_r+0x34>
 800f5c0:	692b      	ldr	r3, [r5, #16]
 800f5c2:	b99b      	cbnz	r3, 800f5ec <_vfiprintf_r+0x5c>
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f000 fb82 	bl	800fcd0 <__swsetup_r>
 800f5cc:	b170      	cbz	r0, 800f5ec <_vfiprintf_r+0x5c>
 800f5ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5d0:	07dc      	lsls	r4, r3, #31
 800f5d2:	d504      	bpl.n	800f5de <_vfiprintf_r+0x4e>
 800f5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d8:	b01d      	add	sp, #116	@ 0x74
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	0598      	lsls	r0, r3, #22
 800f5e2:	d4f7      	bmi.n	800f5d4 <_vfiprintf_r+0x44>
 800f5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5e6:	f7ff fd23 	bl	800f030 <__retarget_lock_release_recursive>
 800f5ea:	e7f3      	b.n	800f5d4 <_vfiprintf_r+0x44>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5f0:	2320      	movs	r3, #32
 800f5f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5fa:	2330      	movs	r3, #48	@ 0x30
 800f5fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f7ac <_vfiprintf_r+0x21c>
 800f600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f604:	f04f 0901 	mov.w	r9, #1
 800f608:	4623      	mov	r3, r4
 800f60a:	469a      	mov	sl, r3
 800f60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f610:	b10a      	cbz	r2, 800f616 <_vfiprintf_r+0x86>
 800f612:	2a25      	cmp	r2, #37	@ 0x25
 800f614:	d1f9      	bne.n	800f60a <_vfiprintf_r+0x7a>
 800f616:	ebba 0b04 	subs.w	fp, sl, r4
 800f61a:	d00b      	beq.n	800f634 <_vfiprintf_r+0xa4>
 800f61c:	465b      	mov	r3, fp
 800f61e:	4622      	mov	r2, r4
 800f620:	4629      	mov	r1, r5
 800f622:	4630      	mov	r0, r6
 800f624:	f7ff ffa1 	bl	800f56a <__sfputs_r>
 800f628:	3001      	adds	r0, #1
 800f62a:	f000 80a7 	beq.w	800f77c <_vfiprintf_r+0x1ec>
 800f62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f630:	445a      	add	r2, fp
 800f632:	9209      	str	r2, [sp, #36]	@ 0x24
 800f634:	f89a 3000 	ldrb.w	r3, [sl]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 809f 	beq.w	800f77c <_vfiprintf_r+0x1ec>
 800f63e:	2300      	movs	r3, #0
 800f640:	f04f 32ff 	mov.w	r2, #4294967295
 800f644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f648:	f10a 0a01 	add.w	sl, sl, #1
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	9307      	str	r3, [sp, #28]
 800f650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f654:	931a      	str	r3, [sp, #104]	@ 0x68
 800f656:	4654      	mov	r4, sl
 800f658:	2205      	movs	r2, #5
 800f65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65e:	4853      	ldr	r0, [pc, #332]	@ (800f7ac <_vfiprintf_r+0x21c>)
 800f660:	f7f0 fdde 	bl	8000220 <memchr>
 800f664:	9a04      	ldr	r2, [sp, #16]
 800f666:	b9d8      	cbnz	r0, 800f6a0 <_vfiprintf_r+0x110>
 800f668:	06d1      	lsls	r1, r2, #27
 800f66a:	bf44      	itt	mi
 800f66c:	2320      	movmi	r3, #32
 800f66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f672:	0713      	lsls	r3, r2, #28
 800f674:	bf44      	itt	mi
 800f676:	232b      	movmi	r3, #43	@ 0x2b
 800f678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f67c:	f89a 3000 	ldrb.w	r3, [sl]
 800f680:	2b2a      	cmp	r3, #42	@ 0x2a
 800f682:	d015      	beq.n	800f6b0 <_vfiprintf_r+0x120>
 800f684:	9a07      	ldr	r2, [sp, #28]
 800f686:	4654      	mov	r4, sl
 800f688:	2000      	movs	r0, #0
 800f68a:	f04f 0c0a 	mov.w	ip, #10
 800f68e:	4621      	mov	r1, r4
 800f690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f694:	3b30      	subs	r3, #48	@ 0x30
 800f696:	2b09      	cmp	r3, #9
 800f698:	d94b      	bls.n	800f732 <_vfiprintf_r+0x1a2>
 800f69a:	b1b0      	cbz	r0, 800f6ca <_vfiprintf_r+0x13a>
 800f69c:	9207      	str	r2, [sp, #28]
 800f69e:	e014      	b.n	800f6ca <_vfiprintf_r+0x13a>
 800f6a0:	eba0 0308 	sub.w	r3, r0, r8
 800f6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	46a2      	mov	sl, r4
 800f6ae:	e7d2      	b.n	800f656 <_vfiprintf_r+0xc6>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	1d19      	adds	r1, r3, #4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	9103      	str	r1, [sp, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bfbb      	ittet	lt
 800f6bc:	425b      	neglt	r3, r3
 800f6be:	f042 0202 	orrlt.w	r2, r2, #2
 800f6c2:	9307      	strge	r3, [sp, #28]
 800f6c4:	9307      	strlt	r3, [sp, #28]
 800f6c6:	bfb8      	it	lt
 800f6c8:	9204      	strlt	r2, [sp, #16]
 800f6ca:	7823      	ldrb	r3, [r4, #0]
 800f6cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6ce:	d10a      	bne.n	800f6e6 <_vfiprintf_r+0x156>
 800f6d0:	7863      	ldrb	r3, [r4, #1]
 800f6d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6d4:	d132      	bne.n	800f73c <_vfiprintf_r+0x1ac>
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	1d1a      	adds	r2, r3, #4
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	9203      	str	r2, [sp, #12]
 800f6de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6e2:	3402      	adds	r4, #2
 800f6e4:	9305      	str	r3, [sp, #20]
 800f6e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f7bc <_vfiprintf_r+0x22c>
 800f6ea:	7821      	ldrb	r1, [r4, #0]
 800f6ec:	2203      	movs	r2, #3
 800f6ee:	4650      	mov	r0, sl
 800f6f0:	f7f0 fd96 	bl	8000220 <memchr>
 800f6f4:	b138      	cbz	r0, 800f706 <_vfiprintf_r+0x176>
 800f6f6:	9b04      	ldr	r3, [sp, #16]
 800f6f8:	eba0 000a 	sub.w	r0, r0, sl
 800f6fc:	2240      	movs	r2, #64	@ 0x40
 800f6fe:	4082      	lsls	r2, r0
 800f700:	4313      	orrs	r3, r2
 800f702:	3401      	adds	r4, #1
 800f704:	9304      	str	r3, [sp, #16]
 800f706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70a:	4829      	ldr	r0, [pc, #164]	@ (800f7b0 <_vfiprintf_r+0x220>)
 800f70c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f710:	2206      	movs	r2, #6
 800f712:	f7f0 fd85 	bl	8000220 <memchr>
 800f716:	2800      	cmp	r0, #0
 800f718:	d03f      	beq.n	800f79a <_vfiprintf_r+0x20a>
 800f71a:	4b26      	ldr	r3, [pc, #152]	@ (800f7b4 <_vfiprintf_r+0x224>)
 800f71c:	bb1b      	cbnz	r3, 800f766 <_vfiprintf_r+0x1d6>
 800f71e:	9b03      	ldr	r3, [sp, #12]
 800f720:	3307      	adds	r3, #7
 800f722:	f023 0307 	bic.w	r3, r3, #7
 800f726:	3308      	adds	r3, #8
 800f728:	9303      	str	r3, [sp, #12]
 800f72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f72c:	443b      	add	r3, r7
 800f72e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f730:	e76a      	b.n	800f608 <_vfiprintf_r+0x78>
 800f732:	fb0c 3202 	mla	r2, ip, r2, r3
 800f736:	460c      	mov	r4, r1
 800f738:	2001      	movs	r0, #1
 800f73a:	e7a8      	b.n	800f68e <_vfiprintf_r+0xfe>
 800f73c:	2300      	movs	r3, #0
 800f73e:	3401      	adds	r4, #1
 800f740:	9305      	str	r3, [sp, #20]
 800f742:	4619      	mov	r1, r3
 800f744:	f04f 0c0a 	mov.w	ip, #10
 800f748:	4620      	mov	r0, r4
 800f74a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f74e:	3a30      	subs	r2, #48	@ 0x30
 800f750:	2a09      	cmp	r2, #9
 800f752:	d903      	bls.n	800f75c <_vfiprintf_r+0x1cc>
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0c6      	beq.n	800f6e6 <_vfiprintf_r+0x156>
 800f758:	9105      	str	r1, [sp, #20]
 800f75a:	e7c4      	b.n	800f6e6 <_vfiprintf_r+0x156>
 800f75c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f760:	4604      	mov	r4, r0
 800f762:	2301      	movs	r3, #1
 800f764:	e7f0      	b.n	800f748 <_vfiprintf_r+0x1b8>
 800f766:	ab03      	add	r3, sp, #12
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	462a      	mov	r2, r5
 800f76c:	4b12      	ldr	r3, [pc, #72]	@ (800f7b8 <_vfiprintf_r+0x228>)
 800f76e:	a904      	add	r1, sp, #16
 800f770:	4630      	mov	r0, r6
 800f772:	f3af 8000 	nop.w
 800f776:	4607      	mov	r7, r0
 800f778:	1c78      	adds	r0, r7, #1
 800f77a:	d1d6      	bne.n	800f72a <_vfiprintf_r+0x19a>
 800f77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f77e:	07d9      	lsls	r1, r3, #31
 800f780:	d405      	bmi.n	800f78e <_vfiprintf_r+0x1fe>
 800f782:	89ab      	ldrh	r3, [r5, #12]
 800f784:	059a      	lsls	r2, r3, #22
 800f786:	d402      	bmi.n	800f78e <_vfiprintf_r+0x1fe>
 800f788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f78a:	f7ff fc51 	bl	800f030 <__retarget_lock_release_recursive>
 800f78e:	89ab      	ldrh	r3, [r5, #12]
 800f790:	065b      	lsls	r3, r3, #25
 800f792:	f53f af1f 	bmi.w	800f5d4 <_vfiprintf_r+0x44>
 800f796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f798:	e71e      	b.n	800f5d8 <_vfiprintf_r+0x48>
 800f79a:	ab03      	add	r3, sp, #12
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	462a      	mov	r2, r5
 800f7a0:	4b05      	ldr	r3, [pc, #20]	@ (800f7b8 <_vfiprintf_r+0x228>)
 800f7a2:	a904      	add	r1, sp, #16
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f000 f879 	bl	800f89c <_printf_i>
 800f7aa:	e7e4      	b.n	800f776 <_vfiprintf_r+0x1e6>
 800f7ac:	08012e83 	.word	0x08012e83
 800f7b0:	08012e8d 	.word	0x08012e8d
 800f7b4:	00000000 	.word	0x00000000
 800f7b8:	0800f56b 	.word	0x0800f56b
 800f7bc:	08012e89 	.word	0x08012e89

0800f7c0 <_printf_common>:
 800f7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7c4:	4616      	mov	r6, r2
 800f7c6:	4698      	mov	r8, r3
 800f7c8:	688a      	ldr	r2, [r1, #8]
 800f7ca:	690b      	ldr	r3, [r1, #16]
 800f7cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	bfb8      	it	lt
 800f7d4:	4613      	movlt	r3, r2
 800f7d6:	6033      	str	r3, [r6, #0]
 800f7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f7dc:	4607      	mov	r7, r0
 800f7de:	460c      	mov	r4, r1
 800f7e0:	b10a      	cbz	r2, 800f7e6 <_printf_common+0x26>
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	6033      	str	r3, [r6, #0]
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	0699      	lsls	r1, r3, #26
 800f7ea:	bf42      	ittt	mi
 800f7ec:	6833      	ldrmi	r3, [r6, #0]
 800f7ee:	3302      	addmi	r3, #2
 800f7f0:	6033      	strmi	r3, [r6, #0]
 800f7f2:	6825      	ldr	r5, [r4, #0]
 800f7f4:	f015 0506 	ands.w	r5, r5, #6
 800f7f8:	d106      	bne.n	800f808 <_printf_common+0x48>
 800f7fa:	f104 0a19 	add.w	sl, r4, #25
 800f7fe:	68e3      	ldr	r3, [r4, #12]
 800f800:	6832      	ldr	r2, [r6, #0]
 800f802:	1a9b      	subs	r3, r3, r2
 800f804:	42ab      	cmp	r3, r5
 800f806:	dc26      	bgt.n	800f856 <_printf_common+0x96>
 800f808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f80c:	6822      	ldr	r2, [r4, #0]
 800f80e:	3b00      	subs	r3, #0
 800f810:	bf18      	it	ne
 800f812:	2301      	movne	r3, #1
 800f814:	0692      	lsls	r2, r2, #26
 800f816:	d42b      	bmi.n	800f870 <_printf_common+0xb0>
 800f818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f81c:	4641      	mov	r1, r8
 800f81e:	4638      	mov	r0, r7
 800f820:	47c8      	blx	r9
 800f822:	3001      	adds	r0, #1
 800f824:	d01e      	beq.n	800f864 <_printf_common+0xa4>
 800f826:	6823      	ldr	r3, [r4, #0]
 800f828:	6922      	ldr	r2, [r4, #16]
 800f82a:	f003 0306 	and.w	r3, r3, #6
 800f82e:	2b04      	cmp	r3, #4
 800f830:	bf02      	ittt	eq
 800f832:	68e5      	ldreq	r5, [r4, #12]
 800f834:	6833      	ldreq	r3, [r6, #0]
 800f836:	1aed      	subeq	r5, r5, r3
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	bf0c      	ite	eq
 800f83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f840:	2500      	movne	r5, #0
 800f842:	4293      	cmp	r3, r2
 800f844:	bfc4      	itt	gt
 800f846:	1a9b      	subgt	r3, r3, r2
 800f848:	18ed      	addgt	r5, r5, r3
 800f84a:	2600      	movs	r6, #0
 800f84c:	341a      	adds	r4, #26
 800f84e:	42b5      	cmp	r5, r6
 800f850:	d11a      	bne.n	800f888 <_printf_common+0xc8>
 800f852:	2000      	movs	r0, #0
 800f854:	e008      	b.n	800f868 <_printf_common+0xa8>
 800f856:	2301      	movs	r3, #1
 800f858:	4652      	mov	r2, sl
 800f85a:	4641      	mov	r1, r8
 800f85c:	4638      	mov	r0, r7
 800f85e:	47c8      	blx	r9
 800f860:	3001      	adds	r0, #1
 800f862:	d103      	bne.n	800f86c <_printf_common+0xac>
 800f864:	f04f 30ff 	mov.w	r0, #4294967295
 800f868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f86c:	3501      	adds	r5, #1
 800f86e:	e7c6      	b.n	800f7fe <_printf_common+0x3e>
 800f870:	18e1      	adds	r1, r4, r3
 800f872:	1c5a      	adds	r2, r3, #1
 800f874:	2030      	movs	r0, #48	@ 0x30
 800f876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f87a:	4422      	add	r2, r4
 800f87c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f884:	3302      	adds	r3, #2
 800f886:	e7c7      	b.n	800f818 <_printf_common+0x58>
 800f888:	2301      	movs	r3, #1
 800f88a:	4622      	mov	r2, r4
 800f88c:	4641      	mov	r1, r8
 800f88e:	4638      	mov	r0, r7
 800f890:	47c8      	blx	r9
 800f892:	3001      	adds	r0, #1
 800f894:	d0e6      	beq.n	800f864 <_printf_common+0xa4>
 800f896:	3601      	adds	r6, #1
 800f898:	e7d9      	b.n	800f84e <_printf_common+0x8e>
	...

0800f89c <_printf_i>:
 800f89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a0:	7e0f      	ldrb	r7, [r1, #24]
 800f8a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f8a4:	2f78      	cmp	r7, #120	@ 0x78
 800f8a6:	4691      	mov	r9, r2
 800f8a8:	4680      	mov	r8, r0
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	469a      	mov	sl, r3
 800f8ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f8b2:	d807      	bhi.n	800f8c4 <_printf_i+0x28>
 800f8b4:	2f62      	cmp	r7, #98	@ 0x62
 800f8b6:	d80a      	bhi.n	800f8ce <_printf_i+0x32>
 800f8b8:	2f00      	cmp	r7, #0
 800f8ba:	f000 80d1 	beq.w	800fa60 <_printf_i+0x1c4>
 800f8be:	2f58      	cmp	r7, #88	@ 0x58
 800f8c0:	f000 80b8 	beq.w	800fa34 <_printf_i+0x198>
 800f8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f8cc:	e03a      	b.n	800f944 <_printf_i+0xa8>
 800f8ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f8d2:	2b15      	cmp	r3, #21
 800f8d4:	d8f6      	bhi.n	800f8c4 <_printf_i+0x28>
 800f8d6:	a101      	add	r1, pc, #4	@ (adr r1, 800f8dc <_printf_i+0x40>)
 800f8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8dc:	0800f935 	.word	0x0800f935
 800f8e0:	0800f949 	.word	0x0800f949
 800f8e4:	0800f8c5 	.word	0x0800f8c5
 800f8e8:	0800f8c5 	.word	0x0800f8c5
 800f8ec:	0800f8c5 	.word	0x0800f8c5
 800f8f0:	0800f8c5 	.word	0x0800f8c5
 800f8f4:	0800f949 	.word	0x0800f949
 800f8f8:	0800f8c5 	.word	0x0800f8c5
 800f8fc:	0800f8c5 	.word	0x0800f8c5
 800f900:	0800f8c5 	.word	0x0800f8c5
 800f904:	0800f8c5 	.word	0x0800f8c5
 800f908:	0800fa47 	.word	0x0800fa47
 800f90c:	0800f973 	.word	0x0800f973
 800f910:	0800fa01 	.word	0x0800fa01
 800f914:	0800f8c5 	.word	0x0800f8c5
 800f918:	0800f8c5 	.word	0x0800f8c5
 800f91c:	0800fa69 	.word	0x0800fa69
 800f920:	0800f8c5 	.word	0x0800f8c5
 800f924:	0800f973 	.word	0x0800f973
 800f928:	0800f8c5 	.word	0x0800f8c5
 800f92c:	0800f8c5 	.word	0x0800f8c5
 800f930:	0800fa09 	.word	0x0800fa09
 800f934:	6833      	ldr	r3, [r6, #0]
 800f936:	1d1a      	adds	r2, r3, #4
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	6032      	str	r2, [r6, #0]
 800f93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f944:	2301      	movs	r3, #1
 800f946:	e09c      	b.n	800fa82 <_printf_i+0x1e6>
 800f948:	6833      	ldr	r3, [r6, #0]
 800f94a:	6820      	ldr	r0, [r4, #0]
 800f94c:	1d19      	adds	r1, r3, #4
 800f94e:	6031      	str	r1, [r6, #0]
 800f950:	0606      	lsls	r6, r0, #24
 800f952:	d501      	bpl.n	800f958 <_printf_i+0xbc>
 800f954:	681d      	ldr	r5, [r3, #0]
 800f956:	e003      	b.n	800f960 <_printf_i+0xc4>
 800f958:	0645      	lsls	r5, r0, #25
 800f95a:	d5fb      	bpl.n	800f954 <_printf_i+0xb8>
 800f95c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f960:	2d00      	cmp	r5, #0
 800f962:	da03      	bge.n	800f96c <_printf_i+0xd0>
 800f964:	232d      	movs	r3, #45	@ 0x2d
 800f966:	426d      	negs	r5, r5
 800f968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f96c:	4858      	ldr	r0, [pc, #352]	@ (800fad0 <_printf_i+0x234>)
 800f96e:	230a      	movs	r3, #10
 800f970:	e011      	b.n	800f996 <_printf_i+0xfa>
 800f972:	6821      	ldr	r1, [r4, #0]
 800f974:	6833      	ldr	r3, [r6, #0]
 800f976:	0608      	lsls	r0, r1, #24
 800f978:	f853 5b04 	ldr.w	r5, [r3], #4
 800f97c:	d402      	bmi.n	800f984 <_printf_i+0xe8>
 800f97e:	0649      	lsls	r1, r1, #25
 800f980:	bf48      	it	mi
 800f982:	b2ad      	uxthmi	r5, r5
 800f984:	2f6f      	cmp	r7, #111	@ 0x6f
 800f986:	4852      	ldr	r0, [pc, #328]	@ (800fad0 <_printf_i+0x234>)
 800f988:	6033      	str	r3, [r6, #0]
 800f98a:	bf14      	ite	ne
 800f98c:	230a      	movne	r3, #10
 800f98e:	2308      	moveq	r3, #8
 800f990:	2100      	movs	r1, #0
 800f992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f996:	6866      	ldr	r6, [r4, #4]
 800f998:	60a6      	str	r6, [r4, #8]
 800f99a:	2e00      	cmp	r6, #0
 800f99c:	db05      	blt.n	800f9aa <_printf_i+0x10e>
 800f99e:	6821      	ldr	r1, [r4, #0]
 800f9a0:	432e      	orrs	r6, r5
 800f9a2:	f021 0104 	bic.w	r1, r1, #4
 800f9a6:	6021      	str	r1, [r4, #0]
 800f9a8:	d04b      	beq.n	800fa42 <_printf_i+0x1a6>
 800f9aa:	4616      	mov	r6, r2
 800f9ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9b0:	fb03 5711 	mls	r7, r3, r1, r5
 800f9b4:	5dc7      	ldrb	r7, [r0, r7]
 800f9b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f9ba:	462f      	mov	r7, r5
 800f9bc:	42bb      	cmp	r3, r7
 800f9be:	460d      	mov	r5, r1
 800f9c0:	d9f4      	bls.n	800f9ac <_printf_i+0x110>
 800f9c2:	2b08      	cmp	r3, #8
 800f9c4:	d10b      	bne.n	800f9de <_printf_i+0x142>
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	07df      	lsls	r7, r3, #31
 800f9ca:	d508      	bpl.n	800f9de <_printf_i+0x142>
 800f9cc:	6923      	ldr	r3, [r4, #16]
 800f9ce:	6861      	ldr	r1, [r4, #4]
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	bfde      	ittt	le
 800f9d4:	2330      	movle	r3, #48	@ 0x30
 800f9d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f9da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f9de:	1b92      	subs	r2, r2, r6
 800f9e0:	6122      	str	r2, [r4, #16]
 800f9e2:	f8cd a000 	str.w	sl, [sp]
 800f9e6:	464b      	mov	r3, r9
 800f9e8:	aa03      	add	r2, sp, #12
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	f7ff fee7 	bl	800f7c0 <_printf_common>
 800f9f2:	3001      	adds	r0, #1
 800f9f4:	d14a      	bne.n	800fa8c <_printf_i+0x1f0>
 800f9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9fa:	b004      	add	sp, #16
 800f9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa00:	6823      	ldr	r3, [r4, #0]
 800fa02:	f043 0320 	orr.w	r3, r3, #32
 800fa06:	6023      	str	r3, [r4, #0]
 800fa08:	4832      	ldr	r0, [pc, #200]	@ (800fad4 <_printf_i+0x238>)
 800fa0a:	2778      	movs	r7, #120	@ 0x78
 800fa0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	6831      	ldr	r1, [r6, #0]
 800fa14:	061f      	lsls	r7, r3, #24
 800fa16:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa1a:	d402      	bmi.n	800fa22 <_printf_i+0x186>
 800fa1c:	065f      	lsls	r7, r3, #25
 800fa1e:	bf48      	it	mi
 800fa20:	b2ad      	uxthmi	r5, r5
 800fa22:	6031      	str	r1, [r6, #0]
 800fa24:	07d9      	lsls	r1, r3, #31
 800fa26:	bf44      	itt	mi
 800fa28:	f043 0320 	orrmi.w	r3, r3, #32
 800fa2c:	6023      	strmi	r3, [r4, #0]
 800fa2e:	b11d      	cbz	r5, 800fa38 <_printf_i+0x19c>
 800fa30:	2310      	movs	r3, #16
 800fa32:	e7ad      	b.n	800f990 <_printf_i+0xf4>
 800fa34:	4826      	ldr	r0, [pc, #152]	@ (800fad0 <_printf_i+0x234>)
 800fa36:	e7e9      	b.n	800fa0c <_printf_i+0x170>
 800fa38:	6823      	ldr	r3, [r4, #0]
 800fa3a:	f023 0320 	bic.w	r3, r3, #32
 800fa3e:	6023      	str	r3, [r4, #0]
 800fa40:	e7f6      	b.n	800fa30 <_printf_i+0x194>
 800fa42:	4616      	mov	r6, r2
 800fa44:	e7bd      	b.n	800f9c2 <_printf_i+0x126>
 800fa46:	6833      	ldr	r3, [r6, #0]
 800fa48:	6825      	ldr	r5, [r4, #0]
 800fa4a:	6961      	ldr	r1, [r4, #20]
 800fa4c:	1d18      	adds	r0, r3, #4
 800fa4e:	6030      	str	r0, [r6, #0]
 800fa50:	062e      	lsls	r6, r5, #24
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	d501      	bpl.n	800fa5a <_printf_i+0x1be>
 800fa56:	6019      	str	r1, [r3, #0]
 800fa58:	e002      	b.n	800fa60 <_printf_i+0x1c4>
 800fa5a:	0668      	lsls	r0, r5, #25
 800fa5c:	d5fb      	bpl.n	800fa56 <_printf_i+0x1ba>
 800fa5e:	8019      	strh	r1, [r3, #0]
 800fa60:	2300      	movs	r3, #0
 800fa62:	6123      	str	r3, [r4, #16]
 800fa64:	4616      	mov	r6, r2
 800fa66:	e7bc      	b.n	800f9e2 <_printf_i+0x146>
 800fa68:	6833      	ldr	r3, [r6, #0]
 800fa6a:	1d1a      	adds	r2, r3, #4
 800fa6c:	6032      	str	r2, [r6, #0]
 800fa6e:	681e      	ldr	r6, [r3, #0]
 800fa70:	6862      	ldr	r2, [r4, #4]
 800fa72:	2100      	movs	r1, #0
 800fa74:	4630      	mov	r0, r6
 800fa76:	f7f0 fbd3 	bl	8000220 <memchr>
 800fa7a:	b108      	cbz	r0, 800fa80 <_printf_i+0x1e4>
 800fa7c:	1b80      	subs	r0, r0, r6
 800fa7e:	6060      	str	r0, [r4, #4]
 800fa80:	6863      	ldr	r3, [r4, #4]
 800fa82:	6123      	str	r3, [r4, #16]
 800fa84:	2300      	movs	r3, #0
 800fa86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa8a:	e7aa      	b.n	800f9e2 <_printf_i+0x146>
 800fa8c:	6923      	ldr	r3, [r4, #16]
 800fa8e:	4632      	mov	r2, r6
 800fa90:	4649      	mov	r1, r9
 800fa92:	4640      	mov	r0, r8
 800fa94:	47d0      	blx	sl
 800fa96:	3001      	adds	r0, #1
 800fa98:	d0ad      	beq.n	800f9f6 <_printf_i+0x15a>
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	079b      	lsls	r3, r3, #30
 800fa9e:	d413      	bmi.n	800fac8 <_printf_i+0x22c>
 800faa0:	68e0      	ldr	r0, [r4, #12]
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	4298      	cmp	r0, r3
 800faa6:	bfb8      	it	lt
 800faa8:	4618      	movlt	r0, r3
 800faaa:	e7a6      	b.n	800f9fa <_printf_i+0x15e>
 800faac:	2301      	movs	r3, #1
 800faae:	4632      	mov	r2, r6
 800fab0:	4649      	mov	r1, r9
 800fab2:	4640      	mov	r0, r8
 800fab4:	47d0      	blx	sl
 800fab6:	3001      	adds	r0, #1
 800fab8:	d09d      	beq.n	800f9f6 <_printf_i+0x15a>
 800faba:	3501      	adds	r5, #1
 800fabc:	68e3      	ldr	r3, [r4, #12]
 800fabe:	9903      	ldr	r1, [sp, #12]
 800fac0:	1a5b      	subs	r3, r3, r1
 800fac2:	42ab      	cmp	r3, r5
 800fac4:	dcf2      	bgt.n	800faac <_printf_i+0x210>
 800fac6:	e7eb      	b.n	800faa0 <_printf_i+0x204>
 800fac8:	2500      	movs	r5, #0
 800faca:	f104 0619 	add.w	r6, r4, #25
 800face:	e7f5      	b.n	800fabc <_printf_i+0x220>
 800fad0:	08012e94 	.word	0x08012e94
 800fad4:	08012ea5 	.word	0x08012ea5

0800fad8 <__sflush_r>:
 800fad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae0:	0716      	lsls	r6, r2, #28
 800fae2:	4605      	mov	r5, r0
 800fae4:	460c      	mov	r4, r1
 800fae6:	d454      	bmi.n	800fb92 <__sflush_r+0xba>
 800fae8:	684b      	ldr	r3, [r1, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	dc02      	bgt.n	800faf4 <__sflush_r+0x1c>
 800faee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	dd48      	ble.n	800fb86 <__sflush_r+0xae>
 800faf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faf6:	2e00      	cmp	r6, #0
 800faf8:	d045      	beq.n	800fb86 <__sflush_r+0xae>
 800fafa:	2300      	movs	r3, #0
 800fafc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb00:	682f      	ldr	r7, [r5, #0]
 800fb02:	6a21      	ldr	r1, [r4, #32]
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	d030      	beq.n	800fb6a <__sflush_r+0x92>
 800fb08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb0a:	89a3      	ldrh	r3, [r4, #12]
 800fb0c:	0759      	lsls	r1, r3, #29
 800fb0e:	d505      	bpl.n	800fb1c <__sflush_r+0x44>
 800fb10:	6863      	ldr	r3, [r4, #4]
 800fb12:	1ad2      	subs	r2, r2, r3
 800fb14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb16:	b10b      	cbz	r3, 800fb1c <__sflush_r+0x44>
 800fb18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb1a:	1ad2      	subs	r2, r2, r3
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb20:	6a21      	ldr	r1, [r4, #32]
 800fb22:	4628      	mov	r0, r5
 800fb24:	47b0      	blx	r6
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	d106      	bne.n	800fb3a <__sflush_r+0x62>
 800fb2c:	6829      	ldr	r1, [r5, #0]
 800fb2e:	291d      	cmp	r1, #29
 800fb30:	d82b      	bhi.n	800fb8a <__sflush_r+0xb2>
 800fb32:	4a2a      	ldr	r2, [pc, #168]	@ (800fbdc <__sflush_r+0x104>)
 800fb34:	40ca      	lsrs	r2, r1
 800fb36:	07d6      	lsls	r6, r2, #31
 800fb38:	d527      	bpl.n	800fb8a <__sflush_r+0xb2>
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	6062      	str	r2, [r4, #4]
 800fb3e:	04d9      	lsls	r1, r3, #19
 800fb40:	6922      	ldr	r2, [r4, #16]
 800fb42:	6022      	str	r2, [r4, #0]
 800fb44:	d504      	bpl.n	800fb50 <__sflush_r+0x78>
 800fb46:	1c42      	adds	r2, r0, #1
 800fb48:	d101      	bne.n	800fb4e <__sflush_r+0x76>
 800fb4a:	682b      	ldr	r3, [r5, #0]
 800fb4c:	b903      	cbnz	r3, 800fb50 <__sflush_r+0x78>
 800fb4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb52:	602f      	str	r7, [r5, #0]
 800fb54:	b1b9      	cbz	r1, 800fb86 <__sflush_r+0xae>
 800fb56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb5a:	4299      	cmp	r1, r3
 800fb5c:	d002      	beq.n	800fb64 <__sflush_r+0x8c>
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f7ff fa94 	bl	800f08c <_free_r>
 800fb64:	2300      	movs	r3, #0
 800fb66:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb68:	e00d      	b.n	800fb86 <__sflush_r+0xae>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	47b0      	blx	r6
 800fb70:	4602      	mov	r2, r0
 800fb72:	1c50      	adds	r0, r2, #1
 800fb74:	d1c9      	bne.n	800fb0a <__sflush_r+0x32>
 800fb76:	682b      	ldr	r3, [r5, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0c6      	beq.n	800fb0a <__sflush_r+0x32>
 800fb7c:	2b1d      	cmp	r3, #29
 800fb7e:	d001      	beq.n	800fb84 <__sflush_r+0xac>
 800fb80:	2b16      	cmp	r3, #22
 800fb82:	d11e      	bne.n	800fbc2 <__sflush_r+0xea>
 800fb84:	602f      	str	r7, [r5, #0]
 800fb86:	2000      	movs	r0, #0
 800fb88:	e022      	b.n	800fbd0 <__sflush_r+0xf8>
 800fb8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb8e:	b21b      	sxth	r3, r3
 800fb90:	e01b      	b.n	800fbca <__sflush_r+0xf2>
 800fb92:	690f      	ldr	r7, [r1, #16]
 800fb94:	2f00      	cmp	r7, #0
 800fb96:	d0f6      	beq.n	800fb86 <__sflush_r+0xae>
 800fb98:	0793      	lsls	r3, r2, #30
 800fb9a:	680e      	ldr	r6, [r1, #0]
 800fb9c:	bf08      	it	eq
 800fb9e:	694b      	ldreq	r3, [r1, #20]
 800fba0:	600f      	str	r7, [r1, #0]
 800fba2:	bf18      	it	ne
 800fba4:	2300      	movne	r3, #0
 800fba6:	eba6 0807 	sub.w	r8, r6, r7
 800fbaa:	608b      	str	r3, [r1, #8]
 800fbac:	f1b8 0f00 	cmp.w	r8, #0
 800fbb0:	dde9      	ble.n	800fb86 <__sflush_r+0xae>
 800fbb2:	6a21      	ldr	r1, [r4, #32]
 800fbb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fbb6:	4643      	mov	r3, r8
 800fbb8:	463a      	mov	r2, r7
 800fbba:	4628      	mov	r0, r5
 800fbbc:	47b0      	blx	r6
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	dc08      	bgt.n	800fbd4 <__sflush_r+0xfc>
 800fbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbca:	81a3      	strh	r3, [r4, #12]
 800fbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd4:	4407      	add	r7, r0
 800fbd6:	eba8 0800 	sub.w	r8, r8, r0
 800fbda:	e7e7      	b.n	800fbac <__sflush_r+0xd4>
 800fbdc:	20400001 	.word	0x20400001

0800fbe0 <_fflush_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	690b      	ldr	r3, [r1, #16]
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	b913      	cbnz	r3, 800fbf0 <_fflush_r+0x10>
 800fbea:	2500      	movs	r5, #0
 800fbec:	4628      	mov	r0, r5
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	b118      	cbz	r0, 800fbfa <_fflush_r+0x1a>
 800fbf2:	6a03      	ldr	r3, [r0, #32]
 800fbf4:	b90b      	cbnz	r3, 800fbfa <_fflush_r+0x1a>
 800fbf6:	f7ff f8cf 	bl	800ed98 <__sinit>
 800fbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d0f3      	beq.n	800fbea <_fflush_r+0xa>
 800fc02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc04:	07d0      	lsls	r0, r2, #31
 800fc06:	d404      	bmi.n	800fc12 <_fflush_r+0x32>
 800fc08:	0599      	lsls	r1, r3, #22
 800fc0a:	d402      	bmi.n	800fc12 <_fflush_r+0x32>
 800fc0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc0e:	f7ff fa0e 	bl	800f02e <__retarget_lock_acquire_recursive>
 800fc12:	4628      	mov	r0, r5
 800fc14:	4621      	mov	r1, r4
 800fc16:	f7ff ff5f 	bl	800fad8 <__sflush_r>
 800fc1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc1c:	07da      	lsls	r2, r3, #31
 800fc1e:	4605      	mov	r5, r0
 800fc20:	d4e4      	bmi.n	800fbec <_fflush_r+0xc>
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	059b      	lsls	r3, r3, #22
 800fc26:	d4e1      	bmi.n	800fbec <_fflush_r+0xc>
 800fc28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc2a:	f7ff fa01 	bl	800f030 <__retarget_lock_release_recursive>
 800fc2e:	e7dd      	b.n	800fbec <_fflush_r+0xc>

0800fc30 <fiprintf>:
 800fc30:	b40e      	push	{r1, r2, r3}
 800fc32:	b503      	push	{r0, r1, lr}
 800fc34:	4601      	mov	r1, r0
 800fc36:	ab03      	add	r3, sp, #12
 800fc38:	4805      	ldr	r0, [pc, #20]	@ (800fc50 <fiprintf+0x20>)
 800fc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc3e:	6800      	ldr	r0, [r0, #0]
 800fc40:	9301      	str	r3, [sp, #4]
 800fc42:	f7ff fca5 	bl	800f590 <_vfiprintf_r>
 800fc46:	b002      	add	sp, #8
 800fc48:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc4c:	b003      	add	sp, #12
 800fc4e:	4770      	bx	lr
 800fc50:	20000038 	.word	0x20000038

0800fc54 <__swbuf_r>:
 800fc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc56:	460e      	mov	r6, r1
 800fc58:	4614      	mov	r4, r2
 800fc5a:	4605      	mov	r5, r0
 800fc5c:	b118      	cbz	r0, 800fc66 <__swbuf_r+0x12>
 800fc5e:	6a03      	ldr	r3, [r0, #32]
 800fc60:	b90b      	cbnz	r3, 800fc66 <__swbuf_r+0x12>
 800fc62:	f7ff f899 	bl	800ed98 <__sinit>
 800fc66:	69a3      	ldr	r3, [r4, #24]
 800fc68:	60a3      	str	r3, [r4, #8]
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	071a      	lsls	r2, r3, #28
 800fc6e:	d501      	bpl.n	800fc74 <__swbuf_r+0x20>
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	b943      	cbnz	r3, 800fc86 <__swbuf_r+0x32>
 800fc74:	4621      	mov	r1, r4
 800fc76:	4628      	mov	r0, r5
 800fc78:	f000 f82a 	bl	800fcd0 <__swsetup_r>
 800fc7c:	b118      	cbz	r0, 800fc86 <__swbuf_r+0x32>
 800fc7e:	f04f 37ff 	mov.w	r7, #4294967295
 800fc82:	4638      	mov	r0, r7
 800fc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	6922      	ldr	r2, [r4, #16]
 800fc8a:	1a98      	subs	r0, r3, r2
 800fc8c:	6963      	ldr	r3, [r4, #20]
 800fc8e:	b2f6      	uxtb	r6, r6
 800fc90:	4283      	cmp	r3, r0
 800fc92:	4637      	mov	r7, r6
 800fc94:	dc05      	bgt.n	800fca2 <__swbuf_r+0x4e>
 800fc96:	4621      	mov	r1, r4
 800fc98:	4628      	mov	r0, r5
 800fc9a:	f7ff ffa1 	bl	800fbe0 <_fflush_r>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d1ed      	bne.n	800fc7e <__swbuf_r+0x2a>
 800fca2:	68a3      	ldr	r3, [r4, #8]
 800fca4:	3b01      	subs	r3, #1
 800fca6:	60a3      	str	r3, [r4, #8]
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	1c5a      	adds	r2, r3, #1
 800fcac:	6022      	str	r2, [r4, #0]
 800fcae:	701e      	strb	r6, [r3, #0]
 800fcb0:	6962      	ldr	r2, [r4, #20]
 800fcb2:	1c43      	adds	r3, r0, #1
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d004      	beq.n	800fcc2 <__swbuf_r+0x6e>
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	07db      	lsls	r3, r3, #31
 800fcbc:	d5e1      	bpl.n	800fc82 <__swbuf_r+0x2e>
 800fcbe:	2e0a      	cmp	r6, #10
 800fcc0:	d1df      	bne.n	800fc82 <__swbuf_r+0x2e>
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f7ff ff8b 	bl	800fbe0 <_fflush_r>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d0d9      	beq.n	800fc82 <__swbuf_r+0x2e>
 800fcce:	e7d6      	b.n	800fc7e <__swbuf_r+0x2a>

0800fcd0 <__swsetup_r>:
 800fcd0:	b538      	push	{r3, r4, r5, lr}
 800fcd2:	4b29      	ldr	r3, [pc, #164]	@ (800fd78 <__swsetup_r+0xa8>)
 800fcd4:	4605      	mov	r5, r0
 800fcd6:	6818      	ldr	r0, [r3, #0]
 800fcd8:	460c      	mov	r4, r1
 800fcda:	b118      	cbz	r0, 800fce4 <__swsetup_r+0x14>
 800fcdc:	6a03      	ldr	r3, [r0, #32]
 800fcde:	b90b      	cbnz	r3, 800fce4 <__swsetup_r+0x14>
 800fce0:	f7ff f85a 	bl	800ed98 <__sinit>
 800fce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fce8:	0719      	lsls	r1, r3, #28
 800fcea:	d422      	bmi.n	800fd32 <__swsetup_r+0x62>
 800fcec:	06da      	lsls	r2, r3, #27
 800fcee:	d407      	bmi.n	800fd00 <__swsetup_r+0x30>
 800fcf0:	2209      	movs	r2, #9
 800fcf2:	602a      	str	r2, [r5, #0]
 800fcf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcf8:	81a3      	strh	r3, [r4, #12]
 800fcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800fcfe:	e033      	b.n	800fd68 <__swsetup_r+0x98>
 800fd00:	0758      	lsls	r0, r3, #29
 800fd02:	d512      	bpl.n	800fd2a <__swsetup_r+0x5a>
 800fd04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd06:	b141      	cbz	r1, 800fd1a <__swsetup_r+0x4a>
 800fd08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd0c:	4299      	cmp	r1, r3
 800fd0e:	d002      	beq.n	800fd16 <__swsetup_r+0x46>
 800fd10:	4628      	mov	r0, r5
 800fd12:	f7ff f9bb 	bl	800f08c <_free_r>
 800fd16:	2300      	movs	r3, #0
 800fd18:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd1a:	89a3      	ldrh	r3, [r4, #12]
 800fd1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd20:	81a3      	strh	r3, [r4, #12]
 800fd22:	2300      	movs	r3, #0
 800fd24:	6063      	str	r3, [r4, #4]
 800fd26:	6923      	ldr	r3, [r4, #16]
 800fd28:	6023      	str	r3, [r4, #0]
 800fd2a:	89a3      	ldrh	r3, [r4, #12]
 800fd2c:	f043 0308 	orr.w	r3, r3, #8
 800fd30:	81a3      	strh	r3, [r4, #12]
 800fd32:	6923      	ldr	r3, [r4, #16]
 800fd34:	b94b      	cbnz	r3, 800fd4a <__swsetup_r+0x7a>
 800fd36:	89a3      	ldrh	r3, [r4, #12]
 800fd38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fd3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd40:	d003      	beq.n	800fd4a <__swsetup_r+0x7a>
 800fd42:	4621      	mov	r1, r4
 800fd44:	4628      	mov	r0, r5
 800fd46:	f000 f884 	bl	800fe52 <__smakebuf_r>
 800fd4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd4e:	f013 0201 	ands.w	r2, r3, #1
 800fd52:	d00a      	beq.n	800fd6a <__swsetup_r+0x9a>
 800fd54:	2200      	movs	r2, #0
 800fd56:	60a2      	str	r2, [r4, #8]
 800fd58:	6962      	ldr	r2, [r4, #20]
 800fd5a:	4252      	negs	r2, r2
 800fd5c:	61a2      	str	r2, [r4, #24]
 800fd5e:	6922      	ldr	r2, [r4, #16]
 800fd60:	b942      	cbnz	r2, 800fd74 <__swsetup_r+0xa4>
 800fd62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fd66:	d1c5      	bne.n	800fcf4 <__swsetup_r+0x24>
 800fd68:	bd38      	pop	{r3, r4, r5, pc}
 800fd6a:	0799      	lsls	r1, r3, #30
 800fd6c:	bf58      	it	pl
 800fd6e:	6962      	ldrpl	r2, [r4, #20]
 800fd70:	60a2      	str	r2, [r4, #8]
 800fd72:	e7f4      	b.n	800fd5e <__swsetup_r+0x8e>
 800fd74:	2000      	movs	r0, #0
 800fd76:	e7f7      	b.n	800fd68 <__swsetup_r+0x98>
 800fd78:	20000038 	.word	0x20000038

0800fd7c <_sbrk_r>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	4d06      	ldr	r5, [pc, #24]	@ (800fd98 <_sbrk_r+0x1c>)
 800fd80:	2300      	movs	r3, #0
 800fd82:	4604      	mov	r4, r0
 800fd84:	4608      	mov	r0, r1
 800fd86:	602b      	str	r3, [r5, #0]
 800fd88:	f7f0 fe2e 	bl	80009e8 <_sbrk>
 800fd8c:	1c43      	adds	r3, r0, #1
 800fd8e:	d102      	bne.n	800fd96 <_sbrk_r+0x1a>
 800fd90:	682b      	ldr	r3, [r5, #0]
 800fd92:	b103      	cbz	r3, 800fd96 <_sbrk_r+0x1a>
 800fd94:	6023      	str	r3, [r4, #0]
 800fd96:	bd38      	pop	{r3, r4, r5, pc}
 800fd98:	20007f18 	.word	0x20007f18

0800fd9c <abort>:
 800fd9c:	b508      	push	{r3, lr}
 800fd9e:	2006      	movs	r0, #6
 800fda0:	f000 f8bc 	bl	800ff1c <raise>
 800fda4:	2001      	movs	r0, #1
 800fda6:	f7f0 fda7 	bl	80008f8 <_exit>

0800fdaa <_realloc_r>:
 800fdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdae:	4607      	mov	r7, r0
 800fdb0:	4614      	mov	r4, r2
 800fdb2:	460d      	mov	r5, r1
 800fdb4:	b921      	cbnz	r1, 800fdc0 <_realloc_r+0x16>
 800fdb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdba:	4611      	mov	r1, r2
 800fdbc:	f7ff b9da 	b.w	800f174 <_malloc_r>
 800fdc0:	b92a      	cbnz	r2, 800fdce <_realloc_r+0x24>
 800fdc2:	f7ff f963 	bl	800f08c <_free_r>
 800fdc6:	4625      	mov	r5, r4
 800fdc8:	4628      	mov	r0, r5
 800fdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdce:	f000 f8e3 	bl	800ff98 <_malloc_usable_size_r>
 800fdd2:	4284      	cmp	r4, r0
 800fdd4:	4606      	mov	r6, r0
 800fdd6:	d802      	bhi.n	800fdde <_realloc_r+0x34>
 800fdd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fddc:	d8f4      	bhi.n	800fdc8 <_realloc_r+0x1e>
 800fdde:	4621      	mov	r1, r4
 800fde0:	4638      	mov	r0, r7
 800fde2:	f7ff f9c7 	bl	800f174 <_malloc_r>
 800fde6:	4680      	mov	r8, r0
 800fde8:	b908      	cbnz	r0, 800fdee <_realloc_r+0x44>
 800fdea:	4645      	mov	r5, r8
 800fdec:	e7ec      	b.n	800fdc8 <_realloc_r+0x1e>
 800fdee:	42b4      	cmp	r4, r6
 800fdf0:	4622      	mov	r2, r4
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	bf28      	it	cs
 800fdf6:	4632      	movcs	r2, r6
 800fdf8:	f7ff f91b 	bl	800f032 <memcpy>
 800fdfc:	4629      	mov	r1, r5
 800fdfe:	4638      	mov	r0, r7
 800fe00:	f7ff f944 	bl	800f08c <_free_r>
 800fe04:	e7f1      	b.n	800fdea <_realloc_r+0x40>

0800fe06 <__swhatbuf_r>:
 800fe06:	b570      	push	{r4, r5, r6, lr}
 800fe08:	460c      	mov	r4, r1
 800fe0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe0e:	2900      	cmp	r1, #0
 800fe10:	b096      	sub	sp, #88	@ 0x58
 800fe12:	4615      	mov	r5, r2
 800fe14:	461e      	mov	r6, r3
 800fe16:	da0d      	bge.n	800fe34 <__swhatbuf_r+0x2e>
 800fe18:	89a3      	ldrh	r3, [r4, #12]
 800fe1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fe1e:	f04f 0100 	mov.w	r1, #0
 800fe22:	bf14      	ite	ne
 800fe24:	2340      	movne	r3, #64	@ 0x40
 800fe26:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	6031      	str	r1, [r6, #0]
 800fe2e:	602b      	str	r3, [r5, #0]
 800fe30:	b016      	add	sp, #88	@ 0x58
 800fe32:	bd70      	pop	{r4, r5, r6, pc}
 800fe34:	466a      	mov	r2, sp
 800fe36:	f000 f879 	bl	800ff2c <_fstat_r>
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	dbec      	blt.n	800fe18 <__swhatbuf_r+0x12>
 800fe3e:	9901      	ldr	r1, [sp, #4]
 800fe40:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fe44:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fe48:	4259      	negs	r1, r3
 800fe4a:	4159      	adcs	r1, r3
 800fe4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe50:	e7eb      	b.n	800fe2a <__swhatbuf_r+0x24>

0800fe52 <__smakebuf_r>:
 800fe52:	898b      	ldrh	r3, [r1, #12]
 800fe54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe56:	079d      	lsls	r5, r3, #30
 800fe58:	4606      	mov	r6, r0
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	d507      	bpl.n	800fe6e <__smakebuf_r+0x1c>
 800fe5e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fe62:	6023      	str	r3, [r4, #0]
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	2301      	movs	r3, #1
 800fe68:	6163      	str	r3, [r4, #20]
 800fe6a:	b003      	add	sp, #12
 800fe6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe6e:	ab01      	add	r3, sp, #4
 800fe70:	466a      	mov	r2, sp
 800fe72:	f7ff ffc8 	bl	800fe06 <__swhatbuf_r>
 800fe76:	9f00      	ldr	r7, [sp, #0]
 800fe78:	4605      	mov	r5, r0
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	f7ff f979 	bl	800f174 <_malloc_r>
 800fe82:	b948      	cbnz	r0, 800fe98 <__smakebuf_r+0x46>
 800fe84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe88:	059a      	lsls	r2, r3, #22
 800fe8a:	d4ee      	bmi.n	800fe6a <__smakebuf_r+0x18>
 800fe8c:	f023 0303 	bic.w	r3, r3, #3
 800fe90:	f043 0302 	orr.w	r3, r3, #2
 800fe94:	81a3      	strh	r3, [r4, #12]
 800fe96:	e7e2      	b.n	800fe5e <__smakebuf_r+0xc>
 800fe98:	89a3      	ldrh	r3, [r4, #12]
 800fe9a:	6020      	str	r0, [r4, #0]
 800fe9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fea0:	81a3      	strh	r3, [r4, #12]
 800fea2:	9b01      	ldr	r3, [sp, #4]
 800fea4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fea8:	b15b      	cbz	r3, 800fec2 <__smakebuf_r+0x70>
 800feaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feae:	4630      	mov	r0, r6
 800feb0:	f000 f84e 	bl	800ff50 <_isatty_r>
 800feb4:	b128      	cbz	r0, 800fec2 <__smakebuf_r+0x70>
 800feb6:	89a3      	ldrh	r3, [r4, #12]
 800feb8:	f023 0303 	bic.w	r3, r3, #3
 800febc:	f043 0301 	orr.w	r3, r3, #1
 800fec0:	81a3      	strh	r3, [r4, #12]
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	431d      	orrs	r5, r3
 800fec6:	81a5      	strh	r5, [r4, #12]
 800fec8:	e7cf      	b.n	800fe6a <__smakebuf_r+0x18>

0800feca <_raise_r>:
 800feca:	291f      	cmp	r1, #31
 800fecc:	b538      	push	{r3, r4, r5, lr}
 800fece:	4605      	mov	r5, r0
 800fed0:	460c      	mov	r4, r1
 800fed2:	d904      	bls.n	800fede <_raise_r+0x14>
 800fed4:	2316      	movs	r3, #22
 800fed6:	6003      	str	r3, [r0, #0]
 800fed8:	f04f 30ff 	mov.w	r0, #4294967295
 800fedc:	bd38      	pop	{r3, r4, r5, pc}
 800fede:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fee0:	b112      	cbz	r2, 800fee8 <_raise_r+0x1e>
 800fee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fee6:	b94b      	cbnz	r3, 800fefc <_raise_r+0x32>
 800fee8:	4628      	mov	r0, r5
 800feea:	f000 f853 	bl	800ff94 <_getpid_r>
 800feee:	4622      	mov	r2, r4
 800fef0:	4601      	mov	r1, r0
 800fef2:	4628      	mov	r0, r5
 800fef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fef8:	f000 b83a 	b.w	800ff70 <_kill_r>
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d00a      	beq.n	800ff16 <_raise_r+0x4c>
 800ff00:	1c59      	adds	r1, r3, #1
 800ff02:	d103      	bne.n	800ff0c <_raise_r+0x42>
 800ff04:	2316      	movs	r3, #22
 800ff06:	6003      	str	r3, [r0, #0]
 800ff08:	2001      	movs	r0, #1
 800ff0a:	e7e7      	b.n	800fedc <_raise_r+0x12>
 800ff0c:	2100      	movs	r1, #0
 800ff0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff12:	4620      	mov	r0, r4
 800ff14:	4798      	blx	r3
 800ff16:	2000      	movs	r0, #0
 800ff18:	e7e0      	b.n	800fedc <_raise_r+0x12>
	...

0800ff1c <raise>:
 800ff1c:	4b02      	ldr	r3, [pc, #8]	@ (800ff28 <raise+0xc>)
 800ff1e:	4601      	mov	r1, r0
 800ff20:	6818      	ldr	r0, [r3, #0]
 800ff22:	f7ff bfd2 	b.w	800feca <_raise_r>
 800ff26:	bf00      	nop
 800ff28:	20000038 	.word	0x20000038

0800ff2c <_fstat_r>:
 800ff2c:	b538      	push	{r3, r4, r5, lr}
 800ff2e:	4d07      	ldr	r5, [pc, #28]	@ (800ff4c <_fstat_r+0x20>)
 800ff30:	2300      	movs	r3, #0
 800ff32:	4604      	mov	r4, r0
 800ff34:	4608      	mov	r0, r1
 800ff36:	4611      	mov	r1, r2
 800ff38:	602b      	str	r3, [r5, #0]
 800ff3a:	f7f0 fd2d 	bl	8000998 <_fstat>
 800ff3e:	1c43      	adds	r3, r0, #1
 800ff40:	d102      	bne.n	800ff48 <_fstat_r+0x1c>
 800ff42:	682b      	ldr	r3, [r5, #0]
 800ff44:	b103      	cbz	r3, 800ff48 <_fstat_r+0x1c>
 800ff46:	6023      	str	r3, [r4, #0]
 800ff48:	bd38      	pop	{r3, r4, r5, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20007f18 	.word	0x20007f18

0800ff50 <_isatty_r>:
 800ff50:	b538      	push	{r3, r4, r5, lr}
 800ff52:	4d06      	ldr	r5, [pc, #24]	@ (800ff6c <_isatty_r+0x1c>)
 800ff54:	2300      	movs	r3, #0
 800ff56:	4604      	mov	r4, r0
 800ff58:	4608      	mov	r0, r1
 800ff5a:	602b      	str	r3, [r5, #0]
 800ff5c:	f7f0 fd2c 	bl	80009b8 <_isatty>
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	d102      	bne.n	800ff6a <_isatty_r+0x1a>
 800ff64:	682b      	ldr	r3, [r5, #0]
 800ff66:	b103      	cbz	r3, 800ff6a <_isatty_r+0x1a>
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	bd38      	pop	{r3, r4, r5, pc}
 800ff6c:	20007f18 	.word	0x20007f18

0800ff70 <_kill_r>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	4d07      	ldr	r5, [pc, #28]	@ (800ff90 <_kill_r+0x20>)
 800ff74:	2300      	movs	r3, #0
 800ff76:	4604      	mov	r4, r0
 800ff78:	4608      	mov	r0, r1
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	602b      	str	r3, [r5, #0]
 800ff7e:	f7f0 fca9 	bl	80008d4 <_kill>
 800ff82:	1c43      	adds	r3, r0, #1
 800ff84:	d102      	bne.n	800ff8c <_kill_r+0x1c>
 800ff86:	682b      	ldr	r3, [r5, #0]
 800ff88:	b103      	cbz	r3, 800ff8c <_kill_r+0x1c>
 800ff8a:	6023      	str	r3, [r4, #0]
 800ff8c:	bd38      	pop	{r3, r4, r5, pc}
 800ff8e:	bf00      	nop
 800ff90:	20007f18 	.word	0x20007f18

0800ff94 <_getpid_r>:
 800ff94:	f7f0 bc95 	b.w	80008c2 <_getpid>

0800ff98 <_malloc_usable_size_r>:
 800ff98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff9c:	1f18      	subs	r0, r3, #4
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	bfbc      	itt	lt
 800ffa2:	580b      	ldrlt	r3, [r1, r0]
 800ffa4:	18c0      	addlt	r0, r0, r3
 800ffa6:	4770      	bx	lr

0800ffa8 <_init>:
 800ffa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffaa:	bf00      	nop
 800ffac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffae:	bc08      	pop	{r3}
 800ffb0:	469e      	mov	lr, r3
 800ffb2:	4770      	bx	lr

0800ffb4 <_fini>:
 800ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb6:	bf00      	nop
 800ffb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffba:	bc08      	pop	{r3}
 800ffbc:	469e      	mov	lr, r3
 800ffbe:	4770      	bx	lr
